
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f98  08000f98  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  08000f98  08000f98  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f98  08000f98  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f98  08000f98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08000fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  200001c0  08001160  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08001160  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003612  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cae  00000000  00000000  00023802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  000244b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000300  00000000  00000000  00024870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001732  00000000  00000000  00024b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022c6  00000000  00000000  000262a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ebf  00000000  00000000  00028568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c60  00000000  00000000  000ef478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001c0 	.word	0x200001c0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f74 	.word	0x08000f74

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001c4 	.word	0x200001c4
 8000200:	08000f74 	.word	0x08000f74

08000204 <CAN_voidInitialize>:
	/*Enable the chosen interrupt*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_IER,Copy_Can_Interrupt);
}

void CAN_voidInitialize(CAN_Init_t * Copy_t_Init)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/*Reset the registers*/
	CAN_CONTROL_AND_STATUS->CAN_MCR =0x02;
 800020c:	4b7c      	ldr	r3, [pc, #496]	; (8000400 <CAN_voidInitialize+0x1fc>)
 800020e:	2202      	movs	r2, #2
 8000210:	601a      	str	r2, [r3, #0]

	/*Stop the freeze while debug*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_DBF);
 8000212:	4b7b      	ldr	r3, [pc, #492]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a7a      	ldr	r2, [pc, #488]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	/*The default used values are:
	 * fifo priority driven by identifier of the message*/

	/*Automatic bus-off management:The Bus-Off state is left automatically by hardware once
	 * 128 occurrences of 11 recessive bits have been monitored.*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_ABOM);
 800021e:	4b78      	ldr	r3, [pc, #480]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a77      	ldr	r2, [pc, #476]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000228:	6013      	str	r3, [r2, #0]

	/*Automatic wakeup mode: The Sleep mode is left automatically by hardware on CAN message detection*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_AWUM);
 800022a:	4b75      	ldr	r3, [pc, #468]	; (8000400 <CAN_voidInitialize+0x1fc>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a74      	ldr	r2, [pc, #464]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6013      	str	r3, [r2, #0]

	/*Request to enter Initialization mode*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_INRQ);
 8000236:	4b72      	ldr	r3, [pc, #456]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a71      	ldr	r2, [pc, #452]	; (8000400 <CAN_voidInitialize+0x1fc>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

	/*Exit sleep mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_SLEEP);
 8000242:	4b6f      	ldr	r3, [pc, #444]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a6e      	ldr	r2, [pc, #440]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000248:	f023 0302 	bic.w	r3, r3, #2
 800024c:	6013      	str	r3, [r2, #0]

	while( (!GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_INAK)) || (GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_SLAK)) )
 800024e:	bf00      	nop
 8000250:	4b6b      	ldr	r3, [pc, #428]	; (8000400 <CAN_voidInitialize+0x1fc>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f9      	beq.n	8000250 <CAN_voidInitialize+0x4c>
 800025c:	4b68      	ldr	r3, [pc, #416]	; (8000400 <CAN_voidInitialize+0x1fc>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	085b      	lsrs	r3, r3, #1
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f2      	bne.n	8000250 <CAN_voidInitialize+0x4c>
	{
		/*Do nothing until initialization mode is entered*/
	}

	/*For 1Mbps , and bus frequency of 16 MHz , total number of 8 quantas and SJW =1*/
	CAN_CONTROL_AND_STATUS->CAN_BTR = 0x00050001;
 800026a:	4b65      	ldr	r3, [pc, #404]	; (8000400 <CAN_voidInitialize+0x1fc>)
 800026c:	4a65      	ldr	r2, [pc, #404]	; (8000404 <CAN_voidInitialize+0x200>)
 800026e:	61da      	str	r2, [r3, #28]
	}


	/*------------------------------------Filters Initialization------------------------------------*/
	/*Enter filters initialization mode*/
	SET_BIT(CAN_FMR,CAN_FMR_FINIT);
 8000270:	4b65      	ldr	r3, [pc, #404]	; (8000408 <CAN_voidInitialize+0x204>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a64      	ldr	r2, [pc, #400]	; (8000408 <CAN_voidInitialize+0x204>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]

	/*Reset mode register*/
	CAN_FM1R=0x0000;
 800027c:	4b63      	ldr	r3, [pc, #396]	; (800040c <CAN_voidInitialize+0x208>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]

	/*Assign all filters to one CAN*/
	CAN_FMR &= ~(0b111111<< (CAN_FMR_CANSB));
 8000282:	4b61      	ldr	r3, [pc, #388]	; (8000408 <CAN_voidInitialize+0x204>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a60      	ldr	r2, [pc, #384]	; (8000408 <CAN_voidInitialize+0x204>)
 8000288:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800028c:	6013      	str	r3, [r2, #0]


	/*Choose scale mode*/
	if(Copy_t_Init->Filter_Scale == Dual_16_bit_scale)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	785b      	ldrb	r3, [r3, #1]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d103      	bne.n	800029e <CAN_voidInitialize+0x9a>
	{
		CAN_FS1R = 0x0000;
 8000296:	4b5e      	ldr	r3, [pc, #376]	; (8000410 <CAN_voidInitialize+0x20c>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	e006      	b.n	80002ac <CAN_voidInitialize+0xa8>
	}
	else if(Copy_t_Init->Filter_Scale == Single_32_bit_scale)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	785b      	ldrb	r3, [r3, #1]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d102      	bne.n	80002ac <CAN_voidInitialize+0xa8>
	{
		CAN_FS1R = 0x7fffff;
 80002a6:	4b5a      	ldr	r3, [pc, #360]	; (8000410 <CAN_voidInitialize+0x20c>)
 80002a8:	4a5a      	ldr	r2, [pc, #360]	; (8000414 <CAN_voidInitialize+0x210>)
 80002aa:	601a      	str	r2, [r3, #0]
	}

	/*Set the filters that are in List mode*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Filters_In_List_Mode) ; filter_number++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	e00c      	b.n	80002cc <CAN_voidInitialize+0xc8>
	{
		SET_BIT(CAN_FM1R,filter_number);
 80002b2:	4b56      	ldr	r3, [pc, #344]	; (800040c <CAN_voidInitialize+0x208>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	7bfa      	ldrb	r2, [r7, #15]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a52      	ldr	r2, [pc, #328]	; (800040c <CAN_voidInitialize+0x208>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Filters_In_List_Mode) ; filter_number++)
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	3301      	adds	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	7bfa      	ldrb	r2, [r7, #15]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3ed      	bcc.n	80002b2 <CAN_voidInitialize+0xae>
	}

	/*Set the filters assigned to FIFO_0*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	73bb      	strb	r3, [r7, #14]
 80002da:	e022      	b.n	8000322 <CAN_voidInitialize+0x11e>
	{
		if( filter_number < (Copy_t_Init->No_Of_Filters_For_FIFO_ZERO) )
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	78db      	ldrb	r3, [r3, #3]
 80002e0:	7bba      	ldrb	r2, [r7, #14]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d20b      	bcs.n	80002fe <CAN_voidInitialize+0xfa>
		{
			CLR_BIT(CAN_FFA1R,filter_number);
 80002e6:	4b4c      	ldr	r3, [pc, #304]	; (8000418 <CAN_voidInitialize+0x214>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	7bba      	ldrb	r2, [r7, #14]
 80002ec:	2101      	movs	r1, #1
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a48      	ldr	r2, [pc, #288]	; (8000418 <CAN_voidInitialize+0x214>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	e00e      	b.n	800031c <CAN_voidInitialize+0x118>
		}
		else if( filter_number >= (Copy_t_Init->No_Of_Filters_For_FIFO_ZERO) )
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	78db      	ldrb	r3, [r3, #3]
 8000302:	7bba      	ldrb	r2, [r7, #14]
 8000304:	429a      	cmp	r2, r3
 8000306:	d309      	bcc.n	800031c <CAN_voidInitialize+0x118>
		{
			SET_BIT(CAN_FFA1R,filter_number);
 8000308:	4b43      	ldr	r3, [pc, #268]	; (8000418 <CAN_voidInitialize+0x214>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	7bba      	ldrb	r2, [r7, #14]
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a40      	ldr	r2, [pc, #256]	; (8000418 <CAN_voidInitialize+0x214>)
 8000318:	430b      	orrs	r3, r1
 800031a:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 800031c:	7bbb      	ldrb	r3, [r7, #14]
 800031e:	3301      	adds	r3, #1
 8000320:	73bb      	strb	r3, [r7, #14]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	7bba      	ldrb	r2, [r7, #14]
 8000328:	429a      	cmp	r2, r3
 800032a:	d3d7      	bcc.n	80002dc <CAN_voidInitialize+0xd8>
		}
	}

	/*Write the ID or mask as configured in "CAN_config.h"*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 800032c:	2300      	movs	r3, #0
 800032e:	737b      	strb	r3, [r7, #13]
 8000330:	e01a      	b.n	8000368 <CAN_voidInitialize+0x164>
	{
		*Filter_Bank[filter_number*2] = Filter_Banks_Config[filter_number*2];
 8000332:	7b7b      	ldrb	r3, [r7, #13]
 8000334:	005a      	lsls	r2, r3, #1
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	4938      	ldr	r1, [pc, #224]	; (800041c <CAN_voidInitialize+0x218>)
 800033c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000340:	4937      	ldr	r1, [pc, #220]	; (8000420 <CAN_voidInitialize+0x21c>)
 8000342:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000346:	601a      	str	r2, [r3, #0]
		*Filter_Bank[(filter_number*2)+1] = Filter_Banks_Config[(filter_number*2)+1];
 8000348:	7b7b      	ldrb	r3, [r7, #13]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	7b7b      	ldrb	r3, [r7, #13]
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	3301      	adds	r3, #1
 8000354:	4931      	ldr	r1, [pc, #196]	; (800041c <CAN_voidInitialize+0x218>)
 8000356:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800035a:	4931      	ldr	r1, [pc, #196]	; (8000420 <CAN_voidInitialize+0x21c>)
 800035c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000360:	601a      	str	r2, [r3, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 8000362:	7b7b      	ldrb	r3, [r7, #13]
 8000364:	3301      	adds	r3, #1
 8000366:	737b      	strb	r3, [r7, #13]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	7b7a      	ldrb	r2, [r7, #13]
 800036e:	429a      	cmp	r2, r3
 8000370:	d3df      	bcc.n	8000332 <CAN_voidInitialize+0x12e>
	}


	/*Activate all the needed filters*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 8000372:	2300      	movs	r3, #0
 8000374:	733b      	strb	r3, [r7, #12]
 8000376:	e00c      	b.n	8000392 <CAN_voidInitialize+0x18e>
	{
		SET_BIT(CAN_FA1R,filter_number);
 8000378:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <CAN_voidInitialize+0x220>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	7b3a      	ldrb	r2, [r7, #12]
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a27      	ldr	r2, [pc, #156]	; (8000424 <CAN_voidInitialize+0x220>)
 8000388:	430b      	orrs	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 800038c:	7b3b      	ldrb	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	733b      	strb	r3, [r7, #12]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	7b3a      	ldrb	r2, [r7, #12]
 8000398:	429a      	cmp	r2, r3
 800039a:	d3ed      	bcc.n	8000378 <CAN_voidInitialize+0x174>
	}

	/*Set normal mode for filters*/
	CLR_BIT(CAN_FMR,CAN_FMR_FINIT);
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <CAN_voidInitialize+0x204>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a19      	ldr	r2, [pc, #100]	; (8000408 <CAN_voidInitialize+0x204>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
	/*------------------------------------------------------------------------------------------------*/

	/*Reset transmit data registers*/
	CAN_MAILBOX->CAN_TDL0R =0;
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <CAN_voidInitialize+0x224>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
	CAN_MAILBOX->CAN_TDH0R =0;
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <CAN_voidInitialize+0x224>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
	CAN_MAILBOX->CAN_TDL1R =0;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <CAN_voidInitialize+0x224>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
	CAN_MAILBOX->CAN_TDH1R =0;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <CAN_voidInitialize+0x224>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
	CAN_MAILBOX->CAN_TDL2R =0;
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <CAN_voidInitialize+0x224>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28
	CAN_MAILBOX->CAN_TDH2R =0;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <CAN_voidInitialize+0x224>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enter Normal mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_INRQ);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <CAN_voidInitialize+0x1fc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <CAN_voidInitialize+0x1fc>)
 80003d2:	f023 0301 	bic.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]
	/*Exit sleep mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_SLEEP);
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <CAN_voidInitialize+0x1fc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <CAN_voidInitialize+0x1fc>)
 80003de:	f023 0302 	bic.w	r3, r3, #2
 80003e2:	6013      	str	r3, [r2, #0]

	while(GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_INAK))
 80003e4:	bf00      	nop
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <CAN_voidInitialize+0x1fc>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f9      	bne.n	80003e6 <CAN_voidInitialize+0x1e2>
	{
		/*Do nothing until normal mode is entered*/
	}
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40006400 	.word	0x40006400
 8000404:	00050001 	.word	0x00050001
 8000408:	40006600 	.word	0x40006600
 800040c:	40006604 	.word	0x40006604
 8000410:	4000660c 	.word	0x4000660c
 8000414:	007fffff 	.word	0x007fffff
 8000418:	40006614 	.word	0x40006614
 800041c:	20000000 	.word	0x20000000
 8000420:	200000e0 	.word	0x200000e0
 8000424:	4000661c 	.word	0x4000661c
 8000428:	40006580 	.word	0x40006580

0800042c <CAN_voidReceive>:

/*****************************************************************************************************************/
/*****************************************************************************************************************/

void CAN_voidReceive(CAN_Receive_t * Copy_t_ReceivedMessage)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	/*If at least a message is pending at FIF00*/
	if((CAN_CONTROL_AND_STATUS->CAN_RF0R & 0x03) != 0)
 8000434:	4b76      	ldr	r3, [pc, #472]	; (8000610 <CAN_voidReceive+0x1e4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d064      	beq.n	800050a <CAN_voidReceive+0xde>
	{
		/*Get frame type*/
		Copy_t_ReceivedMessage->FrameType = GET_BIT(CAN_MAILBOX->CAN_RI0R,CAN_RIxR_RTR);
 8000440:	4b74      	ldr	r3, [pc, #464]	; (8000614 <CAN_voidReceive+0x1e8>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	085b      	lsrs	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	701a      	strb	r2, [r3, #0]
		/*Get number of received bytes*/
		Copy_t_ReceivedMessage->DataLength = (0x00ff & (CAN_MAILBOX->CAN_RDT0R));
 8000452:	4b70      	ldr	r3, [pc, #448]	; (8000614 <CAN_voidReceive+0x1e8>)
 8000454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000456:	b2da      	uxtb	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	705a      	strb	r2, [r3, #1]

		/*Read Data bytes */
		if(Copy_t_ReceivedMessage->DataLength <= 4)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	785b      	ldrb	r3, [r3, #1]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d816      	bhi.n	8000492 <CAN_voidReceive+0x66>
		{
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
 8000468:	e00d      	b.n	8000486 <CAN_voidReceive+0x5a>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDL0R >> (counter*8));
 800046a:	4b6a      	ldr	r3, [pc, #424]	; (8000614 <CAN_voidReceive+0x1e8>)
 800046c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	40da      	lsrs	r2, r3
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	b2d1      	uxtb	r1, r2
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	460a      	mov	r2, r1
 800047e:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	3301      	adds	r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	785b      	ldrb	r3, [r3, #1]
 800048a:	7bfa      	ldrb	r2, [r7, #15]
 800048c:	429a      	cmp	r2, r3
 800048e:	d3ec      	bcc.n	800046a <CAN_voidReceive+0x3e>
 8000490:	e02e      	b.n	80004f0 <CAN_voidReceive+0xc4>
			}
		}
		else if(Copy_t_ReceivedMessage->DataLength >= 5)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	2b04      	cmp	r3, #4
 8000498:	d92a      	bls.n	80004f0 <CAN_voidReceive+0xc4>
		{
		/*Read Data bytes */
			for(u8 counter=0; counter < 4; counter++)
 800049a:	2300      	movs	r3, #0
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	e00d      	b.n	80004bc <CAN_voidReceive+0x90>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDL0R >> (counter*8));
 80004a0:	4b5c      	ldr	r3, [pc, #368]	; (8000614 <CAN_voidReceive+0x1e8>)
 80004a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004a4:	7bbb      	ldrb	r3, [r7, #14]
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	40da      	lsrs	r2, r3
 80004aa:	7bbb      	ldrb	r3, [r7, #14]
 80004ac:	b2d1      	uxtb	r1, r2
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	460a      	mov	r2, r1
 80004b4:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < 4; counter++)
 80004b6:	7bbb      	ldrb	r3, [r7, #14]
 80004b8:	3301      	adds	r3, #1
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	7bbb      	ldrb	r3, [r7, #14]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d9ee      	bls.n	80004a0 <CAN_voidReceive+0x74>
			}

			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80004c2:	2304      	movs	r3, #4
 80004c4:	737b      	strb	r3, [r7, #13]
 80004c6:	e00e      	b.n	80004e6 <CAN_voidReceive+0xba>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDH0R >> ((counter-4)*8));
 80004c8:	4b52      	ldr	r3, [pc, #328]	; (8000614 <CAN_voidReceive+0x1e8>)
 80004ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004cc:	7b7b      	ldrb	r3, [r7, #13]
 80004ce:	3b04      	subs	r3, #4
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	40da      	lsrs	r2, r3
 80004d4:	7b7b      	ldrb	r3, [r7, #13]
 80004d6:	b2d1      	uxtb	r1, r2
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	460a      	mov	r2, r1
 80004de:	70da      	strb	r2, [r3, #3]
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	3301      	adds	r3, #1
 80004e4:	737b      	strb	r3, [r7, #13]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	785b      	ldrb	r3, [r3, #1]
 80004ea:	7b7a      	ldrb	r2, [r7, #13]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3eb      	bcc.n	80004c8 <CAN_voidReceive+0x9c>
			}
		}

		/*Get filter index*/
		Copy_t_ReceivedMessage->FilterIndex = 0x00ff & (CAN_MAILBOX->CAN_RDT0R >>CAN_RDTxR_FMI);
 80004f0:	4b48      	ldr	r3, [pc, #288]	; (8000614 <CAN_voidReceive+0x1e8>)
 80004f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	709a      	strb	r2, [r3, #2]
		/*Release FIFO 0 output mailbox after receiving message*/
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF0R,CAN_RF0R_RFOM0);
 80004fc:	4b44      	ldr	r3, [pc, #272]	; (8000610 <CAN_voidReceive+0x1e4>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a43      	ldr	r2, [pc, #268]	; (8000610 <CAN_voidReceive+0x1e4>)
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	60d3      	str	r3, [r2, #12]
		/*Get filter index*/
		Copy_t_ReceivedMessage->FilterIndex = (u8) ( 0x000f & (CAN_MAILBOX->CAN_RDT1R >>CAN_RDTxR_FMI) );
		/*Release FIFO 1 output mailbox after receiving message*/
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF1R,CAN_RF1R_RFOM1);
	}
}
 8000508:	e07b      	b.n	8000602 <CAN_voidReceive+0x1d6>
	else if((CAN_CONTROL_AND_STATUS->CAN_RF1R & 0x03) != 0)
 800050a:	4b41      	ldr	r3, [pc, #260]	; (8000610 <CAN_voidReceive+0x1e4>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d075      	beq.n	8000602 <CAN_voidReceive+0x1d6>
		Copy_t_ReceivedMessage->FrameType = GET_BIT(CAN_MAILBOX->CAN_RI1R,CAN_RIxR_RTR);
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <CAN_voidReceive+0x1e8>)
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	085b      	lsrs	r3, r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	701a      	strb	r2, [r3, #0]
		Copy_t_ReceivedMessage->DataLength = (0x000F & (CAN_MAILBOX->CAN_RDT1R));
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <CAN_voidReceive+0x1e8>)
 800052a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	b2da      	uxtb	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	705a      	strb	r2, [r3, #1]
		if(Copy_t_ReceivedMessage->DataLength <= 4)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d81a      	bhi.n	8000576 <CAN_voidReceive+0x14a>
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000540:	2300      	movs	r3, #0
 8000542:	733b      	strb	r3, [r7, #12]
 8000544:	e011      	b.n	800056a <CAN_voidReceive+0x13e>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDL1R >> (counter*8)));
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <CAN_voidReceive+0x1e8>)
 8000548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054a:	7b3b      	ldrb	r3, [r7, #12]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	fa22 f303 	lsr.w	r3, r2, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	f002 020f 	and.w	r2, r2, #15
 800055a:	b2d1      	uxtb	r1, r2
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4413      	add	r3, r2
 8000560:	460a      	mov	r2, r1
 8000562:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000564:	7b3b      	ldrb	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	733b      	strb	r3, [r7, #12]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	7b3a      	ldrb	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d3e8      	bcc.n	8000546 <CAN_voidReceive+0x11a>
 8000574:	e036      	b.n	80005e4 <CAN_voidReceive+0x1b8>
		else if(Copy_t_ReceivedMessage->DataLength >= 5)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	785b      	ldrb	r3, [r3, #1]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d932      	bls.n	80005e4 <CAN_voidReceive+0x1b8>
			for(u8 counter=0; counter < 4; counter++)
 800057e:	2300      	movs	r3, #0
 8000580:	72fb      	strb	r3, [r7, #11]
 8000582:	e011      	b.n	80005a8 <CAN_voidReceive+0x17c>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDL1R >> (counter*8)));
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <CAN_voidReceive+0x1e8>)
 8000586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000588:	7afb      	ldrb	r3, [r7, #11]
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	fa22 f303 	lsr.w	r3, r2, r3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	f002 020f 	and.w	r2, r2, #15
 8000598:	b2d1      	uxtb	r1, r2
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	460a      	mov	r2, r1
 80005a0:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < 4; counter++)
 80005a2:	7afb      	ldrb	r3, [r7, #11]
 80005a4:	3301      	adds	r3, #1
 80005a6:	72fb      	strb	r3, [r7, #11]
 80005a8:	7afb      	ldrb	r3, [r7, #11]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d9ea      	bls.n	8000584 <CAN_voidReceive+0x158>
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80005ae:	2304      	movs	r3, #4
 80005b0:	72bb      	strb	r3, [r7, #10]
 80005b2:	e012      	b.n	80005da <CAN_voidReceive+0x1ae>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDH1R >> ((counter-4)*8)));
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <CAN_voidReceive+0x1e8>)
 80005b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b8:	7abb      	ldrb	r3, [r7, #10]
 80005ba:	3b04      	subs	r3, #4
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	fa22 f303 	lsr.w	r3, r2, r3
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	7abb      	ldrb	r3, [r7, #10]
 80005c6:	f002 020f 	and.w	r2, r2, #15
 80005ca:	b2d1      	uxtb	r1, r2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	460a      	mov	r2, r1
 80005d2:	70da      	strb	r2, [r3, #3]
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80005d4:	7abb      	ldrb	r3, [r7, #10]
 80005d6:	3301      	adds	r3, #1
 80005d8:	72bb      	strb	r3, [r7, #10]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	7aba      	ldrb	r2, [r7, #10]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3e7      	bcc.n	80005b4 <CAN_voidReceive+0x188>
		Copy_t_ReceivedMessage->FilterIndex = (u8) ( 0x000f & (CAN_MAILBOX->CAN_RDT1R >>CAN_RDTxR_FMI) );
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <CAN_voidReceive+0x1e8>)
 80005e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	709a      	strb	r2, [r3, #2]
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF1R,CAN_RF1R_RFOM1);
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <CAN_voidReceive+0x1e4>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <CAN_voidReceive+0x1e4>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6113      	str	r3, [r2, #16]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40006400 	.word	0x40006400
 8000614:	40006580 	.word	0x40006580

08000618 <CAN1_TX_IRQHandler>:
{
	CAN1_TX_CallBack = ptr;
}

void CAN1_TX_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	CAN1_TX_CallBack();
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <CAN1_TX_IRQHandler+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4798      	blx	r3
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001dc 	.word	0x200001dc

0800062c <CAN1_RX0_IRQHandler>:
{
	CAN1_RX0_CallBack = ptr;
}

void CAN1_RX0_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	CAN1_RX0_CallBack();
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <CAN1_RX0_IRQHandler+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4798      	blx	r3
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200001e0 	.word	0x200001e0

08000640 <CAN1_RX1_IRQHandler>:
{
	CAN1_RX1_CallBack = ptr;
}

void CAN1_RX1_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	CAN1_RX1_CallBack();
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <CAN1_RX1_IRQHandler+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001e4 	.word	0x200001e4

08000654 <CAN1_SCE_IRQHandler>:
{
	CAN1_SCE_CallBack = ptr;
}

void CAN1_SCE_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	CAN1_SCE_CallBack();
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <CAN1_SCE_IRQHandler+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001e8 	.word	0x200001e8

08000668 <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if(Global_pvEXTI0NotificationFunction != 0)
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <EXTI0_IRQHandler+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <EXTI0_IRQHandler+0x12>
	{
		Global_pvEXTI0NotificationFunction();
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <EXTI0_IRQHandler+0x18>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4798      	blx	r3
	else
	{
		/* Do Nothing*/
	}

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001ec 	.word	0x200001ec

08000684 <GPIO_voidSetPinDirection>:
#include "BIT_MATH.h"
#include "GPIO_interface.h"
#include "GPIO_private.h"

void GPIO_voidSetPinDirection(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_PinMode)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	717b      	strb	r3, [r7, #5]
	 * bits [5,6]: for pin mode (either I/P or O/P or AF)
	 * bit   [4] : for output type (either PP or OD)
	 * bits [2,3]: for pin output speed
	 * bits [0,1]: for pull up and pull down
	 */
	u8 Local_u8Mode= (Copy_PinMode >> 5);
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8OutputType= GET_BIT(Copy_PinMode,4);
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8Speed= (Copy_PinMode>>2) & 0b11;
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	737b      	strb	r3, [r7, #13]
	u8 Local_u8PUPD= (Copy_PinMode) & 0b11;
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	733b      	strb	r3, [r7, #12]

	switch(Copy_u8Port)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	f000 80be 	beq.w	8000840 <GPIO_voidSetPinDirection+0x1bc>
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f300 8116 	bgt.w	80008f6 <GPIO_voidSetPinDirection+0x272>
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d002      	beq.n	80006d4 <GPIO_voidSetPinDirection+0x50>
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d05b      	beq.n	800078a <GPIO_voidSetPinDirection+0x106>
		    	GPIOC_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));

		    	break;

		    default:
		    	break;
 80006d2:	e110      	b.n	80008f6 <GPIO_voidSetPinDirection+0x272>
				GPIOA_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 80006d4:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <GPIO_voidSetPinDirection+0x280>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	2103      	movs	r1, #3
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a87      	ldr	r2, [pc, #540]	; (8000904 <GPIO_voidSetPinDirection+0x280>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
				GPIOA_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 80006ec:	4b85      	ldr	r3, [pc, #532]	; (8000904 <GPIO_voidSetPinDirection+0x280>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7bf9      	ldrb	r1, [r7, #15]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a81      	ldr	r2, [pc, #516]	; (8000904 <GPIO_voidSetPinDirection+0x280>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
				CLR_BIT(GPIOA_OTYPER,Copy_u8Pin);
 8000702:	4b81      	ldr	r3, [pc, #516]	; (8000908 <GPIO_voidSetPinDirection+0x284>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	2101      	movs	r1, #1
 800070a:	fa01 f202 	lsl.w	r2, r1, r2
 800070e:	43d2      	mvns	r2, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a7d      	ldr	r2, [pc, #500]	; (8000908 <GPIO_voidSetPinDirection+0x284>)
 8000714:	400b      	ands	r3, r1
 8000716:	6013      	str	r3, [r2, #0]
				GPIOA_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000718:	4b7b      	ldr	r3, [pc, #492]	; (8000908 <GPIO_voidSetPinDirection+0x284>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	7bb9      	ldrb	r1, [r7, #14]
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a78      	ldr	r2, [pc, #480]	; (8000908 <GPIO_voidSetPinDirection+0x284>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
				GPIOA_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 800072c:	4b77      	ldr	r3, [pc, #476]	; (800090c <GPIO_voidSetPinDirection+0x288>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	2103      	movs	r1, #3
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	43d2      	mvns	r2, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a73      	ldr	r2, [pc, #460]	; (800090c <GPIO_voidSetPinDirection+0x288>)
 8000740:	400b      	ands	r3, r1
 8000742:	6013      	str	r3, [r2, #0]
				GPIOA_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000744:	4b71      	ldr	r3, [pc, #452]	; (800090c <GPIO_voidSetPinDirection+0x288>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7b79      	ldrb	r1, [r7, #13]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a6d      	ldr	r2, [pc, #436]	; (800090c <GPIO_voidSetPinDirection+0x288>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
				GPIOA_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 800075a:	4b6d      	ldr	r3, [pc, #436]	; (8000910 <GPIO_voidSetPinDirection+0x28c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	79ba      	ldrb	r2, [r7, #6]
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	2103      	movs	r1, #3
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	43d2      	mvns	r2, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a68      	ldr	r2, [pc, #416]	; (8000910 <GPIO_voidSetPinDirection+0x28c>)
 800076e:	400b      	ands	r3, r1
 8000770:	6013      	str	r3, [r2, #0]
				GPIOA_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000772:	4b67      	ldr	r3, [pc, #412]	; (8000910 <GPIO_voidSetPinDirection+0x28c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7b39      	ldrb	r1, [r7, #12]
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <GPIO_voidSetPinDirection+0x28c>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
				break;
 8000788:	e0b6      	b.n	80008f8 <GPIO_voidSetPinDirection+0x274>
                GPIOB_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <GPIO_voidSetPinDirection+0x290>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	0052      	lsls	r2, r2, #1
 8000792:	2103      	movs	r1, #3
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	43d2      	mvns	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a5d      	ldr	r2, [pc, #372]	; (8000914 <GPIO_voidSetPinDirection+0x290>)
 800079e:	400b      	ands	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
		    	GPIOB_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <GPIO_voidSetPinDirection+0x290>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	7bf9      	ldrb	r1, [r7, #15]
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a58      	ldr	r2, [pc, #352]	; (8000914 <GPIO_voidSetPinDirection+0x290>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6013      	str	r3, [r2, #0]
		    	CLR_BIT(GPIOB_OTYPER,Copy_u8Pin);
 80007b8:	4b57      	ldr	r3, [pc, #348]	; (8000918 <GPIO_voidSetPinDirection+0x294>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	79ba      	ldrb	r2, [r7, #6]
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a53      	ldr	r2, [pc, #332]	; (8000918 <GPIO_voidSetPinDirection+0x294>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
		    	GPIOB_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 80007ce:	4b52      	ldr	r3, [pc, #328]	; (8000918 <GPIO_voidSetPinDirection+0x294>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	7bb9      	ldrb	r1, [r7, #14]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a4e      	ldr	r2, [pc, #312]	; (8000918 <GPIO_voidSetPinDirection+0x294>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
		    	GPIOB_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 80007e2:	4b4e      	ldr	r3, [pc, #312]	; (800091c <GPIO_voidSetPinDirection+0x298>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	79ba      	ldrb	r2, [r7, #6]
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	2103      	movs	r1, #3
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a49      	ldr	r2, [pc, #292]	; (800091c <GPIO_voidSetPinDirection+0x298>)
 80007f6:	400b      	ands	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
		    	GPIOB_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 80007fa:	4b48      	ldr	r3, [pc, #288]	; (800091c <GPIO_voidSetPinDirection+0x298>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	7b79      	ldrb	r1, [r7, #13]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a44      	ldr	r2, [pc, #272]	; (800091c <GPIO_voidSetPinDirection+0x298>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6013      	str	r3, [r2, #0]
		    	GPIOB_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <GPIO_voidSetPinDirection+0x29c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	43d2      	mvns	r2, r2
 8000820:	4611      	mov	r1, r2
 8000822:	4a3f      	ldr	r2, [pc, #252]	; (8000920 <GPIO_voidSetPinDirection+0x29c>)
 8000824:	400b      	ands	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
		    	GPIOB_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000828:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <GPIO_voidSetPinDirection+0x29c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7b39      	ldrb	r1, [r7, #12]
 800082e:	79ba      	ldrb	r2, [r7, #6]
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	fa01 f202 	lsl.w	r2, r1, r2
 8000836:	4611      	mov	r1, r2
 8000838:	4a39      	ldr	r2, [pc, #228]	; (8000920 <GPIO_voidSetPinDirection+0x29c>)
 800083a:	430b      	orrs	r3, r1
 800083c:	6013      	str	r3, [r2, #0]
		    	break;
 800083e:	e05b      	b.n	80008f8 <GPIO_voidSetPinDirection+0x274>
		    	GPIOC_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <GPIO_voidSetPinDirection+0x2a0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	79ba      	ldrb	r2, [r7, #6]
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	2103      	movs	r1, #3
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a34      	ldr	r2, [pc, #208]	; (8000924 <GPIO_voidSetPinDirection+0x2a0>)
 8000854:	400b      	ands	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
		    	GPIOC_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000858:	4b32      	ldr	r3, [pc, #200]	; (8000924 <GPIO_voidSetPinDirection+0x2a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7bf9      	ldrb	r1, [r7, #15]
 800085e:	79ba      	ldrb	r2, [r7, #6]
 8000860:	0052      	lsls	r2, r2, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <GPIO_voidSetPinDirection+0x2a0>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6013      	str	r3, [r2, #0]
		    	CLR_BIT(GPIOC_OTYPER,Copy_u8Pin);
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <GPIO_voidSetPinDirection+0x2a4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	79ba      	ldrb	r2, [r7, #6]
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	43d2      	mvns	r2, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a2a      	ldr	r2, [pc, #168]	; (8000928 <GPIO_voidSetPinDirection+0x2a4>)
 8000880:	400b      	ands	r3, r1
 8000882:	6013      	str	r3, [r2, #0]
		    	GPIOC_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <GPIO_voidSetPinDirection+0x2a4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	7bb9      	ldrb	r1, [r7, #14]
 800088a:	79ba      	ldrb	r2, [r7, #6]
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	4611      	mov	r1, r2
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <GPIO_voidSetPinDirection+0x2a4>)
 8000894:	430b      	orrs	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
		    	GPIOC_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <GPIO_voidSetPinDirection+0x2a8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	2103      	movs	r1, #3
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	43d2      	mvns	r2, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a20      	ldr	r2, [pc, #128]	; (800092c <GPIO_voidSetPinDirection+0x2a8>)
 80008ac:	400b      	ands	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
		    	GPIOC_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <GPIO_voidSetPinDirection+0x2a8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7b79      	ldrb	r1, [r7, #13]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	0052      	lsls	r2, r2, #1
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <GPIO_voidSetPinDirection+0x2a8>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
		    	GPIOC_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <GPIO_voidSetPinDirection+0x2ac>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	0052      	lsls	r2, r2, #1
 80008ce:	2103      	movs	r1, #3
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <GPIO_voidSetPinDirection+0x2ac>)
 80008da:	400b      	ands	r3, r1
 80008dc:	6013      	str	r3, [r2, #0]
		    	GPIOC_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <GPIO_voidSetPinDirection+0x2ac>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7b39      	ldrb	r1, [r7, #12]
 80008e4:	79ba      	ldrb	r2, [r7, #6]
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <GPIO_voidSetPinDirection+0x2ac>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
		    	break;
 80008f4:	e000      	b.n	80008f8 <GPIO_voidSetPinDirection+0x274>
		    	break;
 80008f6:	bf00      	nop
		}
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40020000 	.word	0x40020000
 8000908:	40020004 	.word	0x40020004
 800090c:	40020008 	.word	0x40020008
 8000910:	4002000c 	.word	0x4002000c
 8000914:	40020400 	.word	0x40020400
 8000918:	40020404 	.word	0x40020404
 800091c:	40020408 	.word	0x40020408
 8000920:	4002040c 	.word	0x4002040c
 8000924:	40020800 	.word	0x40020800
 8000928:	40020804 	.word	0x40020804
 800092c:	40020808 	.word	0x40020808
 8000930:	4002080c 	.word	0x4002080c

08000934 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8PinValue)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	460b      	mov	r3, r1
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	4613      	mov	r3, r2
 8000944:	717b      	strb	r3, [r7, #5]
	/* In GPIOx_BSRR register:
	 *  bits (0 to 15) are for atomic set
	 *  bits (16 to 31) are for atomic reset */
	if(Copy_u8PinValue == GPIO_LOW)
 8000946:	797b      	ldrb	r3, [r7, #5]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <GPIO_voidSetPinValue+0x1e>
		{
			Copy_u8Pin += 16;
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	3310      	adds	r3, #16
 8000950:	71bb      	strb	r3, [r7, #6]
		}

	switch(Copy_u8Port)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b04      	cmp	r3, #4
 8000956:	d01c      	beq.n	8000992 <GPIO_voidSetPinValue+0x5e>
 8000958:	2b04      	cmp	r3, #4
 800095a:	dc25      	bgt.n	80009a8 <GPIO_voidSetPinValue+0x74>
 800095c:	2b02      	cmp	r3, #2
 800095e:	d002      	beq.n	8000966 <GPIO_voidSetPinValue+0x32>
 8000960:	2b03      	cmp	r3, #3
 8000962:	d00b      	beq.n	800097c <GPIO_voidSetPinValue+0x48>
		    case GPIOC:
		    	SET_BIT(GPIOC_BSRR,Copy_u8Pin);
		    	break;

		    default:
		   		break;
 8000964:	e020      	b.n	80009a8 <GPIO_voidSetPinValue+0x74>
				SET_BIT(GPIOA_BSRR,Copy_u8Pin);
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <GPIO_voidSetPinValue+0x84>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	79ba      	ldrb	r2, [r7, #6]
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <GPIO_voidSetPinValue+0x84>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
				break;
 800097a:	e016      	b.n	80009aa <GPIO_voidSetPinValue+0x76>
		    	SET_BIT(GPIOB_BSRR,Copy_u8Pin);
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <GPIO_voidSetPinValue+0x88>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	79ba      	ldrb	r2, [r7, #6]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <GPIO_voidSetPinValue+0x88>)
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
		    	break;
 8000990:	e00b      	b.n	80009aa <GPIO_voidSetPinValue+0x76>
		    	SET_BIT(GPIOC_BSRR,Copy_u8Pin);
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <GPIO_voidSetPinValue+0x8c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	79ba      	ldrb	r2, [r7, #6]
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <GPIO_voidSetPinValue+0x8c>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
		    	break;
 80009a6:	e000      	b.n	80009aa <GPIO_voidSetPinValue+0x76>
		   		break;
 80009a8:	bf00      	nop
		}
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40020018 	.word	0x40020018
 80009bc:	40020418 	.word	0x40020418
 80009c0:	40020818 	.word	0x40020818

080009c4 <GPIO_voidSetAlternatingFunction>:
		}
}


void GPIO_voidSetAlternatingFunction(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8Peripheral)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	460b      	mov	r3, r1
 80009d0:	71bb      	strb	r3, [r7, #6]
 80009d2:	4613      	mov	r3, r2
 80009d4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d044      	beq.n	8000a66 <GPIO_voidSetAlternatingFunction+0xa2>
 80009dc:	2b04      	cmp	r3, #4
 80009de:	dc61      	bgt.n	8000aa4 <GPIO_voidSetAlternatingFunction+0xe0>
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d002      	beq.n	80009ea <GPIO_voidSetAlternatingFunction+0x26>
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d01f      	beq.n	8000a28 <GPIO_voidSetAlternatingFunction+0x64>
			{
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
		default:
			break;
 80009e8:	e05c      	b.n	8000aa4 <GPIO_voidSetAlternatingFunction+0xe0>
			if(Copy_u8Pin <= 7)
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d80b      	bhi.n	8000a08 <GPIO_voidSetAlternatingFunction+0x44>
				GPIOA_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 80009f0:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <GPIO_voidSetAlternatingFunction+0xfc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	7979      	ldrb	r1, [r7, #5]
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <GPIO_voidSetAlternatingFunction+0xfc>)
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
			break;
 8000a06:	e04f      	b.n	8000aa8 <GPIO_voidSetAlternatingFunction+0xe4>
			else if (Copy_u8Pin >= 8)
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d94c      	bls.n	8000aa8 <GPIO_voidSetAlternatingFunction+0xe4>
				GPIOA_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <GPIO_voidSetAlternatingFunction+0x100>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7979      	ldrb	r1, [r7, #5]
 8000a14:	79ba      	ldrb	r2, [r7, #6]
 8000a16:	3a08      	subs	r2, #8
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <GPIO_voidSetAlternatingFunction+0x100>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	6013      	str	r3, [r2, #0]
			break;
 8000a26:	e03f      	b.n	8000aa8 <GPIO_voidSetAlternatingFunction+0xe4>
			if(Copy_u8Pin <= 7)
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d80b      	bhi.n	8000a46 <GPIO_voidSetAlternatingFunction+0x82>
				GPIOB_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <GPIO_voidSetAlternatingFunction+0x104>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	7979      	ldrb	r1, [r7, #5]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <GPIO_voidSetAlternatingFunction+0x104>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6013      	str	r3, [r2, #0]
			break;
 8000a44:	e032      	b.n	8000aac <GPIO_voidSetAlternatingFunction+0xe8>
			else if (Copy_u8Pin >= 8)
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b07      	cmp	r3, #7
 8000a4a:	d92f      	bls.n	8000aac <GPIO_voidSetAlternatingFunction+0xe8>
				GPIOB_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <GPIO_voidSetAlternatingFunction+0x108>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	7979      	ldrb	r1, [r7, #5]
 8000a52:	79ba      	ldrb	r2, [r7, #6]
 8000a54:	3a08      	subs	r2, #8
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <GPIO_voidSetAlternatingFunction+0x108>)
 8000a60:	430b      	orrs	r3, r1
 8000a62:	6013      	str	r3, [r2, #0]
			break;
 8000a64:	e022      	b.n	8000aac <GPIO_voidSetAlternatingFunction+0xe8>
			if(Copy_u8Pin <= 7)
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d80b      	bhi.n	8000a84 <GPIO_voidSetAlternatingFunction+0xc0>
				GPIOC_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <GPIO_voidSetAlternatingFunction+0x10c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7979      	ldrb	r1, [r7, #5]
 8000a72:	79ba      	ldrb	r2, [r7, #6]
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <GPIO_voidSetAlternatingFunction+0x10c>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
			break;
 8000a82:	e015      	b.n	8000ab0 <GPIO_voidSetAlternatingFunction+0xec>
			else if (Copy_u8Pin >= 8)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b07      	cmp	r3, #7
 8000a88:	d912      	bls.n	8000ab0 <GPIO_voidSetAlternatingFunction+0xec>
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <GPIO_voidSetAlternatingFunction+0x110>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	7979      	ldrb	r1, [r7, #5]
 8000a90:	79ba      	ldrb	r2, [r7, #6]
 8000a92:	3a08      	subs	r2, #8
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <GPIO_voidSetAlternatingFunction+0x110>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]
			break;
 8000aa2:	e005      	b.n	8000ab0 <GPIO_voidSetAlternatingFunction+0xec>
			break;
 8000aa4:	bf00      	nop
 8000aa6:	e004      	b.n	8000ab2 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000aa8:	bf00      	nop
 8000aaa:	e002      	b.n	8000ab2 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000ab0:	bf00      	nop
	}

}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40020020 	.word	0x40020020
 8000ac4:	40020024 	.word	0x40020024
 8000ac8:	40020420 	.word	0x40020420
 8000acc:	40020424 	.word	0x40020424
 8000ad0:	40020820 	.word	0x40020820
 8000ad4:	40020824 	.word	0x40020824

08000ad8 <NVIC_Init>:
* \Parameters (out): none
* \Return Value:    none
*
******************************************************************************/
void NVIC_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

/*TODO Configure Grouping/SubGroubing System In APINT register in SCB*/
AIRCR= ( AIRCR_VECTKEY << 16U ) |(NVIC_GROUPING_SYSTEM<<8U);
 8000adc:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <NVIC_Init+0x10c>)
 8000ade:	4a42      	ldr	r2, [pc, #264]	; (8000be8 <NVIC_Init+0x110>)
 8000ae0:	601a      	str	r2, [r3, #0]

for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <NVIC_Init+0x114>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e072      	b.n	8000bd0 <NVIC_Init+0xf8>
	{
		intNum			= NVIC_Cfg[i].Interupt_Number;
 8000aea:	4b40      	ldr	r3, [pc, #256]	; (8000bec <NVIC_Init+0x114>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4940      	ldr	r1, [pc, #256]	; (8000bf0 <NVIC_Init+0x118>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <NVIC_Init+0x11c>)
 8000afe:	601a      	str	r2, [r3, #0]
		locGroup		= NVIC_Cfg[i].Group_Priority;
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <NVIC_Init+0x114>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	493a      	ldr	r1, [pc, #232]	; (8000bf0 <NVIC_Init+0x118>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3301      	adds	r3, #1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <NVIC_Init+0x120>)
 8000b16:	601a      	str	r2, [r3, #0]
		locSubGroup     = NVIC_Cfg[i].SubGroup_Priority;
 8000b18:	4b34      	ldr	r3, [pc, #208]	; (8000bec <NVIC_Init+0x114>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4934      	ldr	r1, [pc, #208]	; (8000bf0 <NVIC_Init+0x118>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	3302      	adds	r3, #2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <NVIC_Init+0x124>)
 8000b2e:	601a      	str	r2, [r3, #0]

		/* enable\disable based on user configuration */
		enRegOffset = (intNum/WORD_LENGTH_BITS)*WORD_LENGTH_BYTES;
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <NVIC_Init+0x11c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	095b      	lsrs	r3, r3, #5
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <NVIC_Init+0x128>)
 8000b3a:	6013      	str	r3, [r2, #0]
		enBitOffset = intNum%WORD_LENGTH_BITS;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <NVIC_Init+0x11c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <NVIC_Init+0x12c>)
 8000b46:	6013      	str	r3, [r2, #0]

		GET_HWREG(NVIC_BASE_ADDRESS,enRegOffset) |= (1 << enBitOffset);
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <NVIC_Init+0x128>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b50:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <NVIC_Init+0x12c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <NVIC_Init+0x128>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b6a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000b6e:	4619      	mov	r1, r3
 8000b70:	ea42 0300 	orr.w	r3, r2, r0
 8000b74:	600b      	str	r3, [r1, #0]


#if NVIC_GROUPING_SYSTEM == NVIC_GROUPING_SYSTEM_XXX
			locGroupingField = locGroup;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <NVIC_Init+0x120>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <NVIC_Init+0x130>)
 8000b7c:	6013      	str	r3, [r2, #0]
     #error INVALID GROUPING SELECTION
#endif

			/* assign group\subgroup priority */

			priRegOffset = (intNum/4U)*WORD_LENGTH_BYTES;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <NVIC_Init+0x11c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 0303 	bic.w	r3, r3, #3
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <NVIC_Init+0x134>)
 8000b88:	6013      	str	r3, [r2, #0]
			priBitOffset = 5 + (8 * (intNum%4U));
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <NVIC_Init+0x11c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	3305      	adds	r3, #5
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <NVIC_Init+0x138>)
 8000b98:	6013      	str	r3, [r2, #0]
			GET_HWREG(NVIC_PRIORTY_BASE,priRegOffset) |= (locGroupingField << priBitOffset);
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <NVIC_Init+0x134>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ba2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <NVIC_Init+0x130>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <NVIC_Init+0x138>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <NVIC_Init+0x134>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000bba:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	ea41 0302 	orr.w	r3, r1, r2
 8000bc4:	6003      	str	r3, [r0, #0]
for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <NVIC_Init+0x114>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <NVIC_Init+0x114>)
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <NVIC_Init+0x114>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d988      	bls.n	8000aea <NVIC_Init+0x12>


	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed0c 	.word	0xe000ed0c
 8000be8:	fa050400 	.word	0xfa050400
 8000bec:	200001f8 	.word	0x200001f8
 8000bf0:	08000f8c 	.word	0x08000f8c
 8000bf4:	200001f0 	.word	0x200001f0
 8000bf8:	200001f4 	.word	0x200001f4
 8000bfc:	200001fc 	.word	0x200001fc
 8000c00:	20000200 	.word	0x20000200
 8000c04:	20000204 	.word	0x20000204
 8000c08:	20000208 	.word	0x20000208
 8000c0c:	2000020c 	.word	0x2000020c
 8000c10:	20000210 	.word	0x20000210

08000c14 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_Config.h"

/*								System Clocks								*/

void RCC_voidInitSystemClock(void){
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
			RCC_CFGR |= 0x00000001;			/*Set Bits*/
			
			
	#elif RCC_SYSTEM_CLOCK == RCC_HSI_RC
		/* Enable HSI Clock*/
			RCC_CR |= 0x00000001;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <RCC_voidInitSystemClock+0x38>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <RCC_voidInitSystemClock+0x38>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6013      	str	r3, [r2, #0]
		/* Check if HSI is ready*/
			while(!GET_BIT(RCC_CR,RCC_HSI_READY_BIT));
 8000c24:	bf00      	nop
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <RCC_voidInitSystemClock+0x38>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f8      	beq.n	8000c26 <RCC_voidInitSystemClock+0x12>
		/*Set HSI as System Clock*/
			RCC_CFGR &= ~(0x00000003);	/*Clear Bits, Set HSI Mode*/
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <RCC_voidInitSystemClock+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <RCC_voidInitSystemClock+0x3c>)
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	6013      	str	r3, [r2, #0]
	#else
			#error("Wrong Clock Selected")
	
	#endif

}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40023808 	.word	0x40023808

08000c54 <RCC_voidEnableCompClk>:

/*							Peripherals Clocks								*/
void RCC_voidEnableCompClk(u8 Copy_uint8Bus, u8 Copy_uint8PerID){
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	if(Copy_uint8PerID <= 31){
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b1f      	cmp	r3, #31
 8000c68:	d847      	bhi.n	8000cfa <RCC_voidEnableCompClk+0xa6>
		switch(Copy_uint8Bus){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d843      	bhi.n	8000cfa <RCC_voidEnableCompClk+0xa6>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <RCC_voidEnableCompClk+0x24>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000c8d 	.word	0x08000c8d
 8000c7c:	08000ca3 	.word	0x08000ca3
 8000c80:	08000cb9 	.word	0x08000cb9
 8000c84:	08000ccf 	.word	0x08000ccf
 8000c88:	08000ce5 	.word	0x08000ce5
			case RCC_AHB1:	SET_BIT(RCC_AHB1ENR,Copy_uint8PerID);	break;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <RCC_voidEnableCompClk+0xb4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <RCC_voidEnableCompClk+0xb4>)
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e02b      	b.n	8000cfa <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB2:	SET_BIT(RCC_AHB2ENR,Copy_uint8PerID);	break;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <RCC_voidEnableCompClk+0xb8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	79ba      	ldrb	r2, [r7, #6]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <RCC_voidEnableCompClk+0xb8>)
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e020      	b.n	8000cfa <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB3:	SET_BIT(RCC_AHB3ENR,Copy_uint8PerID);	break;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <RCC_voidEnableCompClk+0xbc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	79ba      	ldrb	r2, [r7, #6]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <RCC_voidEnableCompClk+0xbc>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e015      	b.n	8000cfa <RCC_voidEnableCompClk+0xa6>
			case RCC_APB1:	SET_BIT(RCC_APB1ENR,Copy_uint8PerID);	break;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <RCC_voidEnableCompClk+0xc0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	79ba      	ldrb	r2, [r7, #6]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <RCC_voidEnableCompClk+0xc0>)
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e00a      	b.n	8000cfa <RCC_voidEnableCompClk+0xa6>
			case RCC_APB2:	SET_BIT(RCC_APB2ENR,Copy_uint8PerID);	break;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <RCC_voidEnableCompClk+0xc4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <RCC_voidEnableCompClk+0xc4>)
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	bf00      	nop
		}
	}
	else{
		/*Return Error*/
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023830 	.word	0x40023830
 8000d0c:	40023834 	.word	0x40023834
 8000d10:	40023838 	.word	0x40023838
 8000d14:	40023840 	.word	0x40023840
 8000d18:	40023844 	.word	0x40023844

08000d1c <mSTK_StopTimer>:
{
	SET_BIT((STK->CTRL),ENABLEB);

}
void mSTK_StopTimer()
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	STK->VAL=0;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <mSTK_StopTimer+0x28>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	STK->LOAD=0;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <mSTK_StopTimer+0x28>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
	CLR_BIT((STK->CTRL),ENABLEB);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <mSTK_StopTimer+0x28>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <mSTK_StopTimer+0x28>)
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <SysTick_Handler>:
{
	return ((STK->LOAD)-(STK->VAL));
}

void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	Global_STK_Callback();
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <SysTick_Handler+0x24>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4798      	blx	r3
	if(single_flag==1)
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <SysTick_Handler+0x28>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d104      	bne.n	8000d66 <SysTick_Handler+0x1e>
	{
		single_flag=0;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Handler+0x28>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		mSTK_StopTimer();
 8000d62:	f7ff ffdb 	bl	8000d1c <mSTK_StopTimer>
	}

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000214 	.word	0x20000214
 8000d70:	20000218 	.word	0x20000218

08000d74 <TIM3_IRQHandler>:
{
	Timer3_CallBack = ptr;
}

void TIM3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	Timer3_CallBack();
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <TIM3_IRQHandler+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4798      	blx	r3
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000021c 	.word	0x2000021c

08000d88 <USART1_IRQHandler>:
{
	USART1_CallBack = ptr;
}

void USART1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	USART1_CallBack();
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <USART1_IRQHandler+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4798      	blx	r3
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000220 	.word	0x20000220

08000d9c <USART3_IRQHandler>:
{
	USART3_CallBack = ptr;
}

void USART3_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	USART3_CallBack();
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <USART3_IRQHandler+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4798      	blx	r3
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000224 	.word	0x20000224

08000db0 <UART4_IRQHandler>:
{
	UART4_CallBack = ptr;
}

void UART4_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	UART4_CallBack();
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <UART4_IRQHandler+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4798      	blx	r3
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000228 	.word	0x20000228

08000dc4 <UART5_IRQHandler>:
{
	UART5_CallBack = ptr;
}

void UART5_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	UART5_CallBack();
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <UART5_IRQHandler+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4798      	blx	r3
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000022c 	.word	0x2000022c

08000dd8 <USART6_IRQHandler>:
{
	USART6_CallBack = ptr;
}

void USART6_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	USART6_CallBack();
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <USART6_IRQHandler+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4798      	blx	r3
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000230 	.word	0x20000230

08000dec <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream5_CallBack= ptr;
}
void DMA2_Stream5_IRQHandler()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	DMA2_Stream5_CallBack();
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <DMA2_Stream5_IRQHandler+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4798      	blx	r3

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000234 	.word	0x20000234

08000e00 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream7_CallBack= ptr;
}
void DMA2_Stream7_IRQHandler()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	DMA2_Stream7_CallBack();
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <DMA2_Stream7_IRQHandler+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4798      	blx	r3
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000238 	.word	0x20000238

08000e14 <main>:
		asm("NOP");
	}
}

int main()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	/*Initialize struct*/
	CAN_Init_t Initialize_struct;
	Initialize_struct.No_Of_Can1Filters = 2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	713b      	strb	r3, [r7, #4]
	Initialize_struct.Filter_Scale= Single_32_bit_scale;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	717b      	strb	r3, [r7, #5]
	Initialize_struct.No_Of_Filters_For_FIFO_ZERO =2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	71fb      	strb	r3, [r7, #7]
	Initialize_struct.No_Of_Filters_In_List_Mode =0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71bb      	strb	r3, [r7, #6]

	RCC_voidInitSystemClock();
 8000e2a:	f7ff fef3 	bl	8000c14 <RCC_voidInitSystemClock>
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_CAN1);
 8000e2e:	2119      	movs	r1, #25
 8000e30:	2004      	movs	r0, #4
 8000e32:	f7ff ff0f 	bl	8000c54 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOA);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff ff0b 	bl	8000c54 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOB);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff ff07 	bl	8000c54 <RCC_voidEnableCompClk>
	NVIC_Init();
 8000e46:	f7ff fe47 	bl	8000ad8 <NVIC_Init>

	/*LED test pin*/
	GPIO_voidSetPinDirection(GPIOA,0,OUTPUT_PUSH_PULL_NO_PUPD_FAST_SPEED);
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff fc18 	bl	8000684 <GPIO_voidSetPinDirection>


	/*Enable CAN1 Rx pin*/
	GPIO_voidSetPinDirection(GPIOA,11,ALTERNATING_FUNCTION_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 8000e54:	2244      	movs	r2, #68	; 0x44
 8000e56:	210b      	movs	r1, #11
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fc13 	bl	8000684 <GPIO_voidSetPinDirection>
	/*Enable CAN1 Tx pin*/
	GPIO_voidSetPinDirection(GPIOA,12,ALTERNATING_FUNCTION_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 8000e5e:	2244      	movs	r2, #68	; 0x44
 8000e60:	210c      	movs	r1, #12
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff fc0e 	bl	8000684 <GPIO_voidSetPinDirection>
	/*Set alternating function*/
	GPIO_voidSetAlternatingFunction(GPIOA,11,AF9);
 8000e68:	2209      	movs	r2, #9
 8000e6a:	210b      	movs	r1, #11
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fda9 	bl	80009c4 <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOA,12,AF9);
 8000e72:	2209      	movs	r2, #9
 8000e74:	210c      	movs	r1, #12
 8000e76:	2002      	movs	r0, #2
 8000e78:	f7ff fda4 	bl	80009c4 <GPIO_voidSetAlternatingFunction>

	/*Initialize CAN1*/
	CAN_voidInitialize(&Initialize_struct);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9c0 	bl	8000204 <CAN_voidInitialize>



	while(1)
	{
		CAN_voidReceive(&received_data);
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <main+0x94>)
 8000e86:	f7ff fad1 	bl	800042c <CAN_voidReceive>
		if( (u8)(received_data.Message[0]) ==  (u8) 'a' )
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <main+0x94>)
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	2b61      	cmp	r3, #97	; 0x61
 8000e90:	d1f8      	bne.n	8000e84 <main+0x70>
			{
			    if( (received_data.Message[1]) == (u8) 'b' )
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <main+0x94>)
 8000e94:	791b      	ldrb	r3, [r3, #4]
 8000e96:	2b62      	cmp	r3, #98	; 0x62
 8000e98:	d1f4      	bne.n	8000e84 <main+0x70>
					{
			        	GPIO_voidSetPinValue(GPIOA,0,GPIO_HIGH);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff fd48 	bl	8000934 <GPIO_voidSetPinValue>
		CAN_voidReceive(&received_data);
 8000ea4:	e7ee      	b.n	8000e84 <main+0x70>
 8000ea6:	bf00      	nop
 8000ea8:	2000023c 	.word	0x2000023c

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd3 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f000 f811 	bl	8000f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff ff83 	bl	8000e14 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8000f1c:	08000fa0 	.word	0x08000fa0
  ldr r2, =_sbss
 8000f20:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8000f24:	20000248 	.word	0x20000248

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4d0d      	ldr	r5, [pc, #52]	; (8000f64 <__libc_init_array+0x38>)
 8000f30:	4c0d      	ldr	r4, [pc, #52]	; (8000f68 <__libc_init_array+0x3c>)
 8000f32:	1b64      	subs	r4, r4, r5
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	2600      	movs	r6, #0
 8000f38:	42a6      	cmp	r6, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	4d0b      	ldr	r5, [pc, #44]	; (8000f6c <__libc_init_array+0x40>)
 8000f3e:	4c0c      	ldr	r4, [pc, #48]	; (8000f70 <__libc_init_array+0x44>)
 8000f40:	f000 f818 	bl	8000f74 <_init>
 8000f44:	1b64      	subs	r4, r4, r5
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	2600      	movs	r6, #0
 8000f4a:	42a6      	cmp	r6, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f54:	4798      	blx	r3
 8000f56:	3601      	adds	r6, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f5e:	4798      	blx	r3
 8000f60:	3601      	adds	r6, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08000f98 	.word	0x08000f98
 8000f68:	08000f98 	.word	0x08000f98
 8000f6c:	08000f98 	.word	0x08000f98
 8000f70:	08000f9c 	.word	0x08000f9c

08000f74 <_init>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr

08000f80 <_fini>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr

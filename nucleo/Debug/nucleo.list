
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d8  080013d8  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  080013d8  080013d8  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013d8  080013d8  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  080013e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001c0  080015a0  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080015a0  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035f1  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c6e  00000000  00000000  000237e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00024450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f0  00000000  00000000  00024800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000172c  00000000  00000000  00024af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000229e  00000000  00000000  0002621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6d35  00000000  00000000  000284ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef1ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  000ef240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001c0 	.word	0x200001c0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013bc 	.word	0x080013bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001c4 	.word	0x200001c4
 8000200:	080013bc 	.word	0x080013bc

08000204 <CAN_voidInitialize>:
#include "CAN_private.h"
#include "CAN_config.h"


void CAN_voidInitialize(CAN_Init_t * Copy_t_Init)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/*Reset the registers*/
	CAN_CONTROL_AND_STATUS->CAN_MCR =0x02;
 800020c:	4b82      	ldr	r3, [pc, #520]	; (8000418 <CAN_voidInitialize+0x214>)
 800020e:	2202      	movs	r2, #2
 8000210:	601a      	str	r2, [r3, #0]

	/*Stop the freeze while debug*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_DBF);
 8000212:	4b81      	ldr	r3, [pc, #516]	; (8000418 <CAN_voidInitialize+0x214>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a80      	ldr	r2, [pc, #512]	; (8000418 <CAN_voidInitialize+0x214>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	/*The default used values are:
	 * fifo priority driven by identifier of the message*/

	/*Automatic bus-off management:The Bus-Off state is left automatically by hardware once
	 * 128 occurrences of 11 recessive bits have been monitored.*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_ABOM);
 800021e:	4b7e      	ldr	r3, [pc, #504]	; (8000418 <CAN_voidInitialize+0x214>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a7d      	ldr	r2, [pc, #500]	; (8000418 <CAN_voidInitialize+0x214>)
 8000224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000228:	6013      	str	r3, [r2, #0]

	/*Automatic wakeup mode: The Sleep mode is left automatically by hardware on CAN message detection*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_AWUM);
 800022a:	4b7b      	ldr	r3, [pc, #492]	; (8000418 <CAN_voidInitialize+0x214>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a7a      	ldr	r2, [pc, #488]	; (8000418 <CAN_voidInitialize+0x214>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6013      	str	r3, [r2, #0]

	/*Request to enter Initialization mode*/
	SET_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_INRQ);
 8000236:	4b78      	ldr	r3, [pc, #480]	; (8000418 <CAN_voidInitialize+0x214>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a77      	ldr	r2, [pc, #476]	; (8000418 <CAN_voidInitialize+0x214>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

	/*Exit sleep mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_SLEEP);
 8000242:	4b75      	ldr	r3, [pc, #468]	; (8000418 <CAN_voidInitialize+0x214>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a74      	ldr	r2, [pc, #464]	; (8000418 <CAN_voidInitialize+0x214>)
 8000248:	f023 0302 	bic.w	r3, r3, #2
 800024c:	6013      	str	r3, [r2, #0]

	while( (!GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_INAK)) || (GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_SLAK)) )
 800024e:	bf00      	nop
 8000250:	4b71      	ldr	r3, [pc, #452]	; (8000418 <CAN_voidInitialize+0x214>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f9      	beq.n	8000250 <CAN_voidInitialize+0x4c>
 800025c:	4b6e      	ldr	r3, [pc, #440]	; (8000418 <CAN_voidInitialize+0x214>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	085b      	lsrs	r3, r3, #1
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f2      	bne.n	8000250 <CAN_voidInitialize+0x4c>
	{
		/*Do nothing until initialization mode is entered*/
	}

	/*For 1Mbps , and bus frequency of 16 MHz , total number of 8 quantas and SJW =1*/
	CAN_CONTROL_AND_STATUS->CAN_BTR = 0x00050001;
 800026a:	4b6b      	ldr	r3, [pc, #428]	; (8000418 <CAN_voidInitialize+0x214>)
 800026c:	4a6b      	ldr	r2, [pc, #428]	; (800041c <CAN_voidInitialize+0x218>)
 800026e:	61da      	str	r2, [r3, #28]
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_BTR,CAN_BTR_LBKM);
	}
	/*Enable lock back combined with silent mode if configured */
	if(LOCK_BACK_COMBINED_WITH_SILENT_MODE == ENABLE)
	{
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_BTR,CAN_BTR_LBKM);
 8000270:	4b69      	ldr	r3, [pc, #420]	; (8000418 <CAN_voidInitialize+0x214>)
 8000272:	69db      	ldr	r3, [r3, #28]
 8000274:	4a68      	ldr	r2, [pc, #416]	; (8000418 <CAN_voidInitialize+0x214>)
 8000276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800027a:	61d3      	str	r3, [r2, #28]
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_BTR,CAN_BTR_SILM);
 800027c:	4b66      	ldr	r3, [pc, #408]	; (8000418 <CAN_voidInitialize+0x214>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4a65      	ldr	r2, [pc, #404]	; (8000418 <CAN_voidInitialize+0x214>)
 8000282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000286:	61d3      	str	r3, [r2, #28]
	}


	/*------------------------------------Filters Initialization------------------------------------*/
	/*Enter filters initialization mode*/
	SET_BIT(CAN_FMR,CAN_FMR_FINIT);
 8000288:	4b65      	ldr	r3, [pc, #404]	; (8000420 <CAN_voidInitialize+0x21c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a64      	ldr	r2, [pc, #400]	; (8000420 <CAN_voidInitialize+0x21c>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]

	/*Reset mode register*/
	CAN_FM1R=0x0000;
 8000294:	4b63      	ldr	r3, [pc, #396]	; (8000424 <CAN_voidInitialize+0x220>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]

	/*Assign all filters to one CAN*/
	CAN_FMR &= ~(0b111111<< (CAN_FMR_CANSB));
 800029a:	4b61      	ldr	r3, [pc, #388]	; (8000420 <CAN_voidInitialize+0x21c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a60      	ldr	r2, [pc, #384]	; (8000420 <CAN_voidInitialize+0x21c>)
 80002a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80002a4:	6013      	str	r3, [r2, #0]


	/*Choose scale mode*/
	if(Copy_t_Init->Filter_Scale == Dual_16_bit_scale)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d103      	bne.n	80002b6 <CAN_voidInitialize+0xb2>
	{
		CAN_FS1R = 0x0000;
 80002ae:	4b5e      	ldr	r3, [pc, #376]	; (8000428 <CAN_voidInitialize+0x224>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	e006      	b.n	80002c4 <CAN_voidInitialize+0xc0>
	}
	else if(Copy_t_Init->Filter_Scale == Single_32_bit_scale)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	785b      	ldrb	r3, [r3, #1]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	d102      	bne.n	80002c4 <CAN_voidInitialize+0xc0>
	{
		CAN_FS1R = 0x7fffff;
 80002be:	4b5a      	ldr	r3, [pc, #360]	; (8000428 <CAN_voidInitialize+0x224>)
 80002c0:	4a5a      	ldr	r2, [pc, #360]	; (800042c <CAN_voidInitialize+0x228>)
 80002c2:	601a      	str	r2, [r3, #0]
	}

	/*Set the filters that are in List mode*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Filters_In_List_Mode) ; filter_number++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e00c      	b.n	80002e4 <CAN_voidInitialize+0xe0>
	{
		SET_BIT(CAN_FM1R,filter_number);
 80002ca:	4b56      	ldr	r3, [pc, #344]	; (8000424 <CAN_voidInitialize+0x220>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	7bfa      	ldrb	r2, [r7, #15]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a52      	ldr	r2, [pc, #328]	; (8000424 <CAN_voidInitialize+0x220>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Filters_In_List_Mode) ; filter_number++)
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	3301      	adds	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	789b      	ldrb	r3, [r3, #2]
 80002e8:	7bfa      	ldrb	r2, [r7, #15]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d3ed      	bcc.n	80002ca <CAN_voidInitialize+0xc6>
	}

	/*Set the filters assigned to FIFO_0*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e022      	b.n	800033a <CAN_voidInitialize+0x136>
	{
		if( filter_number < (Copy_t_Init->No_Of_Filters_For_FIFO_ZERO) )
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	78db      	ldrb	r3, [r3, #3]
 80002f8:	7bba      	ldrb	r2, [r7, #14]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d20b      	bcs.n	8000316 <CAN_voidInitialize+0x112>
		{
			CLR_BIT(CAN_FFA1R,filter_number);
 80002fe:	4b4c      	ldr	r3, [pc, #304]	; (8000430 <CAN_voidInitialize+0x22c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	7bba      	ldrb	r2, [r7, #14]
 8000304:	2101      	movs	r1, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	43d2      	mvns	r2, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4a48      	ldr	r2, [pc, #288]	; (8000430 <CAN_voidInitialize+0x22c>)
 8000310:	400b      	ands	r3, r1
 8000312:	6013      	str	r3, [r2, #0]
 8000314:	e00e      	b.n	8000334 <CAN_voidInitialize+0x130>
		}
		else if( filter_number >= (Copy_t_Init->No_Of_Filters_For_FIFO_ZERO) )
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	78db      	ldrb	r3, [r3, #3]
 800031a:	7bba      	ldrb	r2, [r7, #14]
 800031c:	429a      	cmp	r2, r3
 800031e:	d309      	bcc.n	8000334 <CAN_voidInitialize+0x130>
		{
			SET_BIT(CAN_FFA1R,filter_number);
 8000320:	4b43      	ldr	r3, [pc, #268]	; (8000430 <CAN_voidInitialize+0x22c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	7bba      	ldrb	r2, [r7, #14]
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f202 	lsl.w	r2, r1, r2
 800032c:	4611      	mov	r1, r2
 800032e:	4a40      	ldr	r2, [pc, #256]	; (8000430 <CAN_voidInitialize+0x22c>)
 8000330:	430b      	orrs	r3, r1
 8000332:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	3301      	adds	r3, #1
 8000338:	73bb      	strb	r3, [r7, #14]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	7bba      	ldrb	r2, [r7, #14]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3d7      	bcc.n	80002f4 <CAN_voidInitialize+0xf0>
		}
	}

	/*Write the ID or mask as configured in "CAN_config.h"*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 8000344:	2300      	movs	r3, #0
 8000346:	737b      	strb	r3, [r7, #13]
 8000348:	e01a      	b.n	8000380 <CAN_voidInitialize+0x17c>
	{
		*Filter_Bank[filter_number*2] = Filter_Banks_Config[filter_number*2];
 800034a:	7b7b      	ldrb	r3, [r7, #13]
 800034c:	005a      	lsls	r2, r3, #1
 800034e:	7b7b      	ldrb	r3, [r7, #13]
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	4938      	ldr	r1, [pc, #224]	; (8000434 <CAN_voidInitialize+0x230>)
 8000354:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000358:	4937      	ldr	r1, [pc, #220]	; (8000438 <CAN_voidInitialize+0x234>)
 800035a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800035e:	601a      	str	r2, [r3, #0]
		*Filter_Bank[(filter_number*2)+1] = Filter_Banks_Config[(filter_number*2)+1];
 8000360:	7b7b      	ldrb	r3, [r7, #13]
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	7b7b      	ldrb	r3, [r7, #13]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	3301      	adds	r3, #1
 800036c:	4931      	ldr	r1, [pc, #196]	; (8000434 <CAN_voidInitialize+0x230>)
 800036e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000372:	4931      	ldr	r1, [pc, #196]	; (8000438 <CAN_voidInitialize+0x234>)
 8000374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000378:	601a      	str	r2, [r3, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 800037a:	7b7b      	ldrb	r3, [r7, #13]
 800037c:	3301      	adds	r3, #1
 800037e:	737b      	strb	r3, [r7, #13]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	7b7a      	ldrb	r2, [r7, #13]
 8000386:	429a      	cmp	r2, r3
 8000388:	d3df      	bcc.n	800034a <CAN_voidInitialize+0x146>
	}


	/*Activate all the needed filters*/
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 800038a:	2300      	movs	r3, #0
 800038c:	733b      	strb	r3, [r7, #12]
 800038e:	e00c      	b.n	80003aa <CAN_voidInitialize+0x1a6>
	{
		SET_BIT(CAN_FA1R,filter_number);
 8000390:	4b2a      	ldr	r3, [pc, #168]	; (800043c <CAN_voidInitialize+0x238>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	7b3a      	ldrb	r2, [r7, #12]
 8000396:	2101      	movs	r1, #1
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a27      	ldr	r2, [pc, #156]	; (800043c <CAN_voidInitialize+0x238>)
 80003a0:	430b      	orrs	r3, r1
 80003a2:	6013      	str	r3, [r2, #0]
	for(u8 filter_number=0; filter_number < (Copy_t_Init->No_Of_Can1Filters) ; filter_number++)
 80003a4:	7b3b      	ldrb	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	733b      	strb	r3, [r7, #12]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	7b3a      	ldrb	r2, [r7, #12]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d3ed      	bcc.n	8000390 <CAN_voidInitialize+0x18c>
	}

	/*Set normal mode for filters*/
	CLR_BIT(CAN_FMR,CAN_FMR_FINIT);
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <CAN_voidInitialize+0x21c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <CAN_voidInitialize+0x21c>)
 80003ba:	f023 0301 	bic.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
	/*------------------------------------------------------------------------------------------------*/

	/*Reset transmit data registers*/
	CAN_MAILBOX->CAN_TDL0R =0;
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
	CAN_MAILBOX->CAN_TDH0R =0;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
	CAN_MAILBOX->CAN_TDL1R =0;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
	CAN_MAILBOX->CAN_TDH1R =0;
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	61da      	str	r2, [r3, #28]
	CAN_MAILBOX->CAN_TDL2R =0;
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
	CAN_MAILBOX->CAN_TDH2R =0;
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <CAN_voidInitialize+0x23c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enter Normal mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_INRQ);
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <CAN_voidInitialize+0x214>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <CAN_voidInitialize+0x214>)
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]
	/*Exit sleep mode*/
	CLR_BIT(CAN_CONTROL_AND_STATUS->CAN_MCR,CAN_MCR_SLEEP);
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <CAN_voidInitialize+0x214>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a08      	ldr	r2, [pc, #32]	; (8000418 <CAN_voidInitialize+0x214>)
 80003f6:	f023 0302 	bic.w	r3, r3, #2
 80003fa:	6013      	str	r3, [r2, #0]

	while(GET_BIT(CAN_CONTROL_AND_STATUS->CAN_MSR,CAN_MSR_INAK))
 80003fc:	bf00      	nop
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <CAN_voidInitialize+0x214>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f9      	bne.n	80003fe <CAN_voidInitialize+0x1fa>
	{
		/*Do nothing until normal mode is entered*/
	}
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40006400 	.word	0x40006400
 800041c:	00050001 	.word	0x00050001
 8000420:	40006600 	.word	0x40006600
 8000424:	40006604 	.word	0x40006604
 8000428:	4000660c 	.word	0x4000660c
 800042c:	007fffff 	.word	0x007fffff
 8000430:	40006614 	.word	0x40006614
 8000434:	20000000 	.word	0x20000000
 8000438:	200000e0 	.word	0x200000e0
 800043c:	4000661c 	.word	0x4000661c
 8000440:	40006580 	.word	0x40006580

08000444 <CAN_voidTransmit>:

/*****************************************************************************************************************/
/*****************************************************************************************************************/

void CAN_voidTransmit(CAN_frame_t * Copy_t_frame, u8 * Copy_ptr_u8_Message)
{
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	u8 Data_Length = Copy_t_frame->DataLength;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	73bb      	strb	r3, [r7, #14]

	/*If Transmit mailbox 0 is empty*/
	if( GET_BIT(CAN_CONTROL_AND_STATUS->CAN_TSR,CAN_TSR_TME0) == 1 )
 8000454:	4b8c      	ldr	r3, [pc, #560]	; (8000688 <CAN_voidTransmit+0x244>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	0e9b      	lsrs	r3, r3, #26
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	2b01      	cmp	r3, #1
 8000460:	f040 80a0 	bne.w	80005a4 <CAN_voidTransmit+0x160>
		{
			/*Clear CAN mailbox data length control and time stamp register*/
			CAN_MAILBOX->CAN_TDT0R =0;
 8000464:	4b89      	ldr	r3, [pc, #548]	; (800068c <CAN_voidTransmit+0x248>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
			/*Clear mailbox identifier register */
			CAN_MAILBOX->CAN_TI0R =0;
 800046a:	4b88      	ldr	r3, [pc, #544]	; (800068c <CAN_voidTransmit+0x248>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]

			/*Choose number of bytes*/
			CAN_MAILBOX->CAN_TDT0R |= Data_Length;
 8000470:	4b86      	ldr	r3, [pc, #536]	; (800068c <CAN_voidTransmit+0x248>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	7bbb      	ldrb	r3, [r7, #14]
 8000476:	4985      	ldr	r1, [pc, #532]	; (800068c <CAN_voidTransmit+0x248>)
 8000478:	4313      	orrs	r3, r2
 800047a:	604b      	str	r3, [r1, #4]

			if(Copy_t_frame->FrameType == Data_frame)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d159      	bne.n	8000538 <CAN_voidTransmit+0xf4>
			{
				/*Choose RTR for data frame*/
				CLR_BIT(CAN_MAILBOX->CAN_TI0R,CAN_TIxR_RTR );
 8000484:	4b81      	ldr	r3, [pc, #516]	; (800068c <CAN_voidTransmit+0x248>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a80      	ldr	r2, [pc, #512]	; (800068c <CAN_voidTransmit+0x248>)
 800048a:	f023 0302 	bic.w	r3, r3, #2
 800048e:	6013      	str	r3, [r2, #0]

				/*Write Data bytes */
				if(Data_Length <= 4)
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d819      	bhi.n	80004ca <CAN_voidTransmit+0x86>
				{
					for(u8 counter=0; counter < Data_Length; counter++)
 8000496:	2300      	movs	r3, #0
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	e011      	b.n	80004c0 <CAN_voidTransmit+0x7c>
					{
						CAN_MAILBOX->CAN_TDL0R |= ( Copy_ptr_u8_Message[counter] << (counter*8) );
 800049c:	4b7b      	ldr	r3, [pc, #492]	; (800068c <CAN_voidTransmit+0x248>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	7dfa      	ldrb	r2, [r7, #23]
 80004a2:	6839      	ldr	r1, [r7, #0]
 80004a4:	440a      	add	r2, r1
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	4611      	mov	r1, r2
 80004aa:	7dfa      	ldrb	r2, [r7, #23]
 80004ac:	00d2      	lsls	r2, r2, #3
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a75      	ldr	r2, [pc, #468]	; (800068c <CAN_voidTransmit+0x248>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]
					for(u8 counter=0; counter < Data_Length; counter++)
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
 80004bc:	3301      	adds	r3, #1
 80004be:	75fb      	strb	r3, [r7, #23]
 80004c0:	7dfa      	ldrb	r2, [r7, #23]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d3e9      	bcc.n	800049c <CAN_voidTransmit+0x58>
 80004c8:	e040      	b.n	800054c <CAN_voidTransmit+0x108>
					}
				}
				else if(Data_Length >= 5)
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	d93d      	bls.n	800054c <CAN_voidTransmit+0x108>
				{
					/*Write Data bytes */
					for(u8 counter=0; counter < 4; counter++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	75bb      	strb	r3, [r7, #22]
 80004d4:	e011      	b.n	80004fa <CAN_voidTransmit+0xb6>
					{
						CAN_MAILBOX->CAN_TDL0R |= Copy_ptr_u8_Message[counter] << (counter*8);
 80004d6:	4b6d      	ldr	r3, [pc, #436]	; (800068c <CAN_voidTransmit+0x248>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	7dba      	ldrb	r2, [r7, #22]
 80004dc:	6839      	ldr	r1, [r7, #0]
 80004de:	440a      	add	r2, r1
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	4611      	mov	r1, r2
 80004e4:	7dba      	ldrb	r2, [r7, #22]
 80004e6:	00d2      	lsls	r2, r2, #3
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a67      	ldr	r2, [pc, #412]	; (800068c <CAN_voidTransmit+0x248>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]
					for(u8 counter=0; counter < 4; counter++)
 80004f4:	7dbb      	ldrb	r3, [r7, #22]
 80004f6:	3301      	adds	r3, #1
 80004f8:	75bb      	strb	r3, [r7, #22]
 80004fa:	7dbb      	ldrb	r3, [r7, #22]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d9ea      	bls.n	80004d6 <CAN_voidTransmit+0x92>
					}

					for(u8 counter=0; counter < Data_Length-4; counter++)
 8000500:	2300      	movs	r3, #0
 8000502:	757b      	strb	r3, [r7, #21]
 8000504:	e012      	b.n	800052c <CAN_voidTransmit+0xe8>
					{
						CAN_MAILBOX->CAN_TDH0R |= Copy_ptr_u8_Message[counter+4] << (counter*8);
 8000506:	4b61      	ldr	r3, [pc, #388]	; (800068c <CAN_voidTransmit+0x248>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	7d7a      	ldrb	r2, [r7, #21]
 800050c:	3204      	adds	r2, #4
 800050e:	6839      	ldr	r1, [r7, #0]
 8000510:	440a      	add	r2, r1
 8000512:	7812      	ldrb	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	7d7a      	ldrb	r2, [r7, #21]
 8000518:	00d2      	lsls	r2, r2, #3
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a5a      	ldr	r2, [pc, #360]	; (800068c <CAN_voidTransmit+0x248>)
 8000522:	430b      	orrs	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
					for(u8 counter=0; counter < Data_Length-4; counter++)
 8000526:	7d7b      	ldrb	r3, [r7, #21]
 8000528:	3301      	adds	r3, #1
 800052a:	757b      	strb	r3, [r7, #21]
 800052c:	7d7a      	ldrb	r2, [r7, #21]
 800052e:	7bbb      	ldrb	r3, [r7, #14]
 8000530:	3b04      	subs	r3, #4
 8000532:	429a      	cmp	r2, r3
 8000534:	dbe7      	blt.n	8000506 <CAN_voidTransmit+0xc2>
 8000536:	e009      	b.n	800054c <CAN_voidTransmit+0x108>
					}
				}


			}
			else if(Copy_t_frame->FrameType == Remote_frame )
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <CAN_voidTransmit+0x108>
			{
				/*Choose RTR for remote frame*/
				SET_BIT(CAN_MAILBOX->CAN_TI0R,CAN_TIxR_RTR );
 8000540:	4b52      	ldr	r3, [pc, #328]	; (800068c <CAN_voidTransmit+0x248>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a51      	ldr	r2, [pc, #324]	; (800068c <CAN_voidTransmit+0x248>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	6013      	str	r3, [r2, #0]
			}

			/*Choose ID type*/
			if(Copy_t_frame->ID_Type == Standarad_ID)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10e      	bne.n	8000572 <CAN_voidTransmit+0x12e>
			{
				CLR_BIT(CAN_MAILBOX->CAN_TI0R,CAN_TIxR_IDE );
 8000554:	4b4d      	ldr	r3, [pc, #308]	; (800068c <CAN_voidTransmit+0x248>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a4c      	ldr	r2, [pc, #304]	; (800068c <CAN_voidTransmit+0x248>)
 800055a:	f023 0304 	bic.w	r3, r3, #4
 800055e:	6013      	str	r3, [r2, #0]
				/*Write ID*/
				CAN_MAILBOX->CAN_TI0R |= (Copy_t_frame->ID) << CAN_TIxR_STID;
 8000560:	4b4a      	ldr	r3, [pc, #296]	; (800068c <CAN_voidTransmit+0x248>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	055b      	lsls	r3, r3, #21
 800056a:	4948      	ldr	r1, [pc, #288]	; (800068c <CAN_voidTransmit+0x248>)
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
 8000570:	e011      	b.n	8000596 <CAN_voidTransmit+0x152>

			}

			else if(Copy_t_frame->ID_Type == Extended_ID)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d10d      	bne.n	8000596 <CAN_voidTransmit+0x152>
			{
				SET_BIT(CAN_MAILBOX->CAN_TI0R,CAN_TIxR_IDE );
 800057a:	4b44      	ldr	r3, [pc, #272]	; (800068c <CAN_voidTransmit+0x248>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a43      	ldr	r2, [pc, #268]	; (800068c <CAN_voidTransmit+0x248>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6013      	str	r3, [r2, #0]
				/*Write ID*/
				CAN_MAILBOX->CAN_TI0R |= (Copy_t_frame->ID) << CAN_TIxR_EXID;
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <CAN_voidTransmit+0x248>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	493e      	ldr	r1, [pc, #248]	; (800068c <CAN_voidTransmit+0x248>)
 8000592:	4313      	orrs	r3, r2
 8000594:	600b      	str	r3, [r1, #0]
			}

			/*Transmit mailbox request*/
			SET_BIT(CAN_MAILBOX->CAN_TI0R,CAN_TIxR_TXRQ);
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <CAN_voidTransmit+0x248>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a3c      	ldr	r2, [pc, #240]	; (800068c <CAN_voidTransmit+0x248>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
/*------------------------------------------------------------------------------------------------------*/
	else
		{
			/*Do nothing*/
		}
}
 80005a2:	e152      	b.n	800084a <CAN_voidTransmit+0x406>
	else if(GET_BIT(CAN_CONTROL_AND_STATUS->CAN_TSR,CAN_TSR_TME1) == 1)
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <CAN_voidTransmit+0x244>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	0edb      	lsrs	r3, r3, #27
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	f040 80a4 	bne.w	80006fc <CAN_voidTransmit+0x2b8>
			CAN_MAILBOX->CAN_TI1R =0;
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <CAN_voidTransmit+0x248>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
			CAN_MAILBOX->CAN_TI1R =0;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <CAN_voidTransmit+0x248>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
			CAN_MAILBOX->CAN_TDT1R |= Data_Length;
 80005c0:	4b32      	ldr	r3, [pc, #200]	; (800068c <CAN_voidTransmit+0x248>)
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	4931      	ldr	r1, [pc, #196]	; (800068c <CAN_voidTransmit+0x248>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	614b      	str	r3, [r1, #20]
			if(Copy_t_frame->FrameType == Data_frame)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d15d      	bne.n	8000690 <CAN_voidTransmit+0x24c>
				CLR_BIT(CAN_MAILBOX->CAN_TI1R,CAN_TIxR_RTR );
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <CAN_voidTransmit+0x248>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <CAN_voidTransmit+0x248>)
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	6113      	str	r3, [r2, #16]
				if(Data_Length <= 4)
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d819      	bhi.n	800061a <CAN_voidTransmit+0x1d6>
					for(u8 counter=0; counter < Data_Length; counter++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	753b      	strb	r3, [r7, #20]
 80005ea:	e011      	b.n	8000610 <CAN_voidTransmit+0x1cc>
						CAN_MAILBOX->CAN_TDL1R |= ( Copy_ptr_u8_Message[counter] << (counter*8) );
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <CAN_voidTransmit+0x248>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	7d3a      	ldrb	r2, [r7, #20]
 80005f2:	6839      	ldr	r1, [r7, #0]
 80005f4:	440a      	add	r2, r1
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	4611      	mov	r1, r2
 80005fa:	7d3a      	ldrb	r2, [r7, #20]
 80005fc:	00d2      	lsls	r2, r2, #3
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <CAN_voidTransmit+0x248>)
 8000606:	430b      	orrs	r3, r1
 8000608:	6193      	str	r3, [r2, #24]
					for(u8 counter=0; counter < Data_Length; counter++)
 800060a:	7d3b      	ldrb	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	753b      	strb	r3, [r7, #20]
 8000610:	7d3a      	ldrb	r2, [r7, #20]
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3e9      	bcc.n	80005ec <CAN_voidTransmit+0x1a8>
 8000618:	e044      	b.n	80006a4 <CAN_voidTransmit+0x260>
				else if(Data_Length >= 5)
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	2b04      	cmp	r3, #4
 800061e:	d941      	bls.n	80006a4 <CAN_voidTransmit+0x260>
					for(u8 counter=0; counter < 4; counter++)
 8000620:	2300      	movs	r3, #0
 8000622:	74fb      	strb	r3, [r7, #19]
 8000624:	e011      	b.n	800064a <CAN_voidTransmit+0x206>
						CAN_MAILBOX->CAN_TDL1R |= Copy_ptr_u8_Message[counter] << (counter*8);
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <CAN_voidTransmit+0x248>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	7cfa      	ldrb	r2, [r7, #19]
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	440a      	add	r2, r1
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	4611      	mov	r1, r2
 8000634:	7cfa      	ldrb	r2, [r7, #19]
 8000636:	00d2      	lsls	r2, r2, #3
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <CAN_voidTransmit+0x248>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6193      	str	r3, [r2, #24]
					for(u8 counter=0; counter < 4; counter++)
 8000644:	7cfb      	ldrb	r3, [r7, #19]
 8000646:	3301      	adds	r3, #1
 8000648:	74fb      	strb	r3, [r7, #19]
 800064a:	7cfb      	ldrb	r3, [r7, #19]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d9ea      	bls.n	8000626 <CAN_voidTransmit+0x1e2>
					for(u8 counter=0; counter < Data_Length-4; counter++)
 8000650:	2300      	movs	r3, #0
 8000652:	74bb      	strb	r3, [r7, #18]
 8000654:	e012      	b.n	800067c <CAN_voidTransmit+0x238>
						CAN_MAILBOX->CAN_TDH1R |= Copy_ptr_u8_Message[counter+4] << (counter*8);
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <CAN_voidTransmit+0x248>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	7cba      	ldrb	r2, [r7, #18]
 800065c:	3204      	adds	r2, #4
 800065e:	6839      	ldr	r1, [r7, #0]
 8000660:	440a      	add	r2, r1
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	4611      	mov	r1, r2
 8000666:	7cba      	ldrb	r2, [r7, #18]
 8000668:	00d2      	lsls	r2, r2, #3
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <CAN_voidTransmit+0x248>)
 8000672:	430b      	orrs	r3, r1
 8000674:	61d3      	str	r3, [r2, #28]
					for(u8 counter=0; counter < Data_Length-4; counter++)
 8000676:	7cbb      	ldrb	r3, [r7, #18]
 8000678:	3301      	adds	r3, #1
 800067a:	74bb      	strb	r3, [r7, #18]
 800067c:	7cba      	ldrb	r2, [r7, #18]
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	3b04      	subs	r3, #4
 8000682:	429a      	cmp	r2, r3
 8000684:	dbe7      	blt.n	8000656 <CAN_voidTransmit+0x212>
 8000686:	e00d      	b.n	80006a4 <CAN_voidTransmit+0x260>
 8000688:	40006400 	.word	0x40006400
 800068c:	40006580 	.word	0x40006580
			else if(Copy_t_frame->FrameType == Remote_frame )
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d105      	bne.n	80006a4 <CAN_voidTransmit+0x260>
				SET_BIT(CAN_MAILBOX->CAN_TI1R,CAN_TIxR_RTR );
 8000698:	4b6f      	ldr	r3, [pc, #444]	; (8000858 <CAN_voidTransmit+0x414>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a6e      	ldr	r2, [pc, #440]	; (8000858 <CAN_voidTransmit+0x414>)
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	6113      	str	r3, [r2, #16]
			if(Copy_t_frame->ID_Type == Standarad_ID)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10e      	bne.n	80006ca <CAN_voidTransmit+0x286>
				CLR_BIT(CAN_MAILBOX->CAN_TI1R,CAN_TIxR_IDE );
 80006ac:	4b6a      	ldr	r3, [pc, #424]	; (8000858 <CAN_voidTransmit+0x414>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4a69      	ldr	r2, [pc, #420]	; (8000858 <CAN_voidTransmit+0x414>)
 80006b2:	f023 0304 	bic.w	r3, r3, #4
 80006b6:	6113      	str	r3, [r2, #16]
				CAN_MAILBOX->CAN_TI1R |= (Copy_t_frame->ID) << CAN_TIxR_STID;
 80006b8:	4b67      	ldr	r3, [pc, #412]	; (8000858 <CAN_voidTransmit+0x414>)
 80006ba:	691a      	ldr	r2, [r3, #16]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	055b      	lsls	r3, r3, #21
 80006c2:	4965      	ldr	r1, [pc, #404]	; (8000858 <CAN_voidTransmit+0x414>)
 80006c4:	4313      	orrs	r3, r2
 80006c6:	610b      	str	r3, [r1, #16]
 80006c8:	e011      	b.n	80006ee <CAN_voidTransmit+0x2aa>
			else if(Copy_t_frame->ID_Type == Extended_ID)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10d      	bne.n	80006ee <CAN_voidTransmit+0x2aa>
				SET_BIT(CAN_MAILBOX->CAN_TI1R,CAN_TIxR_IDE );
 80006d2:	4b61      	ldr	r3, [pc, #388]	; (8000858 <CAN_voidTransmit+0x414>)
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	4a60      	ldr	r2, [pc, #384]	; (8000858 <CAN_voidTransmit+0x414>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6113      	str	r3, [r2, #16]
				CAN_MAILBOX->CAN_TI1R |= (Copy_t_frame->ID) << CAN_TIxR_EXID;
 80006de:	4b5e      	ldr	r3, [pc, #376]	; (8000858 <CAN_voidTransmit+0x414>)
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	495b      	ldr	r1, [pc, #364]	; (8000858 <CAN_voidTransmit+0x414>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	610b      	str	r3, [r1, #16]
			SET_BIT(CAN_MAILBOX->CAN_TI1R,CAN_TIxR_TXRQ);
 80006ee:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <CAN_voidTransmit+0x414>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	4a59      	ldr	r2, [pc, #356]	; (8000858 <CAN_voidTransmit+0x414>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6113      	str	r3, [r2, #16]
}
 80006fa:	e0a6      	b.n	800084a <CAN_voidTransmit+0x406>
	else if(GET_BIT(CAN_CONTROL_AND_STATUS->CAN_TSR,CAN_TSR_TME2) == 1)
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <CAN_voidTransmit+0x418>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	0f1b      	lsrs	r3, r3, #28
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b01      	cmp	r3, #1
 8000708:	f040 809f 	bne.w	800084a <CAN_voidTransmit+0x406>
		CAN_MAILBOX->CAN_TI2R =0;
 800070c:	4b52      	ldr	r3, [pc, #328]	; (8000858 <CAN_voidTransmit+0x414>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
		CAN_MAILBOX->CAN_TI2R=0;
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <CAN_voidTransmit+0x414>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
		CAN_MAILBOX->CAN_TDT2R |= Data_Length;
 8000718:	4b4f      	ldr	r3, [pc, #316]	; (8000858 <CAN_voidTransmit+0x414>)
 800071a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	494e      	ldr	r1, [pc, #312]	; (8000858 <CAN_voidTransmit+0x414>)
 8000720:	4313      	orrs	r3, r2
 8000722:	624b      	str	r3, [r1, #36]	; 0x24
			if(Copy_t_frame->FrameType == Data_frame)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d159      	bne.n	80007e0 <CAN_voidTransmit+0x39c>
				CLR_BIT(CAN_MAILBOX->CAN_TI2R,CAN_TIxR_RTR );
 800072c:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <CAN_voidTransmit+0x414>)
 800072e:	6a1b      	ldr	r3, [r3, #32]
 8000730:	4a49      	ldr	r2, [pc, #292]	; (8000858 <CAN_voidTransmit+0x414>)
 8000732:	f023 0302 	bic.w	r3, r3, #2
 8000736:	6213      	str	r3, [r2, #32]
				if(Data_Length <= 4)
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d819      	bhi.n	8000772 <CAN_voidTransmit+0x32e>
					for(u8 counter=0; counter < Data_Length; counter++)
 800073e:	2300      	movs	r3, #0
 8000740:	747b      	strb	r3, [r7, #17]
 8000742:	e011      	b.n	8000768 <CAN_voidTransmit+0x324>
						CAN_MAILBOX->CAN_TDL2R |= ( Copy_ptr_u8_Message[counter] << (counter*8) );
 8000744:	4b44      	ldr	r3, [pc, #272]	; (8000858 <CAN_voidTransmit+0x414>)
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	7c7a      	ldrb	r2, [r7, #17]
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	440a      	add	r2, r1
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	4611      	mov	r1, r2
 8000752:	7c7a      	ldrb	r2, [r7, #17]
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a3e      	ldr	r2, [pc, #248]	; (8000858 <CAN_voidTransmit+0x414>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6293      	str	r3, [r2, #40]	; 0x28
					for(u8 counter=0; counter < Data_Length; counter++)
 8000762:	7c7b      	ldrb	r3, [r7, #17]
 8000764:	3301      	adds	r3, #1
 8000766:	747b      	strb	r3, [r7, #17]
 8000768:	7c7a      	ldrb	r2, [r7, #17]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	429a      	cmp	r2, r3
 800076e:	d3e9      	bcc.n	8000744 <CAN_voidTransmit+0x300>
 8000770:	e040      	b.n	80007f4 <CAN_voidTransmit+0x3b0>
				else if(Data_Length >= 5)
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	2b04      	cmp	r3, #4
 8000776:	d93d      	bls.n	80007f4 <CAN_voidTransmit+0x3b0>
					for(u8 counter=0; counter < 4; counter++)
 8000778:	2300      	movs	r3, #0
 800077a:	743b      	strb	r3, [r7, #16]
 800077c:	e011      	b.n	80007a2 <CAN_voidTransmit+0x35e>
						CAN_MAILBOX->CAN_TDL2R |= Copy_ptr_u8_Message[counter] << (counter*8);
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <CAN_voidTransmit+0x414>)
 8000780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000782:	7c3a      	ldrb	r2, [r7, #16]
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	440a      	add	r2, r1
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	4611      	mov	r1, r2
 800078c:	7c3a      	ldrb	r2, [r7, #16]
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <CAN_voidTransmit+0x414>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6293      	str	r3, [r2, #40]	; 0x28
					for(u8 counter=0; counter < 4; counter++)
 800079c:	7c3b      	ldrb	r3, [r7, #16]
 800079e:	3301      	adds	r3, #1
 80007a0:	743b      	strb	r3, [r7, #16]
 80007a2:	7c3b      	ldrb	r3, [r7, #16]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d9ea      	bls.n	800077e <CAN_voidTransmit+0x33a>
					for(u8 counter=0; counter < Data_Length-4; counter++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e012      	b.n	80007d4 <CAN_voidTransmit+0x390>
						CAN_MAILBOX->CAN_TDH2R |= Copy_ptr_u8_Message[counter+4] << (counter*8);
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <CAN_voidTransmit+0x414>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	3204      	adds	r2, #4
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	440a      	add	r2, r1
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	4611      	mov	r1, r2
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <CAN_voidTransmit+0x414>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	62d3      	str	r3, [r2, #44]	; 0x2c
					for(u8 counter=0; counter < Data_Length-4; counter++)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	3b04      	subs	r3, #4
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbe7      	blt.n	80007ae <CAN_voidTransmit+0x36a>
 80007de:	e009      	b.n	80007f4 <CAN_voidTransmit+0x3b0>
			else if(Copy_t_frame->FrameType == Remote_frame )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d105      	bne.n	80007f4 <CAN_voidTransmit+0x3b0>
				SET_BIT(CAN_MAILBOX->CAN_TI2R,CAN_TIxR_RTR );
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <CAN_voidTransmit+0x414>)
 80007ea:	6a1b      	ldr	r3, [r3, #32]
 80007ec:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <CAN_voidTransmit+0x414>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	6213      	str	r3, [r2, #32]
			if(Copy_t_frame->ID_Type == Standarad_ID)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	789b      	ldrb	r3, [r3, #2]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10e      	bne.n	800081a <CAN_voidTransmit+0x3d6>
				CLR_BIT(CAN_MAILBOX->CAN_TI2R,CAN_TIxR_IDE );
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <CAN_voidTransmit+0x414>)
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	4a15      	ldr	r2, [pc, #84]	; (8000858 <CAN_voidTransmit+0x414>)
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6213      	str	r3, [r2, #32]
				CAN_MAILBOX->CAN_TI2R |= (Copy_t_frame->ID) << CAN_TIxR_STID;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <CAN_voidTransmit+0x414>)
 800080a:	6a1a      	ldr	r2, [r3, #32]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	055b      	lsls	r3, r3, #21
 8000812:	4911      	ldr	r1, [pc, #68]	; (8000858 <CAN_voidTransmit+0x414>)
 8000814:	4313      	orrs	r3, r2
 8000816:	620b      	str	r3, [r1, #32]
 8000818:	e011      	b.n	800083e <CAN_voidTransmit+0x3fa>
			else if(Copy_t_frame->ID_Type == Extended_ID)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	789b      	ldrb	r3, [r3, #2]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d10d      	bne.n	800083e <CAN_voidTransmit+0x3fa>
				SET_BIT(CAN_MAILBOX->CAN_TI2R,CAN_TIxR_IDE );
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <CAN_voidTransmit+0x414>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <CAN_voidTransmit+0x414>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6213      	str	r3, [r2, #32]
				CAN_MAILBOX->CAN_TI2R |= (Copy_t_frame->ID) << CAN_TIxR_EXID;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <CAN_voidTransmit+0x414>)
 8000830:	6a1a      	ldr	r2, [r3, #32]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <CAN_voidTransmit+0x414>)
 800083a:	4313      	orrs	r3, r2
 800083c:	620b      	str	r3, [r1, #32]
			SET_BIT(CAN_MAILBOX->CAN_TI2R,CAN_TIxR_TXRQ);
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <CAN_voidTransmit+0x414>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <CAN_voidTransmit+0x414>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6213      	str	r3, [r2, #32]
}
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40006580 	.word	0x40006580
 800085c:	40006400 	.word	0x40006400

08000860 <CAN_voidReceive>:

/*****************************************************************************************************************/
/*****************************************************************************************************************/

void CAN_voidReceive(CAN_Receive_t * Copy_t_ReceivedMessage)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/*If at least a message is pending at FIF00*/
	if((CAN_CONTROL_AND_STATUS->CAN_RF0R & 0x03) != 0)
 8000868:	4b76      	ldr	r3, [pc, #472]	; (8000a44 <CAN_voidReceive+0x1e4>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d064      	beq.n	800093e <CAN_voidReceive+0xde>
	{
		/*Get frame type*/
		Copy_t_ReceivedMessage->FrameType = GET_BIT(CAN_MAILBOX->CAN_RI0R,CAN_RIxR_RTR);
 8000874:	4b74      	ldr	r3, [pc, #464]	; (8000a48 <CAN_voidReceive+0x1e8>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	701a      	strb	r2, [r3, #0]
		/*Get number of received bytes*/
		Copy_t_ReceivedMessage->DataLength = (0x00fF & (CAN_MAILBOX->CAN_RDT0R));
 8000886:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <CAN_voidReceive+0x1e8>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	b2da      	uxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	705a      	strb	r2, [r3, #1]

		/*Read Data bytes */
		if(Copy_t_ReceivedMessage->DataLength <= 4)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d816      	bhi.n	80008c6 <CAN_voidReceive+0x66>
		{
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00d      	b.n	80008ba <CAN_voidReceive+0x5a>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDL0R >> (counter*8));
 800089e:	4b6a      	ldr	r3, [pc, #424]	; (8000a48 <CAN_voidReceive+0x1e8>)
 80008a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	40da      	lsrs	r2, r3
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	b2d1      	uxtb	r1, r2
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	460a      	mov	r2, r1
 80008b2:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	7bfa      	ldrb	r2, [r7, #15]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3ec      	bcc.n	800089e <CAN_voidReceive+0x3e>
 80008c4:	e02e      	b.n	8000924 <CAN_voidReceive+0xc4>
			}
		}
		else if(Copy_t_ReceivedMessage->DataLength >= 5)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d92a      	bls.n	8000924 <CAN_voidReceive+0xc4>
		{
		/*Read Data bytes */
			for(u8 counter=0; counter < 4; counter++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	73bb      	strb	r3, [r7, #14]
 80008d2:	e00d      	b.n	80008f0 <CAN_voidReceive+0x90>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDL0R >> (counter*8));
 80008d4:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <CAN_voidReceive+0x1e8>)
 80008d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	40da      	lsrs	r2, r3
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	b2d1      	uxtb	r1, r2
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	460a      	mov	r2, r1
 80008e8:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < 4; counter++)
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	3301      	adds	r3, #1
 80008ee:	73bb      	strb	r3, [r7, #14]
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d9ee      	bls.n	80008d4 <CAN_voidReceive+0x74>
			}

			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80008f6:	2304      	movs	r3, #4
 80008f8:	737b      	strb	r3, [r7, #13]
 80008fa:	e00e      	b.n	800091a <CAN_voidReceive+0xba>
			{
				Copy_t_ReceivedMessage->Message[counter] = 0x00ff & (CAN_MAILBOX->CAN_RDH0R >> ((counter-4)*8));
 80008fc:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <CAN_voidReceive+0x1e8>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000900:	7b7b      	ldrb	r3, [r7, #13]
 8000902:	3b04      	subs	r3, #4
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	40da      	lsrs	r2, r3
 8000908:	7b7b      	ldrb	r3, [r7, #13]
 800090a:	b2d1      	uxtb	r1, r2
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	460a      	mov	r2, r1
 8000912:	70da      	strb	r2, [r3, #3]
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	3301      	adds	r3, #1
 8000918:	737b      	strb	r3, [r7, #13]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	7b7a      	ldrb	r2, [r7, #13]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3eb      	bcc.n	80008fc <CAN_voidReceive+0x9c>
			}
		}

		/*Get filter index*/
		Copy_t_ReceivedMessage->FilterIndex = 0x00ff & (CAN_MAILBOX->CAN_RDT0R >>CAN_RDTxR_FMI);
 8000924:	4b48      	ldr	r3, [pc, #288]	; (8000a48 <CAN_voidReceive+0x1e8>)
 8000926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b2da      	uxtb	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	709a      	strb	r2, [r3, #2]
		/*Release FIFO 0 output mailbox after receiving message*/
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF0R,CAN_RF0R_RFOM0);
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <CAN_voidReceive+0x1e4>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <CAN_voidReceive+0x1e4>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	60d3      	str	r3, [r2, #12]
		/*Get filter index*/
		Copy_t_ReceivedMessage->FilterIndex = (u8) ( 0x000f & (CAN_MAILBOX->CAN_RDT1R >>CAN_RDTxR_FMI) );
		/*Release FIFO 1 output mailbox after receiving message*/
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF1R,CAN_RF1R_RFOM1);
	}
}
 800093c:	e07b      	b.n	8000a36 <CAN_voidReceive+0x1d6>
	else if((CAN_CONTROL_AND_STATUS->CAN_RF1R & 0x03) != 0)
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <CAN_voidReceive+0x1e4>)
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d075      	beq.n	8000a36 <CAN_voidReceive+0x1d6>
		Copy_t_ReceivedMessage->FrameType = GET_BIT(CAN_MAILBOX->CAN_RI1R,CAN_RIxR_RTR);
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <CAN_voidReceive+0x1e8>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	085b      	lsrs	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	701a      	strb	r2, [r3, #0]
		Copy_t_ReceivedMessage->DataLength = (0x000F & (CAN_MAILBOX->CAN_RDT1R));
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <CAN_voidReceive+0x1e8>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	b2da      	uxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	705a      	strb	r2, [r3, #1]
		if(Copy_t_ReceivedMessage->DataLength <= 4)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d81a      	bhi.n	80009aa <CAN_voidReceive+0x14a>
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000974:	2300      	movs	r3, #0
 8000976:	733b      	strb	r3, [r7, #12]
 8000978:	e011      	b.n	800099e <CAN_voidReceive+0x13e>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDL1R >> (counter*8)));
 800097a:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <CAN_voidReceive+0x1e8>)
 800097c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800097e:	7b3b      	ldrb	r3, [r7, #12]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	f002 020f 	and.w	r2, r2, #15
 800098e:	b2d1      	uxtb	r1, r2
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	460a      	mov	r2, r1
 8000996:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	733b      	strb	r3, [r7, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	7b3a      	ldrb	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3e8      	bcc.n	800097a <CAN_voidReceive+0x11a>
 80009a8:	e036      	b.n	8000a18 <CAN_voidReceive+0x1b8>
		else if(Copy_t_ReceivedMessage->DataLength >= 5)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d932      	bls.n	8000a18 <CAN_voidReceive+0x1b8>
			for(u8 counter=0; counter < 4; counter++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	72fb      	strb	r3, [r7, #11]
 80009b6:	e011      	b.n	80009dc <CAN_voidReceive+0x17c>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDL1R >> (counter*8)));
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <CAN_voidReceive+0x1e8>)
 80009ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	fa22 f303 	lsr.w	r3, r2, r3
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	7afb      	ldrb	r3, [r7, #11]
 80009c8:	f002 020f 	and.w	r2, r2, #15
 80009cc:	b2d1      	uxtb	r1, r2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	460a      	mov	r2, r1
 80009d4:	70da      	strb	r2, [r3, #3]
			for(u8 counter=0; counter < 4; counter++)
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	3301      	adds	r3, #1
 80009da:	72fb      	strb	r3, [r7, #11]
 80009dc:	7afb      	ldrb	r3, [r7, #11]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ea      	bls.n	80009b8 <CAN_voidReceive+0x158>
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 80009e2:	2304      	movs	r3, #4
 80009e4:	72bb      	strb	r3, [r7, #10]
 80009e6:	e012      	b.n	8000a0e <CAN_voidReceive+0x1ae>
				Copy_t_ReceivedMessage->Message[counter] = (u8) (0x000f & (CAN_MAILBOX->CAN_RDH1R >> ((counter-4)*8)));
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <CAN_voidReceive+0x1e8>)
 80009ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ec:	7abb      	ldrb	r3, [r7, #10]
 80009ee:	3b04      	subs	r3, #4
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	fa22 f303 	lsr.w	r3, r2, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	7abb      	ldrb	r3, [r7, #10]
 80009fa:	f002 020f 	and.w	r2, r2, #15
 80009fe:	b2d1      	uxtb	r1, r2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	460a      	mov	r2, r1
 8000a06:	70da      	strb	r2, [r3, #3]
			for(u8 counter=4; counter < (Copy_t_ReceivedMessage->DataLength); counter++)
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	72bb      	strb	r3, [r7, #10]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	7aba      	ldrb	r2, [r7, #10]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3e7      	bcc.n	80009e8 <CAN_voidReceive+0x188>
		Copy_t_ReceivedMessage->FilterIndex = (u8) ( 0x000f & (CAN_MAILBOX->CAN_RDT1R >>CAN_RDTxR_FMI) );
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <CAN_voidReceive+0x1e8>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	709a      	strb	r2, [r3, #2]
		SET_BIT(CAN_CONTROL_AND_STATUS->CAN_RF1R,CAN_RF1R_RFOM1);
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <CAN_voidReceive+0x1e4>)
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <CAN_voidReceive+0x1e4>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6113      	str	r3, [r2, #16]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40006400 	.word	0x40006400
 8000a48:	40006580 	.word	0x40006580

08000a4c <CAN1_TX_IRQHandler>:
{
	CAN1_TX_CallBack = ptr;
}

void CAN1_TX_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	CAN1_TX_CallBack();
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <CAN1_TX_IRQHandler+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001dc 	.word	0x200001dc

08000a60 <CAN1_RX0_IRQHandler>:
{
	CAN1_RX0_CallBack = ptr;
}

void CAN1_RX0_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	CAN1_RX0_CallBack();
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <CAN1_RX0_IRQHandler+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4798      	blx	r3
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001e0 	.word	0x200001e0

08000a74 <CAN1_RX1_IRQHandler>:
{
	CAN1_RX1_CallBack = ptr;
}

void CAN1_RX1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	CAN1_RX1_CallBack();
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <CAN1_RX1_IRQHandler+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200001e4 	.word	0x200001e4

08000a88 <CAN1_SCE_IRQHandler>:
{
	CAN1_SCE_CallBack = ptr;
}

void CAN1_SCE_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	CAN1_SCE_CallBack();
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <CAN1_SCE_IRQHandler+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4798      	blx	r3
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001e8 	.word	0x200001e8

08000a9c <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	if(Global_pvEXTI0NotificationFunction != 0)
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <EXTI0_IRQHandler+0x18>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <EXTI0_IRQHandler+0x12>
	{
		Global_pvEXTI0NotificationFunction();
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <EXTI0_IRQHandler+0x18>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4798      	blx	r3
	else
	{
		/* Do Nothing*/
	}

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001ec 	.word	0x200001ec

08000ab8 <GPIO_voidSetPinDirection>:
#include "BIT_MATH.h"
#include "GPIO_interface.h"
#include "GPIO_private.h"

void GPIO_voidSetPinDirection(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_PinMode)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	71bb      	strb	r3, [r7, #6]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	717b      	strb	r3, [r7, #5]
	 * bits [5,6]: for pin mode (either I/P or O/P or AF)
	 * bit   [4] : for output type (either PP or OD)
	 * bits [2,3]: for pin output speed
	 * bits [0,1]: for pull up and pull down
	 */
	u8 Local_u8Mode= (Copy_PinMode >> 5);
 8000aca:	797b      	ldrb	r3, [r7, #5]
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8OutputType= GET_BIT(Copy_PinMode,4);
 8000ad0:	797b      	ldrb	r3, [r7, #5]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8Speed= (Copy_PinMode>>2) & 0b11;
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	737b      	strb	r3, [r7, #13]
	u8 Local_u8PUPD= (Copy_PinMode) & 0b11;
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	733b      	strb	r3, [r7, #12]

	switch(Copy_u8Port)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	f000 80be 	beq.w	8000c74 <GPIO_voidSetPinDirection+0x1bc>
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	f300 8116 	bgt.w	8000d2a <GPIO_voidSetPinDirection+0x272>
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d002      	beq.n	8000b08 <GPIO_voidSetPinDirection+0x50>
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d05b      	beq.n	8000bbe <GPIO_voidSetPinDirection+0x106>
		    	GPIOC_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));

		    	break;

		    default:
		    	break;
 8000b06:	e110      	b.n	8000d2a <GPIO_voidSetPinDirection+0x272>
				GPIOA_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b08:	4b8b      	ldr	r3, [pc, #556]	; (8000d38 <GPIO_voidSetPinDirection+0x280>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	2103      	movs	r1, #3
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	43d2      	mvns	r2, r2
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a87      	ldr	r2, [pc, #540]	; (8000d38 <GPIO_voidSetPinDirection+0x280>)
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	6013      	str	r3, [r2, #0]
				GPIOA_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000b20:	4b85      	ldr	r3, [pc, #532]	; (8000d38 <GPIO_voidSetPinDirection+0x280>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	7bf9      	ldrb	r1, [r7, #15]
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a81      	ldr	r2, [pc, #516]	; (8000d38 <GPIO_voidSetPinDirection+0x280>)
 8000b32:	430b      	orrs	r3, r1
 8000b34:	6013      	str	r3, [r2, #0]
				CLR_BIT(GPIOA_OTYPER,Copy_u8Pin);
 8000b36:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <GPIO_voidSetPinDirection+0x284>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	79ba      	ldrb	r2, [r7, #6]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a7d      	ldr	r2, [pc, #500]	; (8000d3c <GPIO_voidSetPinDirection+0x284>)
 8000b48:	400b      	ands	r3, r1
 8000b4a:	6013      	str	r3, [r2, #0]
				GPIOA_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000b4c:	4b7b      	ldr	r3, [pc, #492]	; (8000d3c <GPIO_voidSetPinDirection+0x284>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	7bb9      	ldrb	r1, [r7, #14]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a78      	ldr	r2, [pc, #480]	; (8000d3c <GPIO_voidSetPinDirection+0x284>)
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6013      	str	r3, [r2, #0]
				GPIOA_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b60:	4b77      	ldr	r3, [pc, #476]	; (8000d40 <GPIO_voidSetPinDirection+0x288>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	2103      	movs	r1, #3
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a73      	ldr	r2, [pc, #460]	; (8000d40 <GPIO_voidSetPinDirection+0x288>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	6013      	str	r3, [r2, #0]
				GPIOA_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000b78:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <GPIO_voidSetPinDirection+0x288>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	7b79      	ldrb	r1, [r7, #13]
 8000b7e:	79ba      	ldrb	r2, [r7, #6]
 8000b80:	0052      	lsls	r2, r2, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a6d      	ldr	r2, [pc, #436]	; (8000d40 <GPIO_voidSetPinDirection+0x288>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
				GPIOA_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b8e:	4b6d      	ldr	r3, [pc, #436]	; (8000d44 <GPIO_voidSetPinDirection+0x28c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	0052      	lsls	r2, r2, #1
 8000b96:	2103      	movs	r1, #3
 8000b98:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a68      	ldr	r2, [pc, #416]	; (8000d44 <GPIO_voidSetPinDirection+0x28c>)
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	6013      	str	r3, [r2, #0]
				GPIOA_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <GPIO_voidSetPinDirection+0x28c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	7b39      	ldrb	r1, [r7, #12]
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a63      	ldr	r2, [pc, #396]	; (8000d44 <GPIO_voidSetPinDirection+0x28c>)
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6013      	str	r3, [r2, #0]
				break;
 8000bbc:	e0b6      	b.n	8000d2c <GPIO_voidSetPinDirection+0x274>
                GPIOB_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <GPIO_voidSetPinDirection+0x290>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	79ba      	ldrb	r2, [r7, #6]
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4a5d      	ldr	r2, [pc, #372]	; (8000d48 <GPIO_voidSetPinDirection+0x290>)
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
		    	GPIOB_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <GPIO_voidSetPinDirection+0x290>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	7bf9      	ldrb	r1, [r7, #15]
 8000bdc:	79ba      	ldrb	r2, [r7, #6]
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <GPIO_voidSetPinDirection+0x290>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
		    	CLR_BIT(GPIOB_OTYPER,Copy_u8Pin);
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <GPIO_voidSetPinDirection+0x294>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	79ba      	ldrb	r2, [r7, #6]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a53      	ldr	r2, [pc, #332]	; (8000d4c <GPIO_voidSetPinDirection+0x294>)
 8000bfe:	400b      	ands	r3, r1
 8000c00:	6013      	str	r3, [r2, #0]
		    	GPIOB_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000c02:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <GPIO_voidSetPinDirection+0x294>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	7bb9      	ldrb	r1, [r7, #14]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <GPIO_voidSetPinDirection+0x294>)
 8000c12:	430b      	orrs	r3, r1
 8000c14:	6013      	str	r3, [r2, #0]
		    	GPIOB_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000c16:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <GPIO_voidSetPinDirection+0x298>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	79ba      	ldrb	r2, [r7, #6]
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	2103      	movs	r1, #3
 8000c20:	fa01 f202 	lsl.w	r2, r1, r2
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	4611      	mov	r1, r2
 8000c28:	4a49      	ldr	r2, [pc, #292]	; (8000d50 <GPIO_voidSetPinDirection+0x298>)
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	6013      	str	r3, [r2, #0]
		    	GPIOB_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <GPIO_voidSetPinDirection+0x298>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	7b79      	ldrb	r1, [r7, #13]
 8000c34:	79ba      	ldrb	r2, [r7, #6]
 8000c36:	0052      	lsls	r2, r2, #1
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a44      	ldr	r2, [pc, #272]	; (8000d50 <GPIO_voidSetPinDirection+0x298>)
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6013      	str	r3, [r2, #0]
		    	GPIOB_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <GPIO_voidSetPinDirection+0x29c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	43d2      	mvns	r2, r2
 8000c54:	4611      	mov	r1, r2
 8000c56:	4a3f      	ldr	r2, [pc, #252]	; (8000d54 <GPIO_voidSetPinDirection+0x29c>)
 8000c58:	400b      	ands	r3, r1
 8000c5a:	6013      	str	r3, [r2, #0]
		    	GPIOB_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <GPIO_voidSetPinDirection+0x29c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	7b39      	ldrb	r1, [r7, #12]
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	0052      	lsls	r2, r2, #1
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a39      	ldr	r2, [pc, #228]	; (8000d54 <GPIO_voidSetPinDirection+0x29c>)
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
		    	break;
 8000c72:	e05b      	b.n	8000d2c <GPIO_voidSetPinDirection+0x274>
		    	GPIOC_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <GPIO_voidSetPinDirection+0x2a0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	43d2      	mvns	r2, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <GPIO_voidSetPinDirection+0x2a0>)
 8000c88:	400b      	ands	r3, r1
 8000c8a:	6013      	str	r3, [r2, #0]
		    	GPIOC_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <GPIO_voidSetPinDirection+0x2a0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	7bf9      	ldrb	r1, [r7, #15]
 8000c92:	79ba      	ldrb	r2, [r7, #6]
 8000c94:	0052      	lsls	r2, r2, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <GPIO_voidSetPinDirection+0x2a0>)
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6013      	str	r3, [r2, #0]
		    	CLR_BIT(GPIOC_OTYPER,Copy_u8Pin);
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <GPIO_voidSetPinDirection+0x2a4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	79ba      	ldrb	r2, [r7, #6]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	43d2      	mvns	r2, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <GPIO_voidSetPinDirection+0x2a4>)
 8000cb4:	400b      	ands	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
		    	GPIOC_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <GPIO_voidSetPinDirection+0x2a4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	7bb9      	ldrb	r1, [r7, #14]
 8000cbe:	79ba      	ldrb	r2, [r7, #6]
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <GPIO_voidSetPinDirection+0x2a4>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6013      	str	r3, [r2, #0]
		    	GPIOC_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <GPIO_voidSetPinDirection+0x2a8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <GPIO_voidSetPinDirection+0x2a8>)
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
		    	GPIOC_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <GPIO_voidSetPinDirection+0x2a8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	7b79      	ldrb	r1, [r7, #13]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0052      	lsls	r2, r2, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <GPIO_voidSetPinDirection+0x2a8>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
		    	GPIOC_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <GPIO_voidSetPinDirection+0x2ac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	79ba      	ldrb	r2, [r7, #6]
 8000d00:	0052      	lsls	r2, r2, #1
 8000d02:	2103      	movs	r1, #3
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	43d2      	mvns	r2, r2
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <GPIO_voidSetPinDirection+0x2ac>)
 8000d0e:	400b      	ands	r3, r1
 8000d10:	6013      	str	r3, [r2, #0]
		    	GPIOC_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <GPIO_voidSetPinDirection+0x2ac>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	7b39      	ldrb	r1, [r7, #12]
 8000d18:	79ba      	ldrb	r2, [r7, #6]
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	4611      	mov	r1, r2
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <GPIO_voidSetPinDirection+0x2ac>)
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
		    	break;
 8000d28:	e000      	b.n	8000d2c <GPIO_voidSetPinDirection+0x274>
		    	break;
 8000d2a:	bf00      	nop
		}
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020004 	.word	0x40020004
 8000d40:	40020008 	.word	0x40020008
 8000d44:	4002000c 	.word	0x4002000c
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020404 	.word	0x40020404
 8000d50:	40020408 	.word	0x40020408
 8000d54:	4002040c 	.word	0x4002040c
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020804 	.word	0x40020804
 8000d60:	40020808 	.word	0x40020808
 8000d64:	4002080c 	.word	0x4002080c

08000d68 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8PinValue)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	460b      	mov	r3, r1
 8000d74:	71bb      	strb	r3, [r7, #6]
 8000d76:	4613      	mov	r3, r2
 8000d78:	717b      	strb	r3, [r7, #5]
	/* In GPIOx_BSRR register:
	 *  bits (0 to 15) are for atomic set
	 *  bits (16 to 31) are for atomic reset */
	if(Copy_u8PinValue == GPIO_LOW)
 8000d7a:	797b      	ldrb	r3, [r7, #5]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <GPIO_voidSetPinValue+0x1e>
		{
			Copy_u8Pin += 16;
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	3310      	adds	r3, #16
 8000d84:	71bb      	strb	r3, [r7, #6]
		}

	switch(Copy_u8Port)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d01c      	beq.n	8000dc6 <GPIO_voidSetPinValue+0x5e>
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	dc25      	bgt.n	8000ddc <GPIO_voidSetPinValue+0x74>
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d002      	beq.n	8000d9a <GPIO_voidSetPinValue+0x32>
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d00b      	beq.n	8000db0 <GPIO_voidSetPinValue+0x48>
		    case GPIOC:
		    	SET_BIT(GPIOC_BSRR,Copy_u8Pin);
		    	break;

		    default:
		   		break;
 8000d98:	e020      	b.n	8000ddc <GPIO_voidSetPinValue+0x74>
				SET_BIT(GPIOA_BSRR,Copy_u8Pin);
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <GPIO_voidSetPinValue+0x84>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f202 	lsl.w	r2, r1, r2
 8000da6:	4611      	mov	r1, r2
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <GPIO_voidSetPinValue+0x84>)
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6013      	str	r3, [r2, #0]
				break;
 8000dae:	e016      	b.n	8000dde <GPIO_voidSetPinValue+0x76>
		    	SET_BIT(GPIOB_BSRR,Copy_u8Pin);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <GPIO_voidSetPinValue+0x88>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <GPIO_voidSetPinValue+0x88>)
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	6013      	str	r3, [r2, #0]
		    	break;
 8000dc4:	e00b      	b.n	8000dde <GPIO_voidSetPinValue+0x76>
		    	SET_BIT(GPIOC_BSRR,Copy_u8Pin);
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <GPIO_voidSetPinValue+0x8c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	79ba      	ldrb	r2, [r7, #6]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <GPIO_voidSetPinValue+0x8c>)
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6013      	str	r3, [r2, #0]
		    	break;
 8000dda:	e000      	b.n	8000dde <GPIO_voidSetPinValue+0x76>
		   		break;
 8000ddc:	bf00      	nop
		}
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40020018 	.word	0x40020018
 8000df0:	40020418 	.word	0x40020418
 8000df4:	40020818 	.word	0x40020818

08000df8 <GPIO_voidSetAlternatingFunction>:
		}
}


void GPIO_voidSetAlternatingFunction(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8Peripheral)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	460b      	mov	r3, r1
 8000e04:	71bb      	strb	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d044      	beq.n	8000e9a <GPIO_voidSetAlternatingFunction+0xa2>
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	dc61      	bgt.n	8000ed8 <GPIO_voidSetAlternatingFunction+0xe0>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d002      	beq.n	8000e1e <GPIO_voidSetAlternatingFunction+0x26>
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d01f      	beq.n	8000e5c <GPIO_voidSetAlternatingFunction+0x64>
			{
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
		default:
			break;
 8000e1c:	e05c      	b.n	8000ed8 <GPIO_voidSetAlternatingFunction+0xe0>
			if(Copy_u8Pin <= 7)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d80b      	bhi.n	8000e3c <GPIO_voidSetAlternatingFunction+0x44>
				GPIOA_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <GPIO_voidSetAlternatingFunction+0xfc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	7979      	ldrb	r1, [r7, #5]
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <GPIO_voidSetAlternatingFunction+0xfc>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	6013      	str	r3, [r2, #0]
			break;
 8000e3a:	e04f      	b.n	8000edc <GPIO_voidSetAlternatingFunction+0xe4>
			else if (Copy_u8Pin >= 8)
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d94c      	bls.n	8000edc <GPIO_voidSetAlternatingFunction+0xe4>
				GPIOA_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <GPIO_voidSetAlternatingFunction+0x100>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	7979      	ldrb	r1, [r7, #5]
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	3a08      	subs	r2, #8
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4611      	mov	r1, r2
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <GPIO_voidSetAlternatingFunction+0x100>)
 8000e56:	430b      	orrs	r3, r1
 8000e58:	6013      	str	r3, [r2, #0]
			break;
 8000e5a:	e03f      	b.n	8000edc <GPIO_voidSetAlternatingFunction+0xe4>
			if(Copy_u8Pin <= 7)
 8000e5c:	79bb      	ldrb	r3, [r7, #6]
 8000e5e:	2b07      	cmp	r3, #7
 8000e60:	d80b      	bhi.n	8000e7a <GPIO_voidSetAlternatingFunction+0x82>
				GPIOB_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <GPIO_voidSetAlternatingFunction+0x104>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	7979      	ldrb	r1, [r7, #5]
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	4611      	mov	r1, r2
 8000e72:	4a22      	ldr	r2, [pc, #136]	; (8000efc <GPIO_voidSetAlternatingFunction+0x104>)
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6013      	str	r3, [r2, #0]
			break;
 8000e78:	e032      	b.n	8000ee0 <GPIO_voidSetAlternatingFunction+0xe8>
			else if (Copy_u8Pin >= 8)
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	2b07      	cmp	r3, #7
 8000e7e:	d92f      	bls.n	8000ee0 <GPIO_voidSetAlternatingFunction+0xe8>
				GPIOB_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <GPIO_voidSetAlternatingFunction+0x108>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	7979      	ldrb	r1, [r7, #5]
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	3a08      	subs	r2, #8
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e90:	4611      	mov	r1, r2
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <GPIO_voidSetAlternatingFunction+0x108>)
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6013      	str	r3, [r2, #0]
			break;
 8000e98:	e022      	b.n	8000ee0 <GPIO_voidSetAlternatingFunction+0xe8>
			if(Copy_u8Pin <= 7)
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	d80b      	bhi.n	8000eb8 <GPIO_voidSetAlternatingFunction+0xc0>
				GPIOC_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <GPIO_voidSetAlternatingFunction+0x10c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	7979      	ldrb	r1, [r7, #5]
 8000ea6:	79ba      	ldrb	r2, [r7, #6]
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <GPIO_voidSetAlternatingFunction+0x10c>)
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6013      	str	r3, [r2, #0]
			break;
 8000eb6:	e015      	b.n	8000ee4 <GPIO_voidSetAlternatingFunction+0xec>
			else if (Copy_u8Pin >= 8)
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d912      	bls.n	8000ee4 <GPIO_voidSetAlternatingFunction+0xec>
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <GPIO_voidSetAlternatingFunction+0x110>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	7979      	ldrb	r1, [r7, #5]
 8000ec4:	79ba      	ldrb	r2, [r7, #6]
 8000ec6:	3a08      	subs	r2, #8
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <GPIO_voidSetAlternatingFunction+0x110>)
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6013      	str	r3, [r2, #0]
			break;
 8000ed6:	e005      	b.n	8000ee4 <GPIO_voidSetAlternatingFunction+0xec>
			break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <GPIO_voidSetAlternatingFunction+0xee>
			break;
 8000ee4:	bf00      	nop
	}

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40020020 	.word	0x40020020
 8000ef8:	40020024 	.word	0x40020024
 8000efc:	40020420 	.word	0x40020420
 8000f00:	40020424 	.word	0x40020424
 8000f04:	40020820 	.word	0x40020820
 8000f08:	40020824 	.word	0x40020824

08000f0c <NVIC_Init>:
* \Parameters (out): none
* \Return Value:    none
*
******************************************************************************/
void NVIC_Init(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

/*TODO Configure Grouping/SubGroubing System In APINT register in SCB*/
AIRCR= ( AIRCR_VECTKEY << 16U ) |(NVIC_GROUPING_SYSTEM<<8U);
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <NVIC_Init+0x10c>)
 8000f12:	4a42      	ldr	r2, [pc, #264]	; (800101c <NVIC_Init+0x110>)
 8000f14:	601a      	str	r2, [r3, #0]

for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 8000f16:	4b42      	ldr	r3, [pc, #264]	; (8001020 <NVIC_Init+0x114>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e072      	b.n	8001004 <NVIC_Init+0xf8>
	{
		intNum			= NVIC_Cfg[i].Interupt_Number;
 8000f1e:	4b40      	ldr	r3, [pc, #256]	; (8001020 <NVIC_Init+0x114>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4940      	ldr	r1, [pc, #256]	; (8001024 <NVIC_Init+0x118>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <NVIC_Init+0x11c>)
 8000f32:	601a      	str	r2, [r3, #0]
		locGroup		= NVIC_Cfg[i].Group_Priority;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <NVIC_Init+0x114>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	493a      	ldr	r1, [pc, #232]	; (8001024 <NVIC_Init+0x118>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	3301      	adds	r3, #1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <NVIC_Init+0x120>)
 8000f4a:	601a      	str	r2, [r3, #0]
		locSubGroup     = NVIC_Cfg[i].SubGroup_Priority;
 8000f4c:	4b34      	ldr	r3, [pc, #208]	; (8001020 <NVIC_Init+0x114>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4934      	ldr	r1, [pc, #208]	; (8001024 <NVIC_Init+0x118>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b33      	ldr	r3, [pc, #204]	; (8001030 <NVIC_Init+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]

		/* enable\disable based on user configuration */
		enRegOffset = (intNum/WORD_LENGTH_BITS)*WORD_LENGTH_BYTES;
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <NVIC_Init+0x11c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <NVIC_Init+0x128>)
 8000f6e:	6013      	str	r3, [r2, #0]
		enBitOffset = intNum%WORD_LENGTH_BITS;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <NVIC_Init+0x11c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <NVIC_Init+0x12c>)
 8000f7a:	6013      	str	r3, [r2, #0]

		GET_HWREG(NVIC_BASE_ADDRESS,enRegOffset) |= (1 << enBitOffset);
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <NVIC_Init+0x128>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <NVIC_Init+0x12c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4618      	mov	r0, r3
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <NVIC_Init+0x128>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f9e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	ea42 0300 	orr.w	r3, r2, r0
 8000fa8:	600b      	str	r3, [r1, #0]


#if NVIC_GROUPING_SYSTEM == NVIC_GROUPING_SYSTEM_XXX
			locGroupingField = locGroup;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <NVIC_Init+0x120>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <NVIC_Init+0x130>)
 8000fb0:	6013      	str	r3, [r2, #0]
     #error INVALID GROUPING SELECTION
#endif

			/* assign group\subgroup priority */

			priRegOffset = (intNum/4U)*WORD_LENGTH_BYTES;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <NVIC_Init+0x11c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <NVIC_Init+0x134>)
 8000fbc:	6013      	str	r3, [r2, #0]
			priBitOffset = 5 + (8 * (intNum%4U));
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <NVIC_Init+0x11c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	3305      	adds	r3, #5
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <NVIC_Init+0x138>)
 8000fcc:	6013      	str	r3, [r2, #0]
			GET_HWREG(NVIC_PRIORTY_BASE,priRegOffset) |= (locGroupingField << priBitOffset);
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <NVIC_Init+0x134>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fd6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <NVIC_Init+0x130>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <NVIC_Init+0x138>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <NVIC_Init+0x134>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fee:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	ea41 0302 	orr.w	r3, r1, r2
 8000ff8:	6003      	str	r3, [r0, #0]
for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <NVIC_Init+0x114>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <NVIC_Init+0x114>)
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <NVIC_Init+0x114>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d088      	beq.n	8000f1e <NVIC_Init+0x12>


	}
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed0c 	.word	0xe000ed0c
 800101c:	fa050400 	.word	0xfa050400
 8001020:	200001f8 	.word	0x200001f8
 8001024:	080013d4 	.word	0x080013d4
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200001f4 	.word	0x200001f4
 8001030:	200001fc 	.word	0x200001fc
 8001034:	20000200 	.word	0x20000200
 8001038:	20000204 	.word	0x20000204
 800103c:	20000208 	.word	0x20000208
 8001040:	2000020c 	.word	0x2000020c
 8001044:	20000210 	.word	0x20000210

08001048 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_Config.h"

/*								System Clocks								*/

void RCC_voidInitSystemClock(void){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
			RCC_CFGR |= 0x00000001;			/*Set Bits*/
			
			
	#elif RCC_SYSTEM_CLOCK == RCC_HSI_RC
		/* Enable HSI Clock*/
			RCC_CR |= 0x00000001;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <RCC_voidInitSystemClock+0x38>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <RCC_voidInitSystemClock+0x38>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]
		/* Check if HSI is ready*/
			while(!GET_BIT(RCC_CR,RCC_HSI_READY_BIT));
 8001058:	bf00      	nop
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <RCC_voidInitSystemClock+0x38>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	085b      	lsrs	r3, r3, #1
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f8      	beq.n	800105a <RCC_voidInitSystemClock+0x12>
		/*Set HSI as System Clock*/
			RCC_CFGR &= ~(0x00000003);	/*Clear Bits, Set HSI Mode*/
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <RCC_voidInitSystemClock+0x3c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <RCC_voidInitSystemClock+0x3c>)
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	6013      	str	r3, [r2, #0]
	#else
			#error("Wrong Clock Selected")
	
	#endif

}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40023808 	.word	0x40023808

08001088 <RCC_voidEnableCompClk>:

/*							Peripherals Clocks								*/
void RCC_voidEnableCompClk(u8 Copy_uint8Bus, u8 Copy_uint8PerID){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	if(Copy_uint8PerID <= 31){
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b1f      	cmp	r3, #31
 800109c:	d847      	bhi.n	800112e <RCC_voidEnableCompClk+0xa6>
		switch(Copy_uint8Bus){
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d843      	bhi.n	800112e <RCC_voidEnableCompClk+0xa6>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <RCC_voidEnableCompClk+0x24>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010c1 	.word	0x080010c1
 80010b0:	080010d7 	.word	0x080010d7
 80010b4:	080010ed 	.word	0x080010ed
 80010b8:	08001103 	.word	0x08001103
 80010bc:	08001119 	.word	0x08001119
			case RCC_AHB1:	SET_BIT(RCC_AHB1ENR,Copy_uint8PerID);	break;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <RCC_voidEnableCompClk+0xb4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4611      	mov	r1, r2
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <RCC_voidEnableCompClk+0xb4>)
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e02b      	b.n	800112e <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB2:	SET_BIT(RCC_AHB2ENR,Copy_uint8PerID);	break;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <RCC_voidEnableCompClk+0xb8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a16      	ldr	r2, [pc, #88]	; (8001140 <RCC_voidEnableCompClk+0xb8>)
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e020      	b.n	800112e <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB3:	SET_BIT(RCC_AHB3ENR,Copy_uint8PerID);	break;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <RCC_voidEnableCompClk+0xbc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <RCC_voidEnableCompClk+0xbc>)
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e015      	b.n	800112e <RCC_voidEnableCompClk+0xa6>
			case RCC_APB1:	SET_BIT(RCC_APB1ENR,Copy_uint8PerID);	break;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <RCC_voidEnableCompClk+0xc0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	79ba      	ldrb	r2, [r7, #6]
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	4611      	mov	r1, r2
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <RCC_voidEnableCompClk+0xc0>)
 8001112:	430b      	orrs	r3, r1
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00a      	b.n	800112e <RCC_voidEnableCompClk+0xa6>
			case RCC_APB2:	SET_BIT(RCC_APB2ENR,Copy_uint8PerID);	break;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <RCC_voidEnableCompClk+0xc4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	79ba      	ldrb	r2, [r7, #6]
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <RCC_voidEnableCompClk+0xc4>)
 8001128:	430b      	orrs	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	bf00      	nop
		}
	}
	else{
		/*Return Error*/
	}
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023830 	.word	0x40023830
 8001140:	40023834 	.word	0x40023834
 8001144:	40023838 	.word	0x40023838
 8001148:	40023840 	.word	0x40023840
 800114c:	40023844 	.word	0x40023844

08001150 <mSTK_StopTimer>:
{
	SET_BIT((STK->CTRL),ENABLEB);

}
void mSTK_StopTimer()
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	STK->VAL=0;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <mSTK_StopTimer+0x28>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
	STK->LOAD=0;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <mSTK_StopTimer+0x28>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
	CLR_BIT((STK->CTRL),ENABLEB);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <mSTK_StopTimer+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <mSTK_StopTimer+0x28>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <SysTick_Handler>:
{
	return ((STK->LOAD)-(STK->VAL));
}

void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

	Global_STK_Callback();
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <SysTick_Handler+0x24>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4798      	blx	r3
	if(single_flag==1)
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <SysTick_Handler+0x28>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d104      	bne.n	800119a <SysTick_Handler+0x1e>
	{
		single_flag=0;
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Handler+0x28>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
		mSTK_StopTimer();
 8001196:	f7ff ffdb 	bl	8001150 <mSTK_StopTimer>
	}

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214
 80011a4:	20000218 	.word	0x20000218

080011a8 <TIM3_IRQHandler>:
{
	Timer3_CallBack = ptr;
}

void TIM3_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	Timer3_CallBack();
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <TIM3_IRQHandler+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4798      	blx	r3
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000021c 	.word	0x2000021c

080011bc <USART1_IRQHandler>:
{
	USART1_CallBack = ptr;
}

void USART1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	USART1_CallBack();
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <USART1_IRQHandler+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4798      	blx	r3
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000220 	.word	0x20000220

080011d0 <USART3_IRQHandler>:
{
	USART3_CallBack = ptr;
}

void USART3_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	USART3_CallBack();
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <USART3_IRQHandler+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4798      	blx	r3
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000224 	.word	0x20000224

080011e4 <UART4_IRQHandler>:
{
	UART4_CallBack = ptr;
}

void UART4_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	UART4_CallBack();
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <UART4_IRQHandler+0x10>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4798      	blx	r3
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000228 	.word	0x20000228

080011f8 <UART5_IRQHandler>:
{
	UART5_CallBack = ptr;
}

void UART5_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	UART5_CallBack();
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <UART5_IRQHandler+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4798      	blx	r3
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000022c 	.word	0x2000022c

0800120c <USART6_IRQHandler>:
{
	USART6_CallBack = ptr;
}

void USART6_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	USART6_CallBack();
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <USART6_IRQHandler+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4798      	blx	r3
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000230 	.word	0x20000230

08001220 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream5_CallBack= ptr;
}
void DMA2_Stream5_IRQHandler()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	DMA2_Stream5_CallBack();
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <DMA2_Stream5_IRQHandler+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4798      	blx	r3

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000234 	.word	0x20000234

08001234 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream7_CallBack= ptr;
}
void DMA2_Stream7_IRQHandler()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	DMA2_Stream7_CallBack();
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <DMA2_Stream7_IRQHandler+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4798      	blx	r3
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000238 	.word	0x20000238

08001248 <main>:
#include "NVIC_interface.h"
#include "CAN_interface.h"


int main()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
	/*Initialize struct*/
	CAN_Init_t Initialize_struct;
	Initialize_struct.No_Of_Can1Filters = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	773b      	strb	r3, [r7, #28]
	Initialize_struct.Filter_Scale= Single_32_bit_scale;
 8001252:	2303      	movs	r3, #3
 8001254:	777b      	strb	r3, [r7, #29]
	Initialize_struct.No_Of_Filters_For_FIFO_ZERO =1;
 8001256:	2301      	movs	r3, #1
 8001258:	77fb      	strb	r3, [r7, #31]
	Initialize_struct.No_Of_Filters_In_List_Mode =1;
 800125a:	2301      	movs	r3, #1
 800125c:	77bb      	strb	r3, [r7, #30]

	RCC_voidInitSystemClock();
 800125e:	f7ff fef3 	bl	8001048 <RCC_voidInitSystemClock>
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_CAN1);
 8001262:	2119      	movs	r1, #25
 8001264:	2004      	movs	r0, #4
 8001266:	f7ff ff0f 	bl	8001088 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOA);
 800126a:	2100      	movs	r1, #0
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ff0b 	bl	8001088 <RCC_voidEnableCompClk>
	NVIC_Init();
 8001272:	f7ff fe4b 	bl	8000f0c <NVIC_Init>

	/*LED test pin*/
	GPIO_voidSetPinDirection(GPIOA,0,OUTPUT_PUSH_PULL_NO_PUPD_FAST_SPEED);
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fc1c 	bl	8000ab8 <GPIO_voidSetPinDirection>


	/*Enable CAN1 Rx pin*/
	GPIO_voidSetPinDirection(GPIOA,11,ALTERNATING_FUNCTION_OPEN_DRAIN_WITH_PU_MEDIUM_SPEED);
 8001280:	2255      	movs	r2, #85	; 0x55
 8001282:	210b      	movs	r1, #11
 8001284:	2002      	movs	r0, #2
 8001286:	f7ff fc17 	bl	8000ab8 <GPIO_voidSetPinDirection>
	/*Enable CAN1 Tx pin*/
	GPIO_voidSetPinDirection(GPIOA,12,ALTERNATING_FUNCTION_PUSH_PULL_WITH_PU_MEDIUM_SPEED);
 800128a:	2245      	movs	r2, #69	; 0x45
 800128c:	210c      	movs	r1, #12
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff fc12 	bl	8000ab8 <GPIO_voidSetPinDirection>
	/*Set alternating function*/
	GPIO_voidSetAlternatingFunction(GPIOA,11,AF9);
 8001294:	2209      	movs	r2, #9
 8001296:	210b      	movs	r1, #11
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff fdad 	bl	8000df8 <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOA,12,AF9);
 800129e:	2209      	movs	r2, #9
 80012a0:	210c      	movs	r1, #12
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff fda8 	bl	8000df8 <GPIO_voidSetAlternatingFunction>

	/*Initialize CAN1*/
	CAN_voidInitialize(&Initialize_struct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffa9 	bl	8000204 <CAN_voidInitialize>
	CAN_Filter_Header_TypeDef array[1]={filter_t};
	CAN_Filters_Init(array,1); */

	/*Transmit struct*/
	CAN_frame_t message;
	message.DataLength = Two_Bytes;
 80012b2:	2302      	movs	r3, #2
 80012b4:	757b      	strb	r3, [r7, #21]
	message.FrameType=Data_frame;
 80012b6:	2300      	movs	r3, #0
 80012b8:	753b      	strb	r3, [r7, #20]
	message.ID_Type=Standarad_ID;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75bb      	strb	r3, [r7, #22]
	message.ID= 0x600;
 80012be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c2:	61bb      	str	r3, [r7, #24]

	u8 message_arr[]= {'a','b'};
 80012c4:	f246 2361 	movw	r3, #25185	; 0x6261
 80012c8:	823b      	strh	r3, [r7, #16]

	/*Received data struct*/
	CAN_Receive_t received_data;
	CAN_voidTransmit(&message, message_arr);
 80012ca:	f107 0210 	add.w	r2, r7, #16
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8b5 	bl	8000444 <CAN_voidTransmit>
	while(1)
	{

		CAN_voidReceive(&received_data);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fabf 	bl	8000860 <CAN_voidReceive>
        if( (u8)(received_data.Message[0]) ==  (u8) 'a' )
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b61      	cmp	r3, #97	; 0x61
 80012e6:	d1f8      	bne.n	80012da <main+0x92>
		{
        	if( (received_data.Message[1]) == (u8) 'b' )
 80012e8:	7a3b      	ldrb	r3, [r7, #8]
 80012ea:	2b62      	cmp	r3, #98	; 0x62
 80012ec:	d1f5      	bne.n	80012da <main+0x92>
			{
        		GPIO_voidSetPinValue(GPIOA,0,GPIO_HIGH);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2100      	movs	r1, #0
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fd38 	bl	8000d68 <GPIO_voidSetPinValue>
		CAN_voidReceive(&received_data);
 80012f8:	e7ef      	b.n	80012da <main+0x92>
	...

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopFillZerobss+0x26>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffd7 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f000 f811 	bl	8001374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff ff79 	bl	8001248 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8001364:	080013e0 	.word	0x080013e0
  ldr r2, =_sbss
 8001368:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 800136c:	2000023c 	.word	0x2000023c

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <__libc_init_array>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4d0d      	ldr	r5, [pc, #52]	; (80013ac <__libc_init_array+0x38>)
 8001378:	4c0d      	ldr	r4, [pc, #52]	; (80013b0 <__libc_init_array+0x3c>)
 800137a:	1b64      	subs	r4, r4, r5
 800137c:	10a4      	asrs	r4, r4, #2
 800137e:	2600      	movs	r6, #0
 8001380:	42a6      	cmp	r6, r4
 8001382:	d109      	bne.n	8001398 <__libc_init_array+0x24>
 8001384:	4d0b      	ldr	r5, [pc, #44]	; (80013b4 <__libc_init_array+0x40>)
 8001386:	4c0c      	ldr	r4, [pc, #48]	; (80013b8 <__libc_init_array+0x44>)
 8001388:	f000 f818 	bl	80013bc <_init>
 800138c:	1b64      	subs	r4, r4, r5
 800138e:	10a4      	asrs	r4, r4, #2
 8001390:	2600      	movs	r6, #0
 8001392:	42a6      	cmp	r6, r4
 8001394:	d105      	bne.n	80013a2 <__libc_init_array+0x2e>
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f855 3b04 	ldr.w	r3, [r5], #4
 800139c:	4798      	blx	r3
 800139e:	3601      	adds	r6, #1
 80013a0:	e7ee      	b.n	8001380 <__libc_init_array+0xc>
 80013a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a6:	4798      	blx	r3
 80013a8:	3601      	adds	r6, #1
 80013aa:	e7f2      	b.n	8001392 <__libc_init_array+0x1e>
 80013ac:	080013d8 	.word	0x080013d8
 80013b0:	080013d8 	.word	0x080013d8
 80013b4:	080013d8 	.word	0x080013d8
 80013b8:	080013dc 	.word	0x080013dc

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr

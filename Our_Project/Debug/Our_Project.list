
Our_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080023cc  080023cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d0  080023d0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080023d0  080023d0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023d0  080023d0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023d4  080023d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080023d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000030  08002404  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002404  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036b7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ccc  00000000  00000000  00023713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000243e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a59  00000000  00000000  00024c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c4d  00000000  00000000  00026659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7032  00000000  00000000  000292a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f02d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fd8  00000000  00000000  000f0328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000030 	.word	0x20000030
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080023b4 	.word	0x080023b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000034 	.word	0x20000034
 8000204:	080023b4 	.word	0x080023b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	if(Global_pvEXTI0NotificationFunction != 0)
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <EXTI0_IRQHandler+0x18>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <EXTI0_IRQHandler+0x12>
	{
		Global_pvEXTI0NotificationFunction();
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <EXTI0_IRQHandler+0x18>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4798      	blx	r3
	else
	{
		/* Do Nothing*/
	}

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000004c 	.word	0x2000004c

080009c0 <GPIO_voidSetPinDirection>:
#include "BIT_MATH.h"
#include "GPIO_interface.h"
#include "GPIO_private.h"

void GPIO_voidSetPinDirection(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_PinMode)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	460b      	mov	r3, r1
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	4613      	mov	r3, r2
 80009d0:	717b      	strb	r3, [r7, #5]
	 * bits [5,6]: for pin mode (either I/P or O/P or AF)
	 * bit   [4] : for output type (either PP or OD)
	 * bits [2,3]: for pin output speed
	 * bits [0,1]: for pull up and pull down
	 */
	u8 Local_u8Mode= (Copy_PinMode >> 5);
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8OutputType= GET_BIT(Copy_PinMode,4);
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8Speed= (Copy_PinMode>>2) & 0b11;
 80009e4:	797b      	ldrb	r3, [r7, #5]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	737b      	strb	r3, [r7, #13]
	u8 Local_u8PUPD= (Copy_PinMode) & 0b11;
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	733b      	strb	r3, [r7, #12]

	switch(Copy_u8Port)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3b02      	subs	r3, #2
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	f200 81ed 	bhi.w	8000ddc <GPIO_voidSetPinDirection+0x41c>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <GPIO_voidSetPinDirection+0x48>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a1d 	.word	0x08000a1d
 8000a0c:	08000ad3 	.word	0x08000ad3
 8000a10:	08000b89 	.word	0x08000b89
 8000a14:	08000c71 	.word	0x08000c71
 8000a18:	08000d27 	.word	0x08000d27
		{
		/* If port A is chosen */
			case GPIOA:
				/*Clear the two corresponding bits of the pin in GPIO port A mode register */
				GPIOA_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000a1c:	4b88      	ldr	r3, [pc, #544]	; (8000c40 <GPIO_voidSetPinDirection+0x280>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	79ba      	ldrb	r2, [r7, #6]
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	2103      	movs	r1, #3
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	43d2      	mvns	r2, r2
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4a84      	ldr	r2, [pc, #528]	; (8000c40 <GPIO_voidSetPinDirection+0x280>)
 8000a30:	400b      	ands	r3, r1
 8000a32:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port A mode register */
				GPIOA_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000a34:	4b82      	ldr	r3, [pc, #520]	; (8000c40 <GPIO_voidSetPinDirection+0x280>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	7bf9      	ldrb	r1, [r7, #15]
 8000a3a:	79ba      	ldrb	r2, [r7, #6]
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	4611      	mov	r1, r2
 8000a44:	4a7e      	ldr	r2, [pc, #504]	; (8000c40 <GPIO_voidSetPinDirection+0x280>)
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6013      	str	r3, [r2, #0]

				/*Clear the corresponding bit of the pin in GPIO port A output type register */
				CLR_BIT(GPIOA_OTYPER,Copy_u8Pin);
 8000a4a:	4b7e      	ldr	r3, [pc, #504]	; (8000c44 <GPIO_voidSetPinDirection+0x284>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	43d2      	mvns	r2, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a7a      	ldr	r2, [pc, #488]	; (8000c44 <GPIO_voidSetPinDirection+0x284>)
 8000a5c:	400b      	ands	r3, r1
 8000a5e:	6013      	str	r3, [r2, #0]
				/*Set the value of the corresponding bit of the pin in GPIO port A output type register */
				GPIOA_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000a60:	4b78      	ldr	r3, [pc, #480]	; (8000c44 <GPIO_voidSetPinDirection+0x284>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	7bb9      	ldrb	r1, [r7, #14]
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a75      	ldr	r2, [pc, #468]	; (8000c44 <GPIO_voidSetPinDirection+0x284>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]

				/*Clear the two corresponding bits of the pin in GPIO port A output speed register */
				GPIOA_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000a74:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <GPIO_voidSetPinDirection+0x288>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a70      	ldr	r2, [pc, #448]	; (8000c48 <GPIO_voidSetPinDirection+0x288>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port A output speed register */
				GPIOA_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000a8c:	4b6e      	ldr	r3, [pc, #440]	; (8000c48 <GPIO_voidSetPinDirection+0x288>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	7b79      	ldrb	r1, [r7, #13]
 8000a92:	79ba      	ldrb	r2, [r7, #6]
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a6a      	ldr	r2, [pc, #424]	; (8000c48 <GPIO_voidSetPinDirection+0x288>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]

				/*Clear the two corresponding bits of the pin in GPIO port A pull-up/pull-down register */
				GPIOA_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000aa2:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <GPIO_voidSetPinDirection+0x28c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	2103      	movs	r1, #3
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4a65      	ldr	r2, [pc, #404]	; (8000c4c <GPIO_voidSetPinDirection+0x28c>)
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port A pull-up/pull-down register */
				GPIOA_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <GPIO_voidSetPinDirection+0x28c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	7b39      	ldrb	r1, [r7, #12]
 8000ac0:	79ba      	ldrb	r2, [r7, #6]
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a60      	ldr	r2, [pc, #384]	; (8000c4c <GPIO_voidSetPinDirection+0x28c>)
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]

				break;
 8000ad0:	e185      	b.n	8000dde <GPIO_voidSetPinDirection+0x41e>


		/* If port B is chosen */
		    case GPIOB:
                /*Clear the two corresponding bits of the pin in GPIO port B mode register */
                GPIOB_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000ad2:	4b5f      	ldr	r3, [pc, #380]	; (8000c50 <GPIO_voidSetPinDirection+0x290>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	79ba      	ldrb	r2, [r7, #6]
 8000ad8:	0052      	lsls	r2, r2, #1
 8000ada:	2103      	movs	r1, #3
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a5a      	ldr	r2, [pc, #360]	; (8000c50 <GPIO_voidSetPinDirection+0x290>)
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port B mode register */
		    	GPIOB_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000aea:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <GPIO_voidSetPinDirection+0x290>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	7bf9      	ldrb	r1, [r7, #15]
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <GPIO_voidSetPinDirection+0x290>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6013      	str	r3, [r2, #0]

		    	/*Clear the corresponding bit of the pin in GPIO port B output type register */
		    	CLR_BIT(GPIOB_OTYPER,Copy_u8Pin);
 8000b00:	4b54      	ldr	r3, [pc, #336]	; (8000c54 <GPIO_voidSetPinDirection+0x294>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	43d2      	mvns	r2, r2
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4a50      	ldr	r2, [pc, #320]	; (8000c54 <GPIO_voidSetPinDirection+0x294>)
 8000b12:	400b      	ands	r3, r1
 8000b14:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the corresponding bit of the pin in GPIO port B output type register */
		    	GPIOB_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <GPIO_voidSetPinDirection+0x294>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	7bb9      	ldrb	r1, [r7, #14]
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a4b      	ldr	r2, [pc, #300]	; (8000c54 <GPIO_voidSetPinDirection+0x294>)
 8000b26:	430b      	orrs	r3, r1
 8000b28:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port B output speed register */
		    	GPIOB_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b2a:	4b4b      	ldr	r3, [pc, #300]	; (8000c58 <GPIO_voidSetPinDirection+0x298>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	0052      	lsls	r2, r2, #1
 8000b32:	2103      	movs	r1, #3
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	43d2      	mvns	r2, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <GPIO_voidSetPinDirection+0x298>)
 8000b3e:	400b      	ands	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port B output speed register */
		    	GPIOB_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000b42:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <GPIO_voidSetPinDirection+0x298>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	7b79      	ldrb	r1, [r7, #13]
 8000b48:	79ba      	ldrb	r2, [r7, #6]
 8000b4a:	0052      	lsls	r2, r2, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	4611      	mov	r1, r2
 8000b52:	4a41      	ldr	r2, [pc, #260]	; (8000c58 <GPIO_voidSetPinDirection+0x298>)
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port B pull-up/pull-down register */
		    	GPIOB_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <GPIO_voidSetPinDirection+0x29c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	0052      	lsls	r2, r2, #1
 8000b60:	2103      	movs	r1, #3
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	43d2      	mvns	r2, r2
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4a3c      	ldr	r2, [pc, #240]	; (8000c5c <GPIO_voidSetPinDirection+0x29c>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port B pull-up/pull-down register */
		    	GPIOB_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000b70:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <GPIO_voidSetPinDirection+0x29c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	7b39      	ldrb	r1, [r7, #12]
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	0052      	lsls	r2, r2, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <GPIO_voidSetPinDirection+0x29c>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	6013      	str	r3, [r2, #0]

		    	break;
 8000b86:	e12a      	b.n	8000dde <GPIO_voidSetPinDirection+0x41e>


		/* If port C is chosen */
		    case GPIOC:
		    	/*Clear the two corresponding bits of the pin in GPIO port C mode register */
		    	GPIOC_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000b88:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <GPIO_voidSetPinDirection+0x2a0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f202 	lsl.w	r2, r1, r2
 8000b96:	43d2      	mvns	r2, r2
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <GPIO_voidSetPinDirection+0x2a0>)
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port C mode register */
		    	GPIOC_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <GPIO_voidSetPinDirection+0x2a0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	7bf9      	ldrb	r1, [r7, #15]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	0052      	lsls	r2, r2, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <GPIO_voidSetPinDirection+0x2a0>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]

		    	/*Clear the corresponding bit of the pin in GPIO port C output type register */
		    	CLR_BIT(GPIOC_OTYPER,Copy_u8Pin);
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <GPIO_voidSetPinDirection+0x2a4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	79ba      	ldrb	r2, [r7, #6]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	43d2      	mvns	r2, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <GPIO_voidSetPinDirection+0x2a4>)
 8000bc8:	400b      	ands	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the corresponding bit of the pin in GPIO port C output type register */
		    	GPIOC_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <GPIO_voidSetPinDirection+0x2a4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	7bb9      	ldrb	r1, [r7, #14]
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <GPIO_voidSetPinDirection+0x2a4>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port C output speed register */
		    	GPIOC_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <GPIO_voidSetPinDirection+0x2a8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	79ba      	ldrb	r2, [r7, #6]
 8000be6:	0052      	lsls	r2, r2, #1
 8000be8:	2103      	movs	r1, #3
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	43d2      	mvns	r2, r2
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <GPIO_voidSetPinDirection+0x2a8>)
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port C output speed register */
		    	GPIOC_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <GPIO_voidSetPinDirection+0x2a8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	7b79      	ldrb	r1, [r7, #13]
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <GPIO_voidSetPinDirection+0x2a8>)
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port C pull-up/pull-down register */
		    	GPIOC_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <GPIO_voidSetPinDirection+0x2ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	0052      	lsls	r2, r2, #1
 8000c16:	2103      	movs	r1, #3
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <GPIO_voidSetPinDirection+0x2ac>)
 8000c22:	400b      	ands	r3, r1
 8000c24:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port C pull-up/pull-down register */
		    	GPIOC_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <GPIO_voidSetPinDirection+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	7b39      	ldrb	r1, [r7, #12]
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	fa01 f202 	lsl.w	r2, r1, r2
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <GPIO_voidSetPinDirection+0x2ac>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6013      	str	r3, [r2, #0]

		    	break;
 8000c3c:	e0cf      	b.n	8000dde <GPIO_voidSetPinDirection+0x41e>
 8000c3e:	bf00      	nop
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020004 	.word	0x40020004
 8000c48:	40020008 	.word	0x40020008
 8000c4c:	4002000c 	.word	0x4002000c
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020404 	.word	0x40020404
 8000c58:	40020408 	.word	0x40020408
 8000c5c:	4002040c 	.word	0x4002040c
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020804 	.word	0x40020804
 8000c68:	40020808 	.word	0x40020808
 8000c6c:	4002080c 	.word	0x4002080c


		 /* If port D is chosen */
		    case GPIOD:
		    	/*Clear the two corresponding bits of the pin in GPIO port D mode register */
		    	GPIOD_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000c70:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <GPIO_voidSetPinDirection+0x42c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	79ba      	ldrb	r2, [r7, #6]
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	2103      	movs	r1, #3
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	43d2      	mvns	r2, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a5a      	ldr	r2, [pc, #360]	; (8000dec <GPIO_voidSetPinDirection+0x42c>)
 8000c84:	400b      	ands	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port D mode register */
		    	GPIOD_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000c88:	4b58      	ldr	r3, [pc, #352]	; (8000dec <GPIO_voidSetPinDirection+0x42c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	7bf9      	ldrb	r1, [r7, #15]
 8000c8e:	79ba      	ldrb	r2, [r7, #6]
 8000c90:	0052      	lsls	r2, r2, #1
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	4611      	mov	r1, r2
 8000c98:	4a54      	ldr	r2, [pc, #336]	; (8000dec <GPIO_voidSetPinDirection+0x42c>)
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6013      	str	r3, [r2, #0]

		    	/*Clear the corresponding bit of the pin in GPIO port D output type register */
		    	CLR_BIT(GPIOD_OTYPER,Copy_u8Pin);
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <GPIO_voidSetPinDirection+0x430>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	43d2      	mvns	r2, r2
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a50      	ldr	r2, [pc, #320]	; (8000df0 <GPIO_voidSetPinDirection+0x430>)
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the corresponding bit of the pin in GPIO port D output type register */
		    	GPIOD_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000cb4:	4b4e      	ldr	r3, [pc, #312]	; (8000df0 <GPIO_voidSetPinDirection+0x430>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	7bb9      	ldrb	r1, [r7, #14]
 8000cba:	79ba      	ldrb	r2, [r7, #6]
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <GPIO_voidSetPinDirection+0x430>)
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port D output speed register */
		    	GPIOD_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <GPIO_voidSetPinDirection+0x434>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	79ba      	ldrb	r2, [r7, #6]
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	43d2      	mvns	r2, r2
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <GPIO_voidSetPinDirection+0x434>)
 8000cdc:	400b      	ands	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port D output speed register */
		    	GPIOD_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <GPIO_voidSetPinDirection+0x434>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	7b79      	ldrb	r1, [r7, #13]
 8000ce6:	79ba      	ldrb	r2, [r7, #6]
 8000ce8:	0052      	lsls	r2, r2, #1
 8000cea:	fa01 f202 	lsl.w	r2, r1, r2
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4a40      	ldr	r2, [pc, #256]	; (8000df4 <GPIO_voidSetPinDirection+0x434>)
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	6013      	str	r3, [r2, #0]

		    	/*Clear the two corresponding bits of the pin in GPIO port D pull-up/pull-down register */
		    	GPIOD_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <GPIO_voidSetPinDirection+0x438>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	79ba      	ldrb	r2, [r7, #6]
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	2103      	movs	r1, #3
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <GPIO_voidSetPinDirection+0x438>)
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
		    	/*Set the value of the two corresponding bits of the pin in GPIO port D pull-up/pull-down register */
		    	GPIOD_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <GPIO_voidSetPinDirection+0x438>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	7b39      	ldrb	r1, [r7, #12]
 8000d14:	79ba      	ldrb	r2, [r7, #6]
 8000d16:	0052      	lsls	r2, r2, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <GPIO_voidSetPinDirection+0x438>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6013      	str	r3, [r2, #0]

		    	break;
 8000d24:	e05b      	b.n	8000dde <GPIO_voidSetPinDirection+0x41e>


		  /* If port H is chosen */
			case GPIOH:
				/*Clear the two corresponding bits of the pin in GPIO port H mode register */
				GPIOH_MODER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <GPIO_voidSetPinDirection+0x43c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	79ba      	ldrb	r2, [r7, #6]
 8000d2c:	0052      	lsls	r2, r2, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <GPIO_voidSetPinDirection+0x43c>)
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port H mode register */
				GPIOH_MODER |=  ( (Local_u8Mode) << (Copy_u8Pin*2) );
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <GPIO_voidSetPinDirection+0x43c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	7bf9      	ldrb	r1, [r7, #15]
 8000d44:	79ba      	ldrb	r2, [r7, #6]
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <GPIO_voidSetPinDirection+0x43c>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]

				/*Clear the corresponding bit of the pin in GPIO port H output type register */
				CLR_BIT(GPIOH_OTYPER,Copy_u8Pin);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <GPIO_voidSetPinDirection+0x440>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	79ba      	ldrb	r2, [r7, #6]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	4611      	mov	r1, r2
 8000d64:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <GPIO_voidSetPinDirection+0x440>)
 8000d66:	400b      	ands	r3, r1
 8000d68:	6013      	str	r3, [r2, #0]
				/*Set the value of the corresponding bit of the pin in GPIO port H output type register */
				GPIOH_OTYPER |= ( (Local_u8OutputType) << (Copy_u8Pin) );
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <GPIO_voidSetPinDirection+0x440>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	7bb9      	ldrb	r1, [r7, #14]
 8000d70:	79ba      	ldrb	r2, [r7, #6]
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	4611      	mov	r1, r2
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <GPIO_voidSetPinDirection+0x440>)
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	6013      	str	r3, [r2, #0]

				/*Clear the two corresponding bits of the pin in GPIO port H output speed register */
				GPIOH_OSPEEDER &= ~( 0b11 << (Copy_u8Pin*2) );
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <GPIO_voidSetPinDirection+0x444>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	79ba      	ldrb	r2, [r7, #6]
 8000d84:	0052      	lsls	r2, r2, #1
 8000d86:	2103      	movs	r1, #3
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <GPIO_voidSetPinDirection+0x444>)
 8000d92:	400b      	ands	r3, r1
 8000d94:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port H output speed register */
				GPIOH_OSPEEDER |= ( (Local_u8Speed) << (Copy_u8Pin*2));
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <GPIO_voidSetPinDirection+0x444>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	7b79      	ldrb	r1, [r7, #13]
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <GPIO_voidSetPinDirection+0x444>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]

				/*Clear the two corresponding bits of the pin in GPIO port H pull-up/pull-down register */
				GPIOH_PUPDR &= ~( 0b11 << (Copy_u8Pin*2) );
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <GPIO_voidSetPinDirection+0x448>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	0052      	lsls	r2, r2, #1
 8000db4:	2103      	movs	r1, #3
 8000db6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dba:	43d2      	mvns	r2, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <GPIO_voidSetPinDirection+0x448>)
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	6013      	str	r3, [r2, #0]
				/*Set the value of the two corresponding bits of the pin in GPIO port H pull-up/pull-down register */
				GPIOH_PUPDR |= ( (Local_u8PUPD) << (Copy_u8Pin*2));
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <GPIO_voidSetPinDirection+0x448>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	7b39      	ldrb	r1, [r7, #12]
 8000dca:	79ba      	ldrb	r2, [r7, #6]
 8000dcc:	0052      	lsls	r2, r2, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <GPIO_voidSetPinDirection+0x448>)
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6013      	str	r3, [r2, #0]

				break;
 8000dda:	e000      	b.n	8000dde <GPIO_voidSetPinDirection+0x41e>

		    default:
		    	break;
 8000ddc:	bf00      	nop
		}
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40020c04 	.word	0x40020c04
 8000df4:	40020c08 	.word	0x40020c08
 8000df8:	40020c0c 	.word	0x40020c0c
 8000dfc:	40021c00 	.word	0x40021c00
 8000e00:	40021c04 	.word	0x40021c04
 8000e04:	40021c08 	.word	0x40021c08
 8000e08:	40021c0c 	.word	0x40021c0c

08000e0c <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8PinValue)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]
	/* In GPIOx_BSRR register:
	 *  bits (0 to 15) are for atomic set
	 *  bits (16 to 31) are for atomic reset */
	if(Copy_u8PinValue == GPIO_LOW)
 8000e1e:	797b      	ldrb	r3, [r7, #5]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <GPIO_voidSetPinValue+0x1e>
		{
			Copy_u8Pin += 16;
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	3310      	adds	r3, #16
 8000e28:	71bb      	strb	r3, [r7, #6]
		}

	switch(Copy_u8Port)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d843      	bhi.n	8000eba <GPIO_voidSetPinValue+0xae>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <GPIO_voidSetPinValue+0x2c>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e63 	.word	0x08000e63
 8000e40:	08000e79 	.word	0x08000e79
 8000e44:	08000e8f 	.word	0x08000e8f
 8000e48:	08000ea5 	.word	0x08000ea5
		{
		/* If port A is chosen */
			case GPIOA:
				SET_BIT(GPIOA_BSRR,Copy_u8Pin);
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <GPIO_voidSetPinValue+0xbc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	79ba      	ldrb	r2, [r7, #6]
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <GPIO_voidSetPinValue+0xbc>)
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
				break;
 8000e60:	e02c      	b.n	8000ebc <GPIO_voidSetPinValue+0xb0>
		/* If port B is chosen */
		    case GPIOB:
		    	SET_BIT(GPIOB_BSRR,Copy_u8Pin);
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <GPIO_voidSetPinValue+0xc0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	79ba      	ldrb	r2, [r7, #6]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <GPIO_voidSetPinValue+0xc0>)
 8000e72:	430b      	orrs	r3, r1
 8000e74:	6013      	str	r3, [r2, #0]
		    	break;
 8000e76:	e021      	b.n	8000ebc <GPIO_voidSetPinValue+0xb0>
		/* If port C is chosen */
		    case GPIOC:
		    	SET_BIT(GPIOC_BSRR,Copy_u8Pin);
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <GPIO_voidSetPinValue+0xc4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	4611      	mov	r1, r2
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <GPIO_voidSetPinValue+0xc4>)
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
		    	break;
 8000e8c:	e016      	b.n	8000ebc <GPIO_voidSetPinValue+0xb0>
		/* If port D is chosen */
		    case GPIOD:
		    	SET_BIT(GPIOD_BSRR,Copy_u8Pin);
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <GPIO_voidSetPinValue+0xc8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79ba      	ldrb	r2, [r7, #6]
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <GPIO_voidSetPinValue+0xc8>)
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	6013      	str	r3, [r2, #0]
		    	break;
 8000ea2:	e00b      	b.n	8000ebc <GPIO_voidSetPinValue+0xb0>
		/* If port H is chosen */
		    case GPIOH:
		    	SET_BIT(GPIOH_BSRR,Copy_u8Pin);
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <GPIO_voidSetPinValue+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	79ba      	ldrb	r2, [r7, #6]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <GPIO_voidSetPinValue+0xcc>)
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6013      	str	r3, [r2, #0]
		    	break;
 8000eb8:	e000      	b.n	8000ebc <GPIO_voidSetPinValue+0xb0>

		    default:
		   		break;
 8000eba:	bf00      	nop
		}
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40020018 	.word	0x40020018
 8000ecc:	40020418 	.word	0x40020418
 8000ed0:	40020818 	.word	0x40020818
 8000ed4:	40020c18 	.word	0x40020c18
 8000ed8:	40021c18 	.word	0x40021c18

08000edc <GPIO_voidSetAlternatingFunction>:
		}
}


void GPIO_voidSetAlternatingFunction(GPIO_enum Copy_u8Port, GPIO_enum Copy_u8Pin, GPIO_enum Copy_u8Peripheral)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3b02      	subs	r3, #2
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	f200 80aa 	bhi.w	800104c <GPIO_voidSetAlternatingFunction+0x170>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <GPIO_voidSetAlternatingFunction+0x24>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f15 	.word	0x08000f15
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f93 	.word	0x08000f93
 8000f0c:	08000fd1 	.word	0x08000fd1
 8000f10:	0800100f 	.word	0x0800100f
	{
		case GPIOA:
			if(Copy_u8Pin <= 7)
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d80b      	bhi.n	8000f32 <GPIO_voidSetAlternatingFunction+0x56>
			{
				GPIOA_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <GPIO_voidSetAlternatingFunction+0x194>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7979      	ldrb	r1, [r7, #5]
 8000f20:	79ba      	ldrb	r2, [r7, #6]
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a51      	ldr	r2, [pc, #324]	; (8001070 <GPIO_voidSetAlternatingFunction+0x194>)
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6013      	str	r3, [r2, #0]
			}
			else if (Copy_u8Pin >= 8)
			{
				GPIOA_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
 8000f30:	e08e      	b.n	8001050 <GPIO_voidSetAlternatingFunction+0x174>
			else if (Copy_u8Pin >= 8)
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	f240 808b 	bls.w	8001050 <GPIO_voidSetAlternatingFunction+0x174>
				GPIOA_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000f3a:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <GPIO_voidSetAlternatingFunction+0x198>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	7979      	ldrb	r1, [r7, #5]
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	3a08      	subs	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <GPIO_voidSetAlternatingFunction+0x198>)
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	6013      	str	r3, [r2, #0]
			break;
 8000f52:	e07d      	b.n	8001050 <GPIO_voidSetAlternatingFunction+0x174>
		case GPIOB:
			if(Copy_u8Pin <= 7)
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d80b      	bhi.n	8000f72 <GPIO_voidSetAlternatingFunction+0x96>
			{
				GPIOB_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <GPIO_voidSetAlternatingFunction+0x19c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	7979      	ldrb	r1, [r7, #5]
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <GPIO_voidSetAlternatingFunction+0x19c>)
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6013      	str	r3, [r2, #0]
			}
			else if (Copy_u8Pin >= 8)
			{
				GPIOB_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
 8000f70:	e070      	b.n	8001054 <GPIO_voidSetAlternatingFunction+0x178>
			else if (Copy_u8Pin >= 8)
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	d96d      	bls.n	8001054 <GPIO_voidSetAlternatingFunction+0x178>
				GPIOB_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <GPIO_voidSetAlternatingFunction+0x1a0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	7979      	ldrb	r1, [r7, #5]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	3a08      	subs	r2, #8
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4a3c      	ldr	r2, [pc, #240]	; (800107c <GPIO_voidSetAlternatingFunction+0x1a0>)
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6013      	str	r3, [r2, #0]
			break;
 8000f90:	e060      	b.n	8001054 <GPIO_voidSetAlternatingFunction+0x178>
		case GPIOC:
			if(Copy_u8Pin <= 7)
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	d80b      	bhi.n	8000fb0 <GPIO_voidSetAlternatingFunction+0xd4>
			{
				GPIOC_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <GPIO_voidSetAlternatingFunction+0x1a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7979      	ldrb	r1, [r7, #5]
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <GPIO_voidSetAlternatingFunction+0x1a4>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]
			}
			else if (Copy_u8Pin >= 8)
			{
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
 8000fae:	e053      	b.n	8001058 <GPIO_voidSetAlternatingFunction+0x17c>
			else if (Copy_u8Pin >= 8)
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d950      	bls.n	8001058 <GPIO_voidSetAlternatingFunction+0x17c>
				GPIOC_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <GPIO_voidSetAlternatingFunction+0x1a8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	7979      	ldrb	r1, [r7, #5]
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	3a08      	subs	r2, #8
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	; (8001084 <GPIO_voidSetAlternatingFunction+0x1a8>)
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	6013      	str	r3, [r2, #0]
			break;
 8000fce:	e043      	b.n	8001058 <GPIO_voidSetAlternatingFunction+0x17c>
		case GPIOD:
			if(Copy_u8Pin <= 7)
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	d80b      	bhi.n	8000fee <GPIO_voidSetAlternatingFunction+0x112>
			{
				GPIOD_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <GPIO_voidSetAlternatingFunction+0x1ac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	7979      	ldrb	r1, [r7, #5]
 8000fdc:	79ba      	ldrb	r2, [r7, #6]
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a28      	ldr	r2, [pc, #160]	; (8001088 <GPIO_voidSetAlternatingFunction+0x1ac>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6013      	str	r3, [r2, #0]
			}
			else if (Copy_u8Pin >= 8)
			{
				GPIOD_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
 8000fec:	e036      	b.n	800105c <GPIO_voidSetAlternatingFunction+0x180>
			else if (Copy_u8Pin >= 8)
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	d933      	bls.n	800105c <GPIO_voidSetAlternatingFunction+0x180>
				GPIOD_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <GPIO_voidSetAlternatingFunction+0x1b0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	7979      	ldrb	r1, [r7, #5]
 8000ffa:	79ba      	ldrb	r2, [r7, #6]
 8000ffc:	3a08      	subs	r2, #8
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4611      	mov	r1, r2
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <GPIO_voidSetAlternatingFunction+0x1b0>)
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
			break;
 800100c:	e026      	b.n	800105c <GPIO_voidSetAlternatingFunction+0x180>
		case GPIOH:
			if(Copy_u8Pin <= 7)
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	2b07      	cmp	r3, #7
 8001012:	d80b      	bhi.n	800102c <GPIO_voidSetAlternatingFunction+0x150>
			{
				GPIOH_AFRL |= Copy_u8Peripheral << (Copy_u8Pin *4) ;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <GPIO_voidSetAlternatingFunction+0x1b4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	7979      	ldrb	r1, [r7, #5]
 800101a:	79ba      	ldrb	r2, [r7, #6]
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4611      	mov	r1, r2
 8001024:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <GPIO_voidSetAlternatingFunction+0x1b4>)
 8001026:	430b      	orrs	r3, r1
 8001028:	6013      	str	r3, [r2, #0]
			}
			else if (Copy_u8Pin >= 8)
			{
				GPIOH_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
			}
			break;
 800102a:	e019      	b.n	8001060 <GPIO_voidSetAlternatingFunction+0x184>
			else if (Copy_u8Pin >= 8)
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d916      	bls.n	8001060 <GPIO_voidSetAlternatingFunction+0x184>
				GPIOH_AFRH |= Copy_u8Peripheral << ((Copy_u8Pin - 8) *4) ;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <GPIO_voidSetAlternatingFunction+0x1b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7979      	ldrb	r1, [r7, #5]
 8001038:	79ba      	ldrb	r2, [r7, #6]
 800103a:	3a08      	subs	r2, #8
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	4611      	mov	r1, r2
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <GPIO_voidSetAlternatingFunction+0x1b8>)
 8001046:	430b      	orrs	r3, r1
 8001048:	6013      	str	r3, [r2, #0]
			break;
 800104a:	e009      	b.n	8001060 <GPIO_voidSetAlternatingFunction+0x184>

		default:
			break;
 800104c:	bf00      	nop
 800104e:	e008      	b.n	8001062 <GPIO_voidSetAlternatingFunction+0x186>
			break;
 8001050:	bf00      	nop
 8001052:	e006      	b.n	8001062 <GPIO_voidSetAlternatingFunction+0x186>
			break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <GPIO_voidSetAlternatingFunction+0x186>
			break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <GPIO_voidSetAlternatingFunction+0x186>
			break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <GPIO_voidSetAlternatingFunction+0x186>
			break;
 8001060:	bf00      	nop
	}

}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40020020 	.word	0x40020020
 8001074:	40020024 	.word	0x40020024
 8001078:	40020420 	.word	0x40020420
 800107c:	40020424 	.word	0x40020424
 8001080:	40020820 	.word	0x40020820
 8001084:	40020824 	.word	0x40020824
 8001088:	40020c20 	.word	0x40020c20
 800108c:	40020c24 	.word	0x40020c24
 8001090:	40021c20 	.word	0x40021c20
 8001094:	40021c24 	.word	0x40021c24

08001098 <NVIC_Init>:
* \Parameters (out): none
* \Return Value:    none
*
******************************************************************************/
void NVIC_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

/*TODO Configure Grouping/SubGroubing System In APINT register in SCB*/
AIRCR= ( AIRCR_VECTKEY << 16U ) |(NVIC_GROUPING_SYSTEM<<8U);
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <NVIC_Init+0x10c>)
 800109e:	4a42      	ldr	r2, [pc, #264]	; (80011a8 <NVIC_Init+0x110>)
 80010a0:	601a      	str	r2, [r3, #0]

for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <NVIC_Init+0x114>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e072      	b.n	8001190 <NVIC_Init+0xf8>
	{
		intNum			= NVIC_Cfg[i].Interupt_Number;
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <NVIC_Init+0x114>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4940      	ldr	r1, [pc, #256]	; (80011b0 <NVIC_Init+0x118>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <NVIC_Init+0x11c>)
 80010be:	601a      	str	r2, [r3, #0]
		locGroup		= NVIC_Cfg[i].Group_Priority;
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <NVIC_Init+0x114>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	493a      	ldr	r1, [pc, #232]	; (80011b0 <NVIC_Init+0x118>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	3301      	adds	r3, #1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <NVIC_Init+0x120>)
 80010d6:	601a      	str	r2, [r3, #0]
		locSubGroup     = NVIC_Cfg[i].SubGroup_Priority;
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <NVIC_Init+0x114>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4934      	ldr	r1, [pc, #208]	; (80011b0 <NVIC_Init+0x118>)
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	3302      	adds	r3, #2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <NVIC_Init+0x124>)
 80010ee:	601a      	str	r2, [r3, #0]

		/* enable\disable based on user configuration */
		enRegOffset = (intNum/WORD_LENGTH_BITS)*WORD_LENGTH_BYTES;
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <NVIC_Init+0x11c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <NVIC_Init+0x128>)
 80010fa:	6013      	str	r3, [r2, #0]
		enBitOffset = intNum%WORD_LENGTH_BITS;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <NVIC_Init+0x11c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <NVIC_Init+0x12c>)
 8001106:	6013      	str	r3, [r2, #0]

		GET_HWREG(NVIC_BASE_ADDRESS,enRegOffset) |= (1 << enBitOffset);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <NVIC_Init+0x128>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001110:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <NVIC_Init+0x12c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4618      	mov	r0, r3
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <NVIC_Init+0x128>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800112a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800112e:	4619      	mov	r1, r3
 8001130:	ea42 0300 	orr.w	r3, r2, r0
 8001134:	600b      	str	r3, [r1, #0]


#if NVIC_GROUPING_SYSTEM == NVIC_GROUPING_SYSTEM_XXX
			locGroupingField = locGroup;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <NVIC_Init+0x120>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <NVIC_Init+0x130>)
 800113c:	6013      	str	r3, [r2, #0]
     #error INVALID GROUPING SELECTION
#endif

			/* assign group\subgroup priority */

			priRegOffset = (intNum/4U)*WORD_LENGTH_BYTES;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <NVIC_Init+0x11c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	4a21      	ldr	r2, [pc, #132]	; (80011cc <NVIC_Init+0x134>)
 8001148:	6013      	str	r3, [r2, #0]
			priBitOffset = 5 + (8 * (intNum%4U));
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <NVIC_Init+0x11c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	3305      	adds	r3, #5
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <NVIC_Init+0x138>)
 8001158:	6013      	str	r3, [r2, #0]
			GET_HWREG(NVIC_PRIORTY_BASE,priRegOffset) |= (locGroupingField << priBitOffset);
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <NVIC_Init+0x134>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001162:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <NVIC_Init+0x130>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <NVIC_Init+0x138>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	409a      	lsls	r2, r3
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <NVIC_Init+0x134>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800117a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800117e:	4618      	mov	r0, r3
 8001180:	ea41 0302 	orr.w	r3, r1, r2
 8001184:	6003      	str	r3, [r0, #0]
for(i=0; i< NVIC_ACTIVATED_INT_SIZE ;i++)
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <NVIC_Init+0x114>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <NVIC_Init+0x114>)
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <NVIC_Init+0x114>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d088      	beq.n	80010aa <NVIC_Init+0x12>


	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed0c 	.word	0xe000ed0c
 80011a8:	fa050400 	.word	0xfa050400
 80011ac:	20000058 	.word	0x20000058
 80011b0:	080023cc 	.word	0x080023cc
 80011b4:	20000050 	.word	0x20000050
 80011b8:	20000054 	.word	0x20000054
 80011bc:	2000005c 	.word	0x2000005c
 80011c0:	20000060 	.word	0x20000060
 80011c4:	20000064 	.word	0x20000064
 80011c8:	20000068 	.word	0x20000068
 80011cc:	2000006c 	.word	0x2000006c
 80011d0:	20000070 	.word	0x20000070

080011d4 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_Config.h"

/*								System Clocks								*/

void RCC_voidInitSystemClock(void){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
			RCC_CFGR |= 0x00000001;			/*Set Bits*/
			
			
	#elif RCC_SYSTEM_CLOCK == RCC_HSI_RC
		/* Enable HSI Clock*/
			RCC_CR |= 0x00000001;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <RCC_voidInitSystemClock+0x38>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <RCC_voidInitSystemClock+0x38>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]
		/* Check if HSI is ready*/
			while(!GET_BIT(RCC_CR,RCC_HSI_READY_BIT));
 80011e4:	bf00      	nop
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <RCC_voidInitSystemClock+0x38>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f8      	beq.n	80011e6 <RCC_voidInitSystemClock+0x12>
		/*Set HSI as System Clock*/
			RCC_CFGR &= ~(0x00000003);	/*Clear Bits, Set HSI Mode*/
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <RCC_voidInitSystemClock+0x3c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <RCC_voidInitSystemClock+0x3c>)
 80011fa:	f023 0303 	bic.w	r3, r3, #3
 80011fe:	6013      	str	r3, [r2, #0]
	#else
			#error("Wrong Clock Selected")
	
	#endif

}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40023808 	.word	0x40023808

08001214 <RCC_voidEnableCompClk>:

/*							Peripherals Clocks								*/
void RCC_voidEnableCompClk(u8 Copy_uint8Bus, u8 Copy_uint8PerID){
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
	if(Copy_uint8PerID <= 31){
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b1f      	cmp	r3, #31
 8001228:	d847      	bhi.n	80012ba <RCC_voidEnableCompClk+0xa6>
		switch(Copy_uint8Bus){
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3b01      	subs	r3, #1
 800122e:	2b04      	cmp	r3, #4
 8001230:	d843      	bhi.n	80012ba <RCC_voidEnableCompClk+0xa6>
 8001232:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <RCC_voidEnableCompClk+0x24>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	0800124d 	.word	0x0800124d
 800123c:	08001263 	.word	0x08001263
 8001240:	08001279 	.word	0x08001279
 8001244:	0800128f 	.word	0x0800128f
 8001248:	080012a5 	.word	0x080012a5
			case RCC_AHB1:	SET_BIT(RCC_AHB1ENR,Copy_uint8PerID);	break;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <RCC_voidEnableCompClk+0xb4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4611      	mov	r1, r2
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <RCC_voidEnableCompClk+0xb4>)
 800125c:	430b      	orrs	r3, r1
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02b      	b.n	80012ba <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB2:	SET_BIT(RCC_AHB2ENR,Copy_uint8PerID);	break;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <RCC_voidEnableCompClk+0xb8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	79ba      	ldrb	r2, [r7, #6]
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4611      	mov	r1, r2
 8001270:	4a16      	ldr	r2, [pc, #88]	; (80012cc <RCC_voidEnableCompClk+0xb8>)
 8001272:	430b      	orrs	r3, r1
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e020      	b.n	80012ba <RCC_voidEnableCompClk+0xa6>
			case RCC_AHB3:	SET_BIT(RCC_AHB3ENR,Copy_uint8PerID);	break;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <RCC_voidEnableCompClk+0xbc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4611      	mov	r1, r2
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <RCC_voidEnableCompClk+0xbc>)
 8001288:	430b      	orrs	r3, r1
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e015      	b.n	80012ba <RCC_voidEnableCompClk+0xa6>
			case RCC_APB1:	SET_BIT(RCC_APB1ENR,Copy_uint8PerID);	break;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <RCC_voidEnableCompClk+0xc0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <RCC_voidEnableCompClk+0xc0>)
 800129e:	430b      	orrs	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00a      	b.n	80012ba <RCC_voidEnableCompClk+0xa6>
			case RCC_APB2:	SET_BIT(RCC_APB2ENR,Copy_uint8PerID);	break;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <RCC_voidEnableCompClk+0xc4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4611      	mov	r1, r2
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <RCC_voidEnableCompClk+0xc4>)
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	bf00      	nop
		}
	}
	else{
		/*Return Error*/
	}
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023830 	.word	0x40023830
 80012cc:	40023834 	.word	0x40023834
 80012d0:	40023838 	.word	0x40023838
 80012d4:	40023840 	.word	0x40023840
 80012d8:	40023844 	.word	0x40023844

080012dc <TimerX_Count>:
		((volatile Timer_2_to_5_Registers *)  Timer5_BaseAddress ),

};

void TimerX_Count(Timer_No_e Copy_e_Timer,Timer_AlignmentMode_e Copy_e_Mode, u32 Copy_u32_MilliSeconds )
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	603a      	str	r2, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	460b      	mov	r3, r1
 80012ea:	71bb      	strb	r3, [r7, #6]
	/*Reset Timer Registers */
	Timer_Number[Copy_e_Timer]->TIMx_CR1 = 0x0000;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a4f      	ldr	r2, [pc, #316]	; (800142c <TimerX_Count+0x150>)
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
	//*( (volatile u32 *) 0x40000000 ) = 0x0001;


	/*Choose Edge-Aligned or Center-Aligned mode */
	switch(Copy_e_Mode)
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d859      	bhi.n	80013b2 <TimerX_Count+0xd6>
 80012fe:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <TimerX_Count+0x28>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001319 	.word	0x08001319
 8001308:	08001333 	.word	0x08001333
 800130c:	0800134d 	.word	0x0800134d
 8001310:	08001367 	.word	0x08001367
 8001314:	08001381 	.word	0x08001381
	{
	case UP_COUNTER:
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_DIR);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4a44      	ldr	r2, [pc, #272]	; (800142c <TimerX_Count+0x150>)
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4941      	ldr	r1, [pc, #260]	; (800142c <TimerX_Count+0x150>)
 8001326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800132a:	f022 0210 	bic.w	r2, r2, #16
 800132e:	601a      	str	r2, [r3, #0]
		break;
 8001330:	e040      	b.n	80013b4 <TimerX_Count+0xd8>
	case DOWN_COUNTER:
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_DIR);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a3d      	ldr	r2, [pc, #244]	; (800142c <TimerX_Count+0x150>)
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	493b      	ldr	r1, [pc, #236]	; (800142c <TimerX_Count+0x150>)
 8001340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001344:	f042 0210 	orr.w	r2, r2, #16
 8001348:	601a      	str	r2, [r3, #0]
		break;
 800134a:	e033      	b.n	80013b4 <TimerX_Count+0xd8>
	case CENTER_ALIGNED_MODE_1:
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_0);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a37      	ldr	r2, [pc, #220]	; (800142c <TimerX_Count+0x150>)
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4934      	ldr	r1, [pc, #208]	; (800142c <TimerX_Count+0x150>)
 800135a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800135e:	f042 0220 	orr.w	r2, r2, #32
 8001362:	601a      	str	r2, [r3, #0]
		break;
 8001364:	e026      	b.n	80013b4 <TimerX_Count+0xd8>
	case CENTER_ALIGNED_MODE_2:
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_1);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <TimerX_Count+0x150>)
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	492e      	ldr	r1, [pc, #184]	; (800142c <TimerX_Count+0x150>)
 8001374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137c:	601a      	str	r2, [r3, #0]
		break;
 800137e:	e019      	b.n	80013b4 <TimerX_Count+0xd8>
	case CENTER_ALIGNED_MODE_3:
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_0);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <TimerX_Count+0x150>)
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4927      	ldr	r1, [pc, #156]	; (800142c <TimerX_Count+0x150>)
 800138e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001392:	f042 0220 	orr.w	r2, r2, #32
 8001396:	601a      	str	r2, [r3, #0]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_1);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <TimerX_Count+0x150>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4921      	ldr	r1, [pc, #132]	; (800142c <TimerX_Count+0x150>)
 80013a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ae:	601a      	str	r2, [r3, #0]
		break;
 80013b0:	e000      	b.n	80013b4 <TimerX_Count+0xd8>
	default:
		break;
 80013b2:	bf00      	nop
	}

	/*Set timer prescaler*/
	Timer_Number[Copy_e_Timer]->TIMx_PSC = (((float)(BUS_FREQUENCY/TICKS_FREQUENCY)) -1) ;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <TimerX_Count+0x150>)
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set Auto-Reload value*/
	Timer_Number[Copy_e_Timer]->TIMx_ARR = ((((float)Copy_u32_MilliSeconds /1000)) * TICKS_FREQUENCY);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013cc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001430 <TimerX_Count+0x154>
 80013d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001430 <TimerX_Count+0x154>
 80013d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <TimerX_Count+0x150>)
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e8:	ee17 2a90 	vmov	r2, s15
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Update interrupt enable*/
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_DIER, 0);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <TimerX_Count+0x150>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	490c      	ldr	r1, [pc, #48]	; (800142c <TimerX_Count+0x150>)
 80013fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	60da      	str	r2, [r3, #12]
	/*Enable Timer */
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CEN);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <TimerX_Count+0x150>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4906      	ldr	r1, [pc, #24]	; (800142c <TimerX_Count+0x150>)
 8001414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	447a0000 	.word	0x447a0000

08001434 <TimerX_PWM>:
	/*Enable Timer */
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CEN);
}

void TimerX_PWM(Timer_No_e Copy_e_Timer, Timer_Channl_e Copy_e_Channel, u8 Copy_u8_DutyCycle)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	460b      	mov	r3, r1
 8001440:	71bb      	strb	r3, [r7, #6]
 8001442:	4613      	mov	r3, r2
 8001444:	717b      	strb	r3, [r7, #5]
	/* The polarity of the pwm signal is remained at the default of active high
	 * The pwm mode is working at the default UP counting (channel is active as long as TIMx_CNT<TIMx_CCR1 )
	 * PWM mode 1 */

	/*Set the timer on UP counting, edge-aligned mode*/
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_DIR);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4a90      	ldr	r2, [pc, #576]	; (800168c <TimerX_PWM+0x258>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	498e      	ldr	r1, [pc, #568]	; (800168c <TimerX_PWM+0x258>)
 8001454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	601a      	str	r2, [r3, #0]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_0);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4a8a      	ldr	r2, [pc, #552]	; (800168c <TimerX_PWM+0x258>)
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4988      	ldr	r1, [pc, #544]	; (800168c <TimerX_PWM+0x258>)
 800146c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001470:	f022 0220 	bic.w	r2, r2, #32
 8001474:	601a      	str	r2, [r3, #0]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CMS_1);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a84      	ldr	r2, [pc, #528]	; (800168c <TimerX_PWM+0x258>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4982      	ldr	r1, [pc, #520]	; (800168c <TimerX_PWM+0x258>)
 8001484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800148c:	601a      	str	r2, [r3, #0]

	/*Set the auto-reload preload bit for ARR*/
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_ARPE);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4a7e      	ldr	r2, [pc, #504]	; (800168c <TimerX_PWM+0x258>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	497c      	ldr	r1, [pc, #496]	; (800168c <TimerX_PWM+0x258>)
 800149c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014a4:	601a      	str	r2, [r3, #0]

	/*Set the ARR value to maximum*/
	Timer_Number[Copy_e_Timer]->TIMx_ARR = 0xffff;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <TimerX_PWM+0x258>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Set timer prescaler: for a pwm frequency of 100 Hz */
	Timer_Number[Copy_e_Timer]->TIMx_PSC = ((BUS_FREQUENCY/ (0xffff * PWM_FREQUENCY)) -1) ;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a75      	ldr	r2, [pc, #468]	; (800168c <TimerX_PWM+0x258>)
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	2201      	movs	r2, #1
 80014be:	629a      	str	r2, [r3, #40]	; 0x28

	switch(Copy_e_Channel)
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	f200 81ba 	bhi.w	800183c <TimerX_PWM+0x408>
 80014c8:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <TimerX_PWM+0x9c>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	080014e1 	.word	0x080014e1
 80014d4:	080015b7 	.word	0x080015b7
 80014d8:	08001691 	.word	0x08001691
 80014dc:	08001767 	.word	0x08001767
	{
	case CH1:
		/*Select output mode for channel 1*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC1S_0);
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a6a      	ldr	r2, [pc, #424]	; (800168c <TimerX_PWM+0x258>)
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4967      	ldr	r1, [pc, #412]	; (800168c <TimerX_PWM+0x258>)
 80014ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	619a      	str	r2, [r3, #24]
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC1S_1);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a64      	ldr	r2, [pc, #400]	; (800168c <TimerX_PWM+0x258>)
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4961      	ldr	r1, [pc, #388]	; (800168c <TimerX_PWM+0x258>)
 8001506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150a:	f022 0202 	bic.w	r2, r2, #2
 800150e:	619a      	str	r2, [r3, #24]
		/*Select the polarity to active high*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC1P);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <TimerX_PWM+0x258>)
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	495b      	ldr	r1, [pc, #364]	; (800168c <TimerX_PWM+0x258>)
 800151e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001522:	f022 0202 	bic.w	r2, r2, #2
 8001526:	621a      	str	r2, [r3, #32]
		/*Choose PWM mode 1*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC1M_0);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <TimerX_PWM+0x258>)
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4955      	ldr	r1, [pc, #340]	; (800168c <TimerX_PWM+0x258>)
 8001536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800153a:	f022 0210 	bic.w	r2, r2, #16
 800153e:	619a      	str	r2, [r3, #24]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC1M_1);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <TimerX_PWM+0x258>)
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	494f      	ldr	r1, [pc, #316]	; (800168c <TimerX_PWM+0x258>)
 800154e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	619a      	str	r2, [r3, #24]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC1M_2);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a4c      	ldr	r2, [pc, #304]	; (800168c <TimerX_PWM+0x258>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4949      	ldr	r1, [pc, #292]	; (800168c <TimerX_PWM+0x258>)
 8001566:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800156a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800156e:	619a      	str	r2, [r3, #24]
		/*Set the duty cycle*/
		Timer_Number[Copy_e_Timer]->TIMx_CCR1 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001570:	797a      	ldrb	r2, [r7, #5]
 8001572:	4613      	mov	r3, r2
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	1899      	adds	r1, r3, r2
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <TimerX_PWM+0x258>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	460a      	mov	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
		/*Set the preload bit*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC1PE);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4a41      	ldr	r2, [pc, #260]	; (800168c <TimerX_PWM+0x258>)
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	493e      	ldr	r1, [pc, #248]	; (800168c <TimerX_PWM+0x258>)
 8001592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001596:	f042 0208 	orr.w	r2, r2, #8
 800159a:	619a      	str	r2, [r3, #24]
		/*Enable capture compare*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC1E);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a3b      	ldr	r2, [pc, #236]	; (800168c <TimerX_PWM+0x258>)
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4938      	ldr	r1, [pc, #224]	; (800168c <TimerX_PWM+0x258>)
 80015aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	621a      	str	r2, [r3, #32]
		break;
 80015b4:	e143      	b.n	800183e <TimerX_PWM+0x40a>
	case CH2:
		/*Select output mode for channel 2*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC2S_0);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a34      	ldr	r2, [pc, #208]	; (800168c <TimerX_PWM+0x258>)
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4932      	ldr	r1, [pc, #200]	; (800168c <TimerX_PWM+0x258>)
 80015c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015cc:	619a      	str	r2, [r3, #24]
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC2S_1);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4a2e      	ldr	r2, [pc, #184]	; (800168c <TimerX_PWM+0x258>)
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	492c      	ldr	r1, [pc, #176]	; (800168c <TimerX_PWM+0x258>)
 80015dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015e4:	619a      	str	r2, [r3, #24]
		/*Select the polarity to active high*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC2P);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	4a28      	ldr	r2, [pc, #160]	; (800168c <TimerX_PWM+0x258>)
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	6a1a      	ldr	r2, [r3, #32]
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4926      	ldr	r1, [pc, #152]	; (800168c <TimerX_PWM+0x258>)
 80015f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015f8:	f022 0220 	bic.w	r2, r2, #32
 80015fc:	621a      	str	r2, [r3, #32]
		/*Choose PWM mode 1*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC2M_0);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <TimerX_PWM+0x258>)
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4920      	ldr	r1, [pc, #128]	; (800168c <TimerX_PWM+0x258>)
 800160c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001610:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001614:	619a      	str	r2, [r3, #24]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC2M_1);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4a1c      	ldr	r2, [pc, #112]	; (800168c <TimerX_PWM+0x258>)
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	491a      	ldr	r1, [pc, #104]	; (800168c <TimerX_PWM+0x258>)
 8001624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800162c:	619a      	str	r2, [r3, #24]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC2M_2);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <TimerX_PWM+0x258>)
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4914      	ldr	r1, [pc, #80]	; (800168c <TimerX_PWM+0x258>)
 800163c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001644:	619a      	str	r2, [r3, #24]
		/*Set the duty cycle*/
		Timer_Number[Copy_e_Timer]->TIMx_CCR2 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001646:	797a      	ldrb	r2, [r7, #5]
 8001648:	4613      	mov	r3, r2
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	1899      	adds	r1, r3, r2
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <TimerX_PWM+0x258>)
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	460a      	mov	r2, r1
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
		/*Set the preload bit*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_OC2PE);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <TimerX_PWM+0x258>)
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4909      	ldr	r1, [pc, #36]	; (800168c <TimerX_PWM+0x258>)
 8001668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800166c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001670:	619a      	str	r2, [r3, #24]
		/*Enable capture compare*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC2E);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <TimerX_PWM+0x258>)
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4903      	ldr	r1, [pc, #12]	; (800168c <TimerX_PWM+0x258>)
 8001680:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001684:	f042 0210 	orr.w	r2, r2, #16
 8001688:	621a      	str	r2, [r3, #32]
		break;
 800168a:	e0d8      	b.n	800183e <TimerX_PWM+0x40a>
 800168c:	20000000 	.word	0x20000000
	case CH3:
		/*Select output mode for channel 3*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_CC3S_0);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4a7a      	ldr	r2, [pc, #488]	; (800187c <TimerX_PWM+0x448>)
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4977      	ldr	r1, [pc, #476]	; (800187c <TimerX_PWM+0x448>)
 800169e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	61da      	str	r2, [r3, #28]
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_CC3S_1);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4a74      	ldr	r2, [pc, #464]	; (800187c <TimerX_PWM+0x448>)
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4971      	ldr	r1, [pc, #452]	; (800187c <TimerX_PWM+0x448>)
 80016b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016ba:	f022 0202 	bic.w	r2, r2, #2
 80016be:	61da      	str	r2, [r3, #28]
		/*Select the polarity to active high*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC3P);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <TimerX_PWM+0x448>)
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	496b      	ldr	r1, [pc, #428]	; (800187c <TimerX_PWM+0x448>)
 80016ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d6:	621a      	str	r2, [r3, #32]
		/*Choose PWM mode 1*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC3M_0);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4a68      	ldr	r2, [pc, #416]	; (800187c <TimerX_PWM+0x448>)
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4965      	ldr	r1, [pc, #404]	; (800187c <TimerX_PWM+0x448>)
 80016e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	61da      	str	r2, [r3, #28]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC3M_1);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4a62      	ldr	r2, [pc, #392]	; (800187c <TimerX_PWM+0x448>)
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	495f      	ldr	r1, [pc, #380]	; (800187c <TimerX_PWM+0x448>)
 80016fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	61da      	str	r2, [r3, #28]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC3M_2);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4a5c      	ldr	r2, [pc, #368]	; (800187c <TimerX_PWM+0x448>)
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4959      	ldr	r1, [pc, #356]	; (800187c <TimerX_PWM+0x448>)
 8001716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800171a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171e:	61da      	str	r2, [r3, #28]
		/*Set the duty cycle*/
		Timer_Number[Copy_e_Timer]->TIMx_CCR3 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001720:	797a      	ldrb	r2, [r7, #5]
 8001722:	4613      	mov	r3, r2
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	1899      	adds	r1, r3, r2
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4a54      	ldr	r2, [pc, #336]	; (800187c <TimerX_PWM+0x448>)
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	460a      	mov	r2, r1
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
		/*Set the preload bit*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC3PE);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a51      	ldr	r2, [pc, #324]	; (800187c <TimerX_PWM+0x448>)
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	494e      	ldr	r1, [pc, #312]	; (800187c <TimerX_PWM+0x448>)
 8001742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001746:	f042 0208 	orr.w	r2, r2, #8
 800174a:	61da      	str	r2, [r3, #28]
		/*Enable capture compare*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC3E);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <TimerX_PWM+0x448>)
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4948      	ldr	r1, [pc, #288]	; (800187c <TimerX_PWM+0x448>)
 800175a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800175e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001762:	621a      	str	r2, [r3, #32]
		break;
 8001764:	e06b      	b.n	800183e <TimerX_PWM+0x40a>
	case CH4:
		/*Select output mode for channel 4*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_CC4S_0);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4a44      	ldr	r2, [pc, #272]	; (800187c <TimerX_PWM+0x448>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4942      	ldr	r1, [pc, #264]	; (800187c <TimerX_PWM+0x448>)
 8001774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177c:	61da      	str	r2, [r3, #28]
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_CC4S_1);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4a3e      	ldr	r2, [pc, #248]	; (800187c <TimerX_PWM+0x448>)
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	493c      	ldr	r1, [pc, #240]	; (800187c <TimerX_PWM+0x448>)
 800178c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001794:	61da      	str	r2, [r3, #28]
		/*Select the polarity to active high*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC4P);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4a38      	ldr	r2, [pc, #224]	; (800187c <TimerX_PWM+0x448>)
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <TimerX_PWM+0x448>)
 80017a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ac:	621a      	str	r2, [r3, #32]
		/*Choose PWM mode 1*/
		CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC4M_0);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4a32      	ldr	r2, [pc, #200]	; (800187c <TimerX_PWM+0x448>)
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4930      	ldr	r1, [pc, #192]	; (800187c <TimerX_PWM+0x448>)
 80017bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c4:	61da      	str	r2, [r3, #28]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC4M_1);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a2c      	ldr	r2, [pc, #176]	; (800187c <TimerX_PWM+0x448>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	492a      	ldr	r1, [pc, #168]	; (800187c <TimerX_PWM+0x448>)
 80017d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017dc:	61da      	str	r2, [r3, #28]
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC4M_2);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <TimerX_PWM+0x448>)
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	69da      	ldr	r2, [r3, #28]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4924      	ldr	r1, [pc, #144]	; (800187c <TimerX_PWM+0x448>)
 80017ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f4:	61da      	str	r2, [r3, #28]
		/*Set the duty cycle*/
		Timer_Number[Copy_e_Timer]->TIMx_CCR4 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 80017f6:	797a      	ldrb	r2, [r7, #5]
 80017f8:	4613      	mov	r3, r2
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	1899      	adds	r1, r3, r2
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <TimerX_PWM+0x448>)
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	460a      	mov	r2, r1
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
		/*Set the preload bit*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR2, TIMx_CCMR2_OC4PE);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <TimerX_PWM+0x448>)
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4919      	ldr	r1, [pc, #100]	; (800187c <TimerX_PWM+0x448>)
 8001818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800181c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001820:	61da      	str	r2, [r3, #28]
		/*Enable capture compare*/
		SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC4E);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <TimerX_PWM+0x448>)
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4913      	ldr	r1, [pc, #76]	; (800187c <TimerX_PWM+0x448>)
 8001830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001838:	621a      	str	r2, [r3, #32]
		break;
 800183a:	e000      	b.n	800183e <TimerX_PWM+0x40a>
	default:
		break;
 800183c:	bf00      	nop
	}


	/*Initialize all registers to transfer preload registers to shadow registers */
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_EGR, 0);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <TimerX_PWM+0x448>)
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <TimerX_PWM+0x448>)
 800184c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	615a      	str	r2, [r3, #20]
	/*Enable Timer */
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CEN);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4a08      	ldr	r2, [pc, #32]	; (800187c <TimerX_PWM+0x448>)
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4906      	ldr	r1, [pc, #24]	; (800187c <TimerX_PWM+0x448>)
 8001864:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <TimerX_EncoderMode>:

void TimerX_EncoderMode(Timer_No_e Copy_e_Timer)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	/*Set the ARR value to maximum*/
	Timer_Number[Copy_e_Timer]->TIMx_ARR = 0xffff;
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Map IC1 on TI1*/
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC1S_0);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a56      	ldr	r2, [pc, #344]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4953      	ldr	r1, [pc, #332]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	619a      	str	r2, [r3, #24]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC1S_1);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	494d      	ldr	r1, [pc, #308]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c2:	f022 0202 	bic.w	r2, r2, #2
 80018c6:	619a      	str	r2, [r3, #24]
	/*Map IC2 on TI2*/
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC2S_0);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4947      	ldr	r1, [pc, #284]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018de:	619a      	str	r2, [r3, #24]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCMR1, TIMx_CCMR1_CC2S_1);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4941      	ldr	r1, [pc, #260]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f6:	619a      	str	r2, [r3, #24]
	/*Circuit is sensitive to TI1FP1 rising edge*/
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC1P);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	493b      	ldr	r1, [pc, #236]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190a:	f022 0202 	bic.w	r2, r2, #2
 800190e:	621a      	str	r2, [r3, #32]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC1NP);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800191e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	621a      	str	r2, [r3, #32]
	/*No filter on IC1*/
	Timer_Number[Copy_e_Timer]->TIMx_CCMR1 &= ~( 0b1111 << IC1F_0);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	492f      	ldr	r1, [pc, #188]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800193a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800193e:	619a      	str	r2, [r3, #24]
	/*Circuit is sensitive to TI2FP1 rising edge*/
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC2P);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4929      	ldr	r1, [pc, #164]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800194e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001952:	f022 0220 	bic.w	r2, r2, #32
 8001956:	621a      	str	r2, [r3, #32]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_CCER, TIMx_CCER_CC2NP);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4923      	ldr	r1, [pc, #140]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001966:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800196a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196e:	621a      	str	r2, [r3, #32]
	/*No filter on IC2*/
	Timer_Number[Copy_e_Timer]->TIMx_CCMR1 &= ~( 0b1111 << IC2F_0);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	491d      	ldr	r1, [pc, #116]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800197e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001982:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001986:	619a      	str	r2, [r3, #24]
	/*Select encoder mode 3*/
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_SMCR, TIMx_SMCR_SMS_0);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <TimerX_EncoderMode+0x174>)
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4917      	ldr	r1, [pc, #92]	; (80019f4 <TimerX_EncoderMode+0x174>)
 8001996:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	609a      	str	r2, [r3, #8]
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_SMCR, TIMx_SMCR_SMS_1);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4911      	ldr	r1, [pc, #68]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b2:	f042 0202 	orr.w	r2, r2, #2
 80019b6:	609a      	str	r2, [r3, #8]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_SMCR, TIMx_SMCR_SMS_2);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	490b      	ldr	r1, [pc, #44]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	609a      	str	r2, [r3, #8]
	/*Enable Timer */
	SET_BIT(Timer_Number[Copy_e_Timer]->TIMx_CR1, TIMx_CR1_CEN);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <TimerX_EncoderMode+0x174>)
 80019de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000000 	.word	0x20000000

080019f8 <TimerXChangeDutyCycleOfPWM>:

void TimerXChangeDutyCycleOfPWM(Timer_No_e Copy_e_Timer, Timer_Channl_e Copy_e_Channel, u8 Copy_u8_DutyCycle)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	460b      	mov	r3, r1
 8001a04:	71bb      	strb	r3, [r7, #6]
 8001a06:	4613      	mov	r3, r2
 8001a08:	717b      	strb	r3, [r7, #5]
	switch(Copy_e_Channel)
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d837      	bhi.n	8001a80 <TimerXChangeDutyCycleOfPWM+0x88>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <TimerXChangeDutyCycleOfPWM+0x20>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a3f 	.word	0x08001a3f
 8001a20:	08001a55 	.word	0x08001a55
 8001a24:	08001a6b 	.word	0x08001a6b
		{
		case CH1:
			/*Set the duty cycle*/
			Timer_Number[Copy_e_Timer]->TIMx_CCR1 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001a28:	797a      	ldrb	r2, [r7, #5]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	1899      	adds	r1, r3, r2
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <TimerXChangeDutyCycleOfPWM+0x94>)
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	460a      	mov	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001a3c:	e020      	b.n	8001a80 <TimerXChangeDutyCycleOfPWM+0x88>
		case CH2:
			/*Set the duty cycle*/
			Timer_Number[Copy_e_Timer]->TIMx_CCR2 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001a3e:	797a      	ldrb	r2, [r7, #5]
 8001a40:	4613      	mov	r3, r2
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	1899      	adds	r1, r3, r2
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <TimerXChangeDutyCycleOfPWM+0x94>)
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	460a      	mov	r2, r1
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001a52:	e015      	b.n	8001a80 <TimerXChangeDutyCycleOfPWM+0x88>
		case CH3:
			/*Set the duty cycle*/
			Timer_Number[Copy_e_Timer]->TIMx_CCR3 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001a54:	797a      	ldrb	r2, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	1899      	adds	r1, r3, r2
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <TimerXChangeDutyCycleOfPWM+0x94>)
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	460a      	mov	r2, r1
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001a68:	e00a      	b.n	8001a80 <TimerXChangeDutyCycleOfPWM+0x88>
		case CH4:
			/*Set the duty cycle*/
			Timer_Number[Copy_e_Timer]->TIMx_CCR4 = ( (0xffff * Copy_u8_DutyCycle) /255 );
 8001a6a:	797a      	ldrb	r2, [r7, #5]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	1899      	adds	r1, r3, r2
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <TimerXChangeDutyCycleOfPWM+0x94>)
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001a7e:	bf00      	nop
		}


}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20000000 	.word	0x20000000

08001a90 <TimerX_GetCount>:

u32 TimerX_GetCount(Timer_No_e Copy_e_Timer)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	return Timer_Number[Copy_e_Timer]->TIMx_CNT;
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <TimerX_GetCount+0x20>)
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <TimerX_ClearCounter>:

void TimerX_ClearCounter(Timer_No_e Copy_e_Timer)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	Timer_Number[Copy_e_Timer]->TIMx_CNT = 0x0000;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <TimerX_ClearCounter+0x24>)
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <TimerX_Clearflag>:

void TimerX_Clearflag(Timer_No_e Copy_e_Timer)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(Timer_Number[Copy_e_Timer]->TIMx_SR, 0);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <TimerX_Clearflag+0x30>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4906      	ldr	r1, [pc, #24]	; (8001b0c <TimerX_Clearflag+0x30>)
 8001af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	611a      	str	r2, [r3, #16]

}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <TIM2_IRQHandler>:
{
	Timer2_CallBack = ptr;
}

void TIM2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	Timer2_CallBack();
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <TIM2_IRQHandler+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4798      	blx	r3
	TimerX_Clearflag(TIMER_2_);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffde 	bl	8001adc <TimerX_Clearflag>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000074 	.word	0x20000074

08001b28 <TIM3_IRQHandler>:
{
	Timer3_CallBack = ptr;
}

void TIM3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	Timer3_CallBack();
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <TIM3_IRQHandler+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4798      	blx	r3
	TimerX_Clearflag(TIMER_3_);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff ffd2 	bl	8001adc <TimerX_Clearflag>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000078 	.word	0x20000078

08001b40 <TIM4_IRQHandler>:
{
	Timer4_CallBack = ptr;
}

void TIM4_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	Timer4_CallBack();
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <TIM4_IRQHandler+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4798      	blx	r3
	TimerX_Clearflag(TIMER_4_);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff ffc6 	bl	8001adc <TimerX_Clearflag>
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000007c 	.word	0x2000007c

08001b58 <Timer5_voidSetCallBack>:

void Timer5_voidSetCallBack( void (* ptr) (void) )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	Timer5_CallBack = ptr;
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <Timer5_voidSetCallBack+0x1c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000080 	.word	0x20000080

08001b78 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	Timer5_CallBack();
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <TIM5_IRQHandler+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4798      	blx	r3
	TimerX_Clearflag(TIMER_5_);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f7ff ffaa 	bl	8001adc <TimerX_Clearflag>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000080 	.word	0x20000080

08001b90 <MUSART_voidInit>:
		((volatile USART_Registers_Type *)  USART5_BaseAddress ),
		((volatile USART_Registers_Type *)  USART6_BaseAddress ),
};

void MUSART_voidInit(USART_Init_struct * Copy_structInitConfig)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	/* Get the USART channel */

	//volatile USART_Channels USARTx = Copy_structInitConfig->UartNo->USART_CR1

	/* Reset control registers settings */
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1=0 ;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b87      	ldr	r3, [pc, #540]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR2= 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR3 =0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]

	if(Copy_structInitConfig->Word_Length == Data_9_Bits)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d10f      	bne.n	8001bf0 <MUSART_voidInit+0x60>
	{
		SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1 ,  USART_CR1_M);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001be6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bee:	60da      	str	r2, [r3, #12]
	}
	/*else is the default Data_8_Bits */
	/****************************************************************************/
	if(Copy_structInitConfig->Parity == Even_Parity)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d110      	bne.n	8001c1a <MUSART_voidInit+0x8a>
	{
		SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1 ,USART_CR1_PCE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	e023      	b.n	8001c62 <MUSART_voidInit+0xd2>
	}
	else if (Copy_structInitConfig->Parity == Odd_Parity)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d11f      	bne.n	8001c62 <MUSART_voidInit+0xd2>
	{
		SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1 ,USART_CR1_PCE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c40:	60da      	str	r2, [r3, #12]
		SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1 ,USART_CR1_PS);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	60da      	str	r2, [r3, #12]
	}
	/*else is the default No_Parity */
	/****************************************************************************/
	/*Stop bits*/
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR2 |= ((Copy_structInitConfig->Stop_Bits)<<USART_CR2_STOP);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	6919      	ldr	r1, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	031a      	lsls	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001c7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
		default:
			break;
	}
	*/
	/* To automatically calculate BRR value */
	f32 Local_f32IntegerDivider = ((PCLKx) / (8 * (OVR8+1) * (Copy_structInitConfig->Baud_Rate)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <MUSART_voidInit+0x230>)
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	edc7 7a03 	vstr	s15, [r7, #12]
	f32 Local_f32FractionalDivider = ((Local_f32IntegerDivider - ((u32) Local_f32IntegerDivider)) * 8 * (OVR8+1)) + 0.5;
 8001c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cc6:	edc7 7a02 	vstr	s15, [r7, #8]
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_BRR = ( ((u32)Local_f32IntegerDivider<< 4) | ((u32)Local_f32FractionalDivider) );
 8001cca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	ee17 3a90 	vmov	r3, s15
 8001cd6:	011a      	lsls	r2, r3, #4
 8001cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce0:	ee17 0a90 	vmov	r0, s15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001cec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cf0:	4302      	orrs	r2, r0
 8001cf2:	609a      	str	r2, [r3, #8]
	/****************************************************************************/
	switch (Copy_structInitConfig->Mode)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d016      	beq.n	8001d2a <MUSART_voidInit+0x19a>
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d844      	bhi.n	8001d8a <MUSART_voidInit+0x1fa>
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d023      	beq.n	8001d4c <MUSART_voidInit+0x1bc>
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d140      	bne.n	8001d8a <MUSART_voidInit+0x1fa>
	{
		case UART_DMA_Receiver:
			SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR3,USART_CR3_DMAR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d26:	615a      	str	r2, [r3, #20]
			break;
 8001d28:	e030      	b.n	8001d8c <MUSART_voidInit+0x1fc>
		case UART_DMA_Transmitter:
			SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR3, USART_CR3_DMAT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
			break;
 8001d4a:	e01f      	b.n	8001d8c <MUSART_voidInit+0x1fc>
		case Synchronous:
			Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR2 |= (Synchronous_SetUp<<USART_CR2_CPHA);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d64:	6912      	ldr	r2, [r2, #16]
 8001d66:	611a      	str	r2, [r3, #16]
			SET_BIT(Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR2,USART_CR2_CLKEN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d86:	611a      	str	r2, [r3, #16]
			break;
 8001d88:	e000      	b.n	8001d8c <MUSART_voidInit+0x1fc>
		default: 		/*Asynchronous*/
			break;
 8001d8a:	bf00      	nop
	}
	/****************************************************************************/
	/* Enable receiver and transmitter and UART peripheral : This is the default mode in this current driver */
	Uart_Channels[Copy_structInitConfig->UartNo]->USART_CR1 |= (1<<USART_CR1_RE) | (1<<USART_CR1_TE) | (1<<USART_CR1_UE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <MUSART_voidInit+0x22c>)
 8001da2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001daa:	f043 030c 	orr.w	r3, r3, #12
 8001dae:	60d3      	str	r3, [r2, #12]
	//Clear all DMA Interrupt Flags
	//DMA2->DMA_HIFCR=0xffffffff;
	//Enable DMA stream 5 for RX
	//SET_BIT(DMA2->DMA_Streams[5].DMA_SCR,0);

}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	00f42400 	.word	0x00f42400

08001dc4 <MSUART_voidInterrupt>:

void MSUART_voidInterrupt(u8 Copy_USART_Channel, USART_enum Copy_eInt, USART_enum Copy_eState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	73fb      	strb	r3, [r7, #15]
	if(Copy_eState == USART_Interrupt_Enable)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d110      	bne.n	8001dfa <MSUART_voidInterrupt+0x36>
	{
		SET_BIT(Uart_Channels[Copy_USART_Channel]->USART_CR1,Copy_eInt);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <MSUART_voidInterrupt+0x6c>)
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	2101      	movs	r1, #1
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4910      	ldr	r1, [pc, #64]	; (8001e30 <MSUART_voidInterrupt+0x6c>)
 8001df0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001df4:	4302      	orrs	r2, r0
 8001df6:	60da      	str	r2, [r3, #12]
	}
	else if(Copy_eState == USART_Interrupt_Disable)
	{
		CLR_BIT(Uart_Channels[Copy_USART_Channel]->USART_CR1,Copy_eInt);
	}
}
 8001df8:	e013      	b.n	8001e22 <MSUART_voidInterrupt+0x5e>
	else if(Copy_eState == USART_Interrupt_Disable)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d110      	bne.n	8001e22 <MSUART_voidInterrupt+0x5e>
		CLR_BIT(Uart_Channels[Copy_USART_Channel]->USART_CR1,Copy_eInt);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <MSUART_voidInterrupt+0x6c>)
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	4905      	ldr	r1, [pc, #20]	; (8001e30 <MSUART_voidInterrupt+0x6c>)
 8001e1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e1e:	4002      	ands	r2, r0
 8001e20:	60da      	str	r2, [r3, #12]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010

08001e34 <MSUART_u8ReadDataRegister>:



/****************************************************************************************************************************************/
u8 MSUART_u8ReadDataRegister(u8 Copy_USART_Channel)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	return Uart_Channels[Copy_USART_Channel]->USART_DR;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <MSUART_u8ReadDataRegister+0x24>)
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b2db      	uxtb	r3, r3
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000010 	.word	0x20000010

08001e5c <USART1_IRQHandler>:
{
	USART1_CallBack = ptr;
}

void USART1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	USART1_CallBack();
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <USART1_IRQHandler+0x10>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4798      	blx	r3
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000084 	.word	0x20000084

08001e70 <MUSART3_voidSetCallBack>:
{
	USART2_CallBack();
}

void MUSART3_voidSetCallBack( void (* ptr) (void) )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	USART3_CallBack = ptr;
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <MUSART3_voidSetCallBack+0x1c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000088 	.word	0x20000088

08001e90 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	USART3_CallBack();
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <USART3_IRQHandler+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4798      	blx	r3
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000088 	.word	0x20000088

08001ea4 <UART4_IRQHandler>:
{
	UART4_CallBack = ptr;
}

void UART4_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	UART4_CallBack();
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <UART4_IRQHandler+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4798      	blx	r3
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000008c 	.word	0x2000008c

08001eb8 <UART5_IRQHandler>:
{
	UART5_CallBack = ptr;
}

void UART5_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	UART5_CallBack();
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <UART5_IRQHandler+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4798      	blx	r3
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000090 	.word	0x20000090

08001ecc <USART6_IRQHandler>:
{
	USART6_CallBack = ptr;
}

void USART6_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	USART6_CallBack();
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <USART6_IRQHandler+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4798      	blx	r3
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000094 	.word	0x20000094

08001ee0 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream5_CallBack= ptr;
}
void DMA2_Stream5_IRQHandler()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	DMA2_Stream5_CallBack();
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <DMA2_Stream5_IRQHandler+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4798      	blx	r3

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000098 	.word	0x20000098

08001ef4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_voidSetCallBack( void (* ptr) (void) )
{
	DMA2_Stream7_CallBack= ptr;
}
void DMA2_Stream7_IRQHandler()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	DMA2_Stream7_CallBack();
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <DMA2_Stream7_IRQHandler+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4798      	blx	r3
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000009c 	.word	0x2000009c

08001f08 <readEncoder>:

u8 PWM_right_motor= 10;
u8 PWM_left_motor= 10;

void readEncoder(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	static u32 last_local_u32_right_motor=0;
	static u32 last_local_u32_left_motor=0;
	u32 right_local_u32_motor=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
	u32 left_local_u32_motor=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]

	right_local_u32_motor= TimerX_GetCount(TIMER_2_);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fdba 	bl	8001a90 <TimerX_GetCount>
 8001f1c:	6078      	str	r0, [r7, #4]
	left_local_u32_motor = TimerX_GetCount(TIMER_4_);
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f7ff fdb6 	bl	8001a90 <TimerX_GetCount>
 8001f24:	6038      	str	r0, [r7, #0]

	/*Get rpm:
	 * get no. of revolutions per second by dividing the counter value by 1600
	 * get the rpm by multiplying by 60
	 * */
	right_radian_per_second = ((abs( (s32) right_local_u32_motor - (s32) last_local_u32_right_motor)/1600.0) *60);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a39      	ldr	r2, [pc, #228]	; (8002010 <readEncoder+0x108>)
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bfb8      	it	lt
 8001f32:	425b      	neglt	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fab9 	bl	80004ac <__aeabi_i2d>
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <readEncoder+0x10c>)
 8001f40:	f7fe fc48 	bl	80007d4 <__aeabi_ddiv>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <readEncoder+0x110>)
 8001f52:	f7fe fb15 	bl	8000580 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4930      	ldr	r1, [pc, #192]	; (800201c <readEncoder+0x114>)
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
	left_radian_per_second  = ((abs( (s32) left_local_u32_motor - (s32) last_local_u32_left_motor)/1600.0) *60);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <readEncoder+0x118>)
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfb8      	it	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa9c 	bl	80004ac <__aeabi_i2d>
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <readEncoder+0x10c>)
 8001f7a:	f7fe fc2b 	bl	80007d4 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <readEncoder+0x110>)
 8001f8c:	f7fe faf8 	bl	8000580 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4923      	ldr	r1, [pc, #140]	; (8002024 <readEncoder+0x11c>)
 8001f96:	e9c1 2300 	strd	r2, r3, [r1]

	/*Convert from rpm to radians*/
	right_radian_per_second = right_radian_per_second * rpm_to_radians;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <readEncoder+0x114>)
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	a319      	add	r3, pc, #100	; (adr r3, 8002008 <readEncoder+0x100>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe faeb 	bl	8000580 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	491b      	ldr	r1, [pc, #108]	; (800201c <readEncoder+0x114>)
 8001fb0:	e9c1 2300 	strd	r2, r3, [r1]
	left_radian_per_second  = left_radian_per_second  * rpm_to_radians;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <readEncoder+0x11c>)
 8001fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fba:	a313      	add	r3, pc, #76	; (adr r3, 8002008 <readEncoder+0x100>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fade 	bl	8000580 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <readEncoder+0x11c>)
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]

	/*For proper operation clear the timers counters if they reached 64000 before the next revolution*/
	if(right_local_u32_motor >= 32000)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001fd4:	d304      	bcc.n	8001fe0 <readEncoder+0xd8>
	{
		TimerX_ClearCounter(TIMER_2_);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fd6c 	bl	8001ab4 <TimerX_ClearCounter>
		right_local_u32_motor = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
	}
	if(left_local_u32_motor >= 32000)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001fe6:	d304      	bcc.n	8001ff2 <readEncoder+0xea>
	{
		TimerX_ClearCounter(TIMER_4_);
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f7ff fd63 	bl	8001ab4 <TimerX_ClearCounter>
		left_local_u32_motor = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
	}

	last_local_u32_right_motor = right_local_u32_motor;
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <readEncoder+0x108>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]
	last_local_u32_left_motor  = left_local_u32_motor;
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <readEncoder+0x118>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6013      	str	r3, [r2, #0]

}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	f37c4b99 	.word	0xf37c4b99
 800200c:	3fbacee9 	.word	0x3fbacee9
 8002010:	200000b0 	.word	0x200000b0
 8002014:	40990000 	.word	0x40990000
 8002018:	404e0000 	.word	0x404e0000
 800201c:	200000a0 	.word	0x200000a0
 8002020:	200000b4 	.word	0x200000b4
 8002024:	200000a8 	.word	0x200000a8

08002028 <getVelocity>:


void getVelocity()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	static u8 last_byte_index= 0;
	u8 local_u8_data= MSUART_u8ReadDataRegister(2);
 800202e:	2002      	movs	r0, #2
 8002030:	f7ff ff00 	bl	8001e34 <MSUART_u8ReadDataRegister>
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]

	switch(local_u8_data)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b6c      	cmp	r3, #108	; 0x6c
 800203c:	d005      	beq.n	800204a <getVelocity+0x22>
 800203e:	2b72      	cmp	r3, #114	; 0x72
 8002040:	d107      	bne.n	8002052 <getVelocity+0x2a>
	{
		case 'r':
			last_byte_index = local_u8_data;
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <getVelocity+0x64>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	7013      	strb	r3, [r2, #0]
			break;
 8002048:	e007      	b.n	800205a <getVelocity+0x32>
		case 'l':
			last_byte_index = local_u8_data;
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <getVelocity+0x64>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	7013      	strb	r3, [r2, #0]
			break;
 8002050:	e003      	b.n	800205a <getVelocity+0x32>
		default:
			last_byte_index = 0;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <getVelocity+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			break;
 8002058:	bf00      	nop

	}

	if(local_u8_data != 'r' && local_u8_data != 'l')
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2b72      	cmp	r3, #114	; 0x72
 800205e:	d011      	beq.n	8002084 <getVelocity+0x5c>
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b6c      	cmp	r3, #108	; 0x6c
 8002064:	d00e      	beq.n	8002084 <getVelocity+0x5c>
	{
		if(last_byte_index == 'r'  )
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <getVelocity+0x64>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b72      	cmp	r3, #114	; 0x72
 800206c:	d103      	bne.n	8002076 <getVelocity+0x4e>
		{
			PWM_right_motor = local_u8_data;
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <getVelocity+0x68>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	7013      	strb	r3, [r2, #0]
		else if(last_byte_index == 'l' )
		{
			PWM_left_motor = local_u8_data;
		}
	}
}
 8002074:	e006      	b.n	8002084 <getVelocity+0x5c>
		else if(last_byte_index == 'l' )
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <getVelocity+0x64>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b6c      	cmp	r3, #108	; 0x6c
 800207c:	d102      	bne.n	8002084 <getVelocity+0x5c>
			PWM_left_motor = local_u8_data;
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <getVelocity+0x6c>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	7013      	strb	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200000b8 	.word	0x200000b8
 8002090:	20000028 	.word	0x20000028
 8002094:	20000029 	.word	0x20000029

08002098 <main>:


int main(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

	/*The initialization struct for UART 3*/
	USART_Init_struct Uart_t_Initialization;
	/*2 stands for USART 3 */
	Uart_t_Initialization.UartNo= 2;
 800209e:	2302      	movs	r3, #2
 80020a0:	703b      	strb	r3, [r7, #0]
	Uart_t_Initialization.Word_Length= Data_9_Bits;
 80020a2:	2308      	movs	r3, #8
 80020a4:	607b      	str	r3, [r7, #4]
	Uart_t_Initialization.Parity= Odd_Parity;
 80020a6:	2305      	movs	r3, #5
 80020a8:	60bb      	str	r3, [r7, #8]
	Uart_t_Initialization.Baud_Rate= BaudRate_19200;
 80020aa:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80020ae:	60fb      	str	r3, [r7, #12]
	Uart_t_Initialization.Stop_Bits= One_Stop_Bit;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
	Uart_t_Initialization.Mode= Asynchronous;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

	/*Initialize system clock*/
	RCC_voidInitSystemClock();
 80020b8:	f7ff f88c 	bl	80011d4 <RCC_voidInitSystemClock>

	/*Enable clock for the used peripheral*/
	/*Enable clock for GPIOA, GPIOB, GPIOC*/
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOA);
 80020bc:	2100      	movs	r1, #0
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff f8a8 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOB);
 80020c4:	2101      	movs	r1, #1
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff f8a4 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOC);
 80020cc:	2102      	movs	r1, #2
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff f8a0 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_AHB1,RCC_AHB1_GPIOD);
 80020d4:	2103      	movs	r1, #3
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff f89c 	bl	8001214 <RCC_voidEnableCompClk>

	/*Enable clock for Timers from 2 to 5*/
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_TIM2);
 80020dc:	2100      	movs	r1, #0
 80020de:	2004      	movs	r0, #4
 80020e0:	f7ff f898 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_TIM3);
 80020e4:	2101      	movs	r1, #1
 80020e6:	2004      	movs	r0, #4
 80020e8:	f7ff f894 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_TIM4);
 80020ec:	2102      	movs	r1, #2
 80020ee:	2004      	movs	r0, #4
 80020f0:	f7ff f890 	bl	8001214 <RCC_voidEnableCompClk>
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_TIM5);
 80020f4:	2103      	movs	r1, #3
 80020f6:	2004      	movs	r0, #4
 80020f8:	f7ff f88c 	bl	8001214 <RCC_voidEnableCompClk>

	/*Enable clock for UART 3*/
	RCC_voidEnableCompClk(RCC_APB1,RCC_APB1_USART3);
 80020fc:	2112      	movs	r1, #18
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff f888 	bl	8001214 <RCC_voidEnableCompClk>

	/*Direction pins*/
	/*Right motor */
	GPIO_voidSetPinDirection(GPIOC,PIN7,OUTPUT_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 8002104:	2224      	movs	r2, #36	; 0x24
 8002106:	2107      	movs	r1, #7
 8002108:	2004      	movs	r0, #4
 800210a:	f7fe fc59 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOB,PIN10,OUTPUT_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	210a      	movs	r1, #10
 8002112:	2003      	movs	r0, #3
 8002114:	f7fe fc54 	bl	80009c0 <GPIO_voidSetPinDirection>
    /*Left motor */
    GPIO_voidSetPinDirection(GPIOB,PIN3,OUTPUT_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 8002118:	2224      	movs	r2, #36	; 0x24
 800211a:	2103      	movs	r1, #3
 800211c:	2003      	movs	r0, #3
 800211e:	f7fe fc4f 	bl	80009c0 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(GPIOD,PIN2,OUTPUT_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	2102      	movs	r1, #2
 8002126:	2005      	movs	r0, #5
 8002128:	f7fe fc4a 	bl	80009c0 <GPIO_voidSetPinDirection>

	/*Set alternating functions pins*/
	/*PWM Pins*/
    /*Right motor*/
    GPIO_voidSetPinDirection(GPIOB,PIN5,ALTERNATING_FUNCTION_PUSH_PULL_WITH_PU_MEDIUM_SPEED);
 800212c:	2245      	movs	r2, #69	; 0x45
 800212e:	2105      	movs	r1, #5
 8002130:	2003      	movs	r0, #3
 8002132:	f7fe fc45 	bl	80009c0 <GPIO_voidSetPinDirection>
    /*Left motor*/
	GPIO_voidSetPinDirection(GPIOB,PIN4,ALTERNATING_FUNCTION_PUSH_PULL_WITH_PU_MEDIUM_SPEED);
 8002136:	2245      	movs	r2, #69	; 0x45
 8002138:	2104      	movs	r1, #4
 800213a:	2003      	movs	r0, #3
 800213c:	f7fe fc40 	bl	80009c0 <GPIO_voidSetPinDirection>

	GPIO_voidSetAlternatingFunction(GPIOB,PIN5,AF2);
 8002140:	2202      	movs	r2, #2
 8002142:	2105      	movs	r1, #5
 8002144:	2003      	movs	r0, #3
 8002146:	f7fe fec9 	bl	8000edc <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOB,PIN4,AF2);
 800214a:	2202      	movs	r2, #2
 800214c:	2104      	movs	r1, #4
 800214e:	2003      	movs	r0, #3
 8002150:	f7fe fec4 	bl	8000edc <GPIO_voidSetAlternatingFunction>


	/*UART3 Pins*/
	GPIO_voidSetPinDirection(GPIOC,PIN10,ALTERNATING_FUNCTION_PUSH_PULL_WITH_PU_MEDIUM_SPEED);
 8002154:	2245      	movs	r2, #69	; 0x45
 8002156:	210a      	movs	r1, #10
 8002158:	2004      	movs	r0, #4
 800215a:	f7fe fc31 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOC,PIN11,ALTERNATING_FUNCTION_PUSH_PULL_NO_PUPD_MEDIUM_SPEED);
 800215e:	2244      	movs	r2, #68	; 0x44
 8002160:	210b      	movs	r1, #11
 8002162:	2004      	movs	r0, #4
 8002164:	f7fe fc2c 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetAlternatingFunction(GPIOC,PIN10,AF7);
 8002168:	2207      	movs	r2, #7
 800216a:	210a      	movs	r1, #10
 800216c:	2004      	movs	r0, #4
 800216e:	f7fe feb5 	bl	8000edc <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOC,PIN11,AF7);
 8002172:	2207      	movs	r2, #7
 8002174:	210b      	movs	r1, #11
 8002176:	2004      	movs	r0, #4
 8002178:	f7fe feb0 	bl	8000edc <GPIO_voidSetAlternatingFunction>

	/*Encoder pins*/
	/*Right motor encoder pins*/
	GPIO_voidSetPinDirection(GPIOA,PIN0,ALTERNATING_FUNCTION_OPEN_DRAIN_NO_PUPD_MEDIUM_SPEED);
 800217c:	2254      	movs	r2, #84	; 0x54
 800217e:	2100      	movs	r1, #0
 8002180:	2002      	movs	r0, #2
 8002182:	f7fe fc1d 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN1,ALTERNATING_FUNCTION_OPEN_DRAIN_NO_PUPD_MEDIUM_SPEED);
 8002186:	2254      	movs	r2, #84	; 0x54
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f7fe fc18 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetAlternatingFunction(GPIOA,PIN0,AF1);
 8002190:	2201      	movs	r2, #1
 8002192:	2100      	movs	r1, #0
 8002194:	2002      	movs	r0, #2
 8002196:	f7fe fea1 	bl	8000edc <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOA,PIN1,AF1);
 800219a:	2201      	movs	r2, #1
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f7fe fe9c 	bl	8000edc <GPIO_voidSetAlternatingFunction>

	/*Left motor encoder pins*/
	GPIO_voidSetPinDirection(GPIOB,PIN6,ALTERNATING_FUNCTION_OPEN_DRAIN_NO_PUPD_MEDIUM_SPEED);
 80021a4:	2254      	movs	r2, #84	; 0x54
 80021a6:	2106      	movs	r1, #6
 80021a8:	2003      	movs	r0, #3
 80021aa:	f7fe fc09 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOB,PIN7,ALTERNATING_FUNCTION_OPEN_DRAIN_NO_PUPD_MEDIUM_SPEED);
 80021ae:	2254      	movs	r2, #84	; 0x54
 80021b0:	2107      	movs	r1, #7
 80021b2:	2003      	movs	r0, #3
 80021b4:	f7fe fc04 	bl	80009c0 <GPIO_voidSetPinDirection>
	GPIO_voidSetAlternatingFunction(GPIOB,PIN6,AF2);
 80021b8:	2202      	movs	r2, #2
 80021ba:	2106      	movs	r1, #6
 80021bc:	2003      	movs	r0, #3
 80021be:	f7fe fe8d 	bl	8000edc <GPIO_voidSetAlternatingFunction>
	GPIO_voidSetAlternatingFunction(GPIOB,PIN7,AF2);
 80021c2:	2202      	movs	r2, #2
 80021c4:	2107      	movs	r1, #7
 80021c6:	2003      	movs	r0, #3
 80021c8:	f7fe fe88 	bl	8000edc <GPIO_voidSetAlternatingFunction>

	/*Initialize NVIC*/
	NVIC_Init();
 80021cc:	f7fe ff64 	bl	8001098 <NVIC_Init>

	/*Initialize UART 3*/
	MUSART_voidInit(&Uart_t_Initialization);
 80021d0:	463b      	mov	r3, r7
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fcdc 	bl	8001b90 <MUSART_voidInit>
	/*Enable UART receive interrupt*/
	MSUART_voidInterrupt(2,USART_RxDataNotEmptyInt,USART_Interrupt_Enable);
 80021d8:	2208      	movs	r2, #8
 80021da:	2105      	movs	r1, #5
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff fdf1 	bl	8001dc4 <MSUART_voidInterrupt>
	/*Get the PWM value for the motors velocity from the received data from UART*/
	MUSART3_voidSetCallBack(getVelocity);
 80021e2:	481f      	ldr	r0, [pc, #124]	; (8002260 <main+0x1c8>)
 80021e4:	f7ff fe44 	bl	8001e70 <MUSART3_voidSetCallBack>

	/*Write direction*/
	/*Right motor*/
	GPIO_voidSetPinValue(GPIOC,PIN7,GPIO_HIGH);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2107      	movs	r1, #7
 80021ec:	2004      	movs	r0, #4
 80021ee:	f7fe fe0d 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIOB,PIN10,GPIO_LOW);
 80021f2:	2200      	movs	r2, #0
 80021f4:	210a      	movs	r1, #10
 80021f6:	2003      	movs	r0, #3
 80021f8:	f7fe fe08 	bl	8000e0c <GPIO_voidSetPinValue>
	/*Left motor*/
	GPIO_voidSetPinValue(GPIOB,PIN3,GPIO_HIGH);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2103      	movs	r1, #3
 8002200:	2003      	movs	r0, #3
 8002202:	f7fe fe03 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(GPIOD,PIN2,GPIO_LOW);
 8002206:	2200      	movs	r2, #0
 8002208:	2102      	movs	r1, #2
 800220a:	2005      	movs	r0, #5
 800220c:	f7fe fdfe 	bl	8000e0c <GPIO_voidSetPinValue>

	/*Enable encoder mode on timer 2 for right motor */
	TimerX_EncoderMode(TIMER_2_);
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff fb35 	bl	8001880 <TimerX_EncoderMode>
	/*Enable encoder mode on timer 4 for left motor */
	TimerX_EncoderMode(TIMER_4_);
 8002216:	2002      	movs	r0, #2
 8002218:	f7ff fb32 	bl	8001880 <TimerX_EncoderMode>

	/*Enable timer 3 to generate an interrupt every 1 sec*/
	TimerX_Count(TIMER_5_,UP_COUNTER,1000);
 800221c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002220:	2100      	movs	r1, #0
 8002222:	2003      	movs	r0, #3
 8002224:	f7ff f85a 	bl	80012dc <TimerX_Count>
	/*Get the angular velocity from encoder every 1 sec*/
	Timer5_voidSetCallBack(readEncoder);
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <main+0x1cc>)
 800222a:	f7ff fc95 	bl	8001b58 <Timer5_voidSetCallBack>

	/*Initialize PWM on right motor with duty cycle 20% as a start*/
	TimerX_PWM(TIMER_3_,CH2,20);
 800222e:	2214      	movs	r2, #20
 8002230:	2101      	movs	r1, #1
 8002232:	2001      	movs	r0, #1
 8002234:	f7ff f8fe 	bl	8001434 <TimerX_PWM>
	/*Initialize PWM on left motor with duty cycle 20% as a start*/
	TimerX_PWM(TIMER_3_,CH1,20);
 8002238:	2214      	movs	r2, #20
 800223a:	2100      	movs	r1, #0
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff f8f9 	bl	8001434 <TimerX_PWM>

	while(1)
	{
		TimerXChangeDutyCycleOfPWM(TIMER_3_,CH2,PWM_right_motor);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <main+0x1d0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	2101      	movs	r1, #1
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff fbd4 	bl	80019f8 <TimerXChangeDutyCycleOfPWM>
		TimerXChangeDutyCycleOfPWM(TIMER_3_,CH1,PWM_left_motor);
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <main+0x1d4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	2100      	movs	r1, #0
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fbcd 	bl	80019f8 <TimerXChangeDutyCycleOfPWM>
		TimerXChangeDutyCycleOfPWM(TIMER_3_,CH2,PWM_right_motor);
 800225e:	e7f0      	b.n	8002242 <main+0x1aa>
 8002260:	08002029 	.word	0x08002029
 8002264:	08001f09 	.word	0x08001f09
 8002268:	20000028 	.word	0x20000028
 800226c:	20000029 	.word	0x20000029

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f842 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <SystemInit+0x28>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <SystemInit+0x28>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SystemInit+0x28>)
 80022da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022de:	609a      	str	r2, [r3, #8]
#endif
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800230c:	4c0b      	ldr	r4, [pc, #44]	; (800233c <LoopFillZerobss+0x26>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffd3 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f000 f825 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff feb9 	bl	8002098 <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002334:	080023d8 	.word	0x080023d8
  ldr r2, =_sbss
 8002338:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800233c:	200000c0 	.word	0x200000c0

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000002a 	.word	0x2000002a
 8002368:	200000bc 	.word	0x200000bc

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4d0d      	ldr	r5, [pc, #52]	; (80023a4 <__libc_init_array+0x38>)
 8002370:	4c0d      	ldr	r4, [pc, #52]	; (80023a8 <__libc_init_array+0x3c>)
 8002372:	1b64      	subs	r4, r4, r5
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	2600      	movs	r6, #0
 8002378:	42a6      	cmp	r6, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	4d0b      	ldr	r5, [pc, #44]	; (80023ac <__libc_init_array+0x40>)
 800237e:	4c0c      	ldr	r4, [pc, #48]	; (80023b0 <__libc_init_array+0x44>)
 8002380:	f000 f818 	bl	80023b4 <_init>
 8002384:	1b64      	subs	r4, r4, r5
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	2600      	movs	r6, #0
 800238a:	42a6      	cmp	r6, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	f855 3b04 	ldr.w	r3, [r5], #4
 8002394:	4798      	blx	r3
 8002396:	3601      	adds	r6, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	f855 3b04 	ldr.w	r3, [r5], #4
 800239e:	4798      	blx	r3
 80023a0:	3601      	adds	r6, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	080023d0 	.word	0x080023d0
 80023a8:	080023d0 	.word	0x080023d0
 80023ac:	080023d0 	.word	0x080023d0
 80023b0:	080023d4 	.word	0x080023d4

080023b4 <_init>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr

080023c0 <_fini>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr
